<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function($scope, $location, $timeout, $window, $document, $rootScope, spUtil,spAriaUtil) {
	var c = this;
	$scope.selectedCatalog = c.data.catalogSelectorArr[0];
	console.log($scope.selectedCatalog);
	$scope.changeCatalog = function (selectedCatalog) {
		$timeout(function() {
			if (selectedCatalog && selectedCatalog.hasOwnProperty("value")) {
				$location.search('catalog_id', selectedCatalog.value ? selectedCatalog.value : -1);
				$location.search('sys_id', null);
			}
		});
	}
	$scope.hideCategoryWidgetInXS = (c.options.hide_xs == 'true');
	if (c.data.categoryId) {
		if (!$scope.hideCategoryWidgetInXS)
			$scope.hideCategoryWidgetInXS = true;
	} else {
		if ($scope.hideCategoryWidgetInXS)
			$scope.hideCategoryWidgetInXS = false;
	}
	
	spUtil.getPreference('glide.ui.accessibility', function(value) {
		if (value == "true")
			$scope.tabindex = 0;
		else
			$scope.tabindex = -1;
	});
	$scope.displayChildren = function($event, category) {
		$event.stopPropagation();
		category.showChildren = !category.showChildren;
		if (category.showChildren) {
			spAriaUtil.sendLiveMessage(category.title + ' '+ c.data.messages.expanded);
		} 
		else {
			spAriaUtil.sendLiveMessage(category.title + ' ' +c.data.messages.collapsed);
		}
	};
	
	$scope.toggleSubCategories =  function(val) {
		toggleSubCategories(c.data.categoriesList, val);
	};
	
	function toggleSubCategories(categories, val) {
		categories.forEach(function(category) {
			category.showChildren = val;
			if (category.subcategories && category.subcategories.length > 0) {
				toggleSubCategories(category.subcategories, val);
			}
		});
	}
	
	$scope.loadMore =  function() {
		c.data.new_limit = c.data.limit + (c.options.number_of_categories_to_load || 15);
		c.data.more_msg = c.data.pleaseWait;
		c.server.update();
	};
	
	$scope.categorySelected = function(category) {
			$timeout(function() {
				$location.search('sys_id', category.sys_id);
				$location.search('catalog_id', c.data.catalog_id);
				$location.search('id','service_catalog_lms');
			});
	};
	
	var listenerForBrowseCategories = $scope.$on("$sp.service_catelog.show.categories_widget", function() {
		$scope.hideCategoryWidgetInXS = false;
	});
	
	$scope.hideBrowseCategory = function () {
		$scope.hideCategoryWidgetInXS = true;
		$rootScope.$broadcast("$sp.service_catelog.show.items_widget");
	}
	
	$scope.$on("$destroy", function() {
		listenerForBrowseCategories();
	});
	
	$scope.isTouchDevice = function() {
		return ('ontouchstart' in $window);
	}
}]]></client_script>
        <controller_as>c</controller_as>
        <css>.category-widget {
	border: 1px solid $panel-inner-border;
  
  .category-list {
    .fa {
      margin-right: 5px;
    }
    .l-h-1_6x {
      line-height: 1.6em;
    }
    a {
		width: 100%;
      	vertical-align: middle;
	    display: inline-block;
    }
    .list-group {
      margin-bottom: 0;
    }
    .list-group-item {
      padding: 0;
      border: 0;
    }
    .group-item {
      padding: 10px 15px;
    }
    .group-item-default {
      &amp;:hover, &amp;:focus {
        background-color: darken($panel-default-heading-bg, 2%);
      }
    }
    .group-item-primary {
      &amp;:hover, &amp;:focus {
        border-left: 3px solid $primary !important;
      }
    }
    .group-item-success {
      &amp;:hover {
        background-color: lighten($panel-success-heading-bg, 3%)
      }
    }
    .group-item-info {
      &amp;:hover, &amp;:focus {
        background-color: lighten($panel-info-heading-bg, 3%)
      }
    }
    .group-item-warning {
      &amp;:hover, &amp;:focus {
        background-color: $panel-warning-heading-bg
      }
    }
    .group-item-danger {
      &amp;:hover, &amp;:focus {
        background-color: lighten($panel-danger-heading-bg, 3%)
      }
    }
    
    .list-bg-default {
      background-color: $panel-default-heading-bg;
    }
    .list-bg-primary {
      background-color: lighten($panel-info-heading-bg, 6%);
    }
    .list-bg-success {
      background-color: lighten($panel-success-heading-bg, 6%);
    }
    .list-bg-info {
      background-color: lighten($panel-info-heading-bg, 6%);
    }
    .list-bg-warning {
      background-color: lighten($panel-warning-heading-bg, 3%);
    }
    .list-bg-danger {
      background-color: lighten($panel-danger-heading-bg, 6%);
    }
  }
}
.panel-primary .badge {
  background-color: $primary;
  color: white;
}
.panel-default .badge {
  background-color: $panel-default-text;
  color: white
}
.panel-success .badge {
  background-color:  $panel-success-text;
  color: white;
}
.panel-info .badge {
  background-color: $panel-info-text;
  color: white;
}
.panel-warning .badge {
  background-color: $panel-warning-text;
  color: white;
}
.panel-danger .badge {
  background-color: $panel-danger-text;
  color: white;
}
.category-list .badge {
  text-align: right;
}
.text-active {
   color: $link-color;
   border-left: 3px solid $primary
}
.text-default {
   color: $text-muted;
}

.list-group-item {
	.list-group.sub-category-list {
  	.list-group-item span.category { // we only want nested list group items to have this indent
    	padding-left: 15px;
    }
  }
}

    .holder {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        width: 100%;
        max-width: 100%;
        overflow: hidden;
      	margin-bottom: 25px;
    }

    .cat-item {
        margin: 0 5px 9px;
        box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);
        transition: 0.3s;
      span{
        position: relative;
        left: 75%;
        top: -25px;
        z-index: 5;
        font-weight: bold;
        border-radius: 50%;
        background: #293e40;
        width: 50px;
        height: 50px;
        text-align: center;
        line-height: 50px !important;
        color: white;
        display: block;
    		font-size: larger;
      }
    }
    .cat-item:hover{
       transform: scale(1.05);
      box-shadow: 0px 0px 150px #5a5959;
    }

    .cat-title {
        color: #24262b;
        font-family: Montserrat, sans-serif;
        font-size: 30px;
        line-height: 1.333333333333333em;
        font-weight: 700;
      	cursor:pointer;
    }

    .sub-cat {
        list-style-type: none;
        font-size: 16px;
        font-weight: 600;
        line-height: 25px;
        text-align: start;
        padding-inline-start:0px;
        color: #666666;
      cursor:pointer;
    }


    .inner-container {
        padding: 2px 16px;
    }
</css>
        <data_table>sp_instance</data_table>
        <demo_data>{"options" :&#13;
   {&#13;
      "hide_xs" : false&#13;
   }&#13;
}</demo_data>
        <description/>
        <docs/>
        <field_list>color</field_list>
        <has_preview>true</has_preview>
        <id>category_formation</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>category_formation</name>
        <option_schema>[{"name":"hide_xs","default_value":false,"section":"Behavior","label":"Hide at XS","type":"boolean"},{"name":"omit_badges","section":"Behavior","label":"Omit badges (may impact performance for large items in categories)","type":"boolean"},{"name":"check_can_view","default_value":"true","section":"Behavior","label":"Check canView per item","type":"boolean"},{"hint":"Choose between a flattened and a nested category structure (Nested may impact performance for large items in categories)","name":"category_layout","section":"Presentation","label":"Category Layout","type":"choice","choices":[{"label":"Flat","value":"Flat"},{"label":"Nested","value":"Nested"}]},{"displayValue":"Page","name":"page","section":"Data","label":"page","type":"reference","value":"sp_page","ed":{"reference":"sp_page"}},{"hint":"Number of categories to load on page load","name":"number_of_categories_to_load","section":"Data","default_value":"15","label":"Number of categories to load","type":"integer"}]</option_schema>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {

var catalog_id = $sp.getParameter("catalog_id") ? $sp.getParameter("catalog_id") + "" : "-1";
	var catalogSelectorArr = [];
	data.selectedCatalogIndex = catalog_id == -1 ? 0 : -1;
	var catalogIDs = $sp.getCatalogs().value + "";
	var catalogs = catalogIDs.split(",");
	gs.warn("catalogs"+catalogs);
	var isCatalogAccessibleViaPortal = catalog_id == -1 ? true : false;
	catalogs.forEach(function(catalogSysId) {
		if (catalog_id == catalogSysId) {
			isCatalogAccessibleViaPortal = true;
		}
	});

	var counter = 1;
	catalogs.forEach(function(catalogSysId,index) {
		if(index==0){
		gs.warn(catalogSysId);
		var catalog = new sn_sc.Catalog(catalogSysId);
		gs.warn(catalog);
		var catalogObj = {value: catalogSysId, displayValue: catalog.getTitle()};
		if (catalog.canView()) {
			if (catalog_id === catalogSysId) {
				data.selectedCatalogIndex = counter;
			}
			catalogSelectorArr.push(catalogObj);
			counter++;
		}
		}
	});
	data.catalogSelectorArr = catalogSelectorArr;
	
	
	data.catalog_id = catalog_id ? catalog_id : "-1";
	data.showMoreMsg = gs.getMessage("Show More");
	data.pleaseWait = gs.getMessage("Please wait... fetching categories");
	var categoryId =  $sp.getParameter('sys_id')==undefined ? "" : $sp.getParameter('sys_id')+ "";
	data.categoryId = categoryId;
	var catalogIDs = (data.catalog_id && data.catalog_id !== "-1") ? data.catalog_id : $sp.getCatalogs().value + "";
	var viewType = '';
	var checkCanView = false;
	var nestedLayout = (options.category_layout !== "Flat");
	var dynamicCategory = false;
	
	var catalogArr = catalogIDs.split(",");
	var catalogs = [];
	catalogArr.forEach(function(catalogSysId) {
		var catalog = new sn_sc.Catalog(catalogSysId);
		if (catalog.canView()) {
			catalogs.push(catalogSysId);
		}
	});
	
	data.categoryId = categoryId;
	var msg = data.messages = {};
	msg.expanded = gs.getMessage("Expanded");
	msg.collapsed = gs.getMessage("Collapsed");
	msg.catalogTitle = options.catalog_title? gs.getMessage(options.catalog_title) : gs.getMessage('Catalogs');
	
	data.largeDataSet = gs.getProperty("glide.sc.largeSet.optimization.enable", "false");
	if (data.largeDataSet == 'true')
		 nestedLayout = false;
	
	if (options.page) {
		var page = new GlideRecord('sp_page');
		if (page.get(options.page))
			data.page = page.id + '';
	}
	checkCanView = (options.check_can_view == 'true');
	
	if(!isCatalogAccessibleViaPortal) {
		return;
	}
	data.categoriesList = [];
	var categoriesInPage = options.number_of_categories_to_load || 15;
	data.limit = categoriesInPage;
	
	if (input && input.new_limit)
		data.limit = input.new_limit;
	if (input && input.categoriesList)
		data.categoriesList = input.categoriesList.slice(); //Copy the input array
	  gs.warn("categories"+data.categoriesList);
	if (input && input.startWindow) {
		data.endWindow = input.endWindow;
	}
	else {
		data.startWindow = 0;
		data.endWindow = 0;
	}

	while (data.categoriesList.length < data.limit + 1) {
			data.startWindow = data.endWindow;
			data.endWindow = data.endWindow + categoriesInPage;
			var catGr = queryCategory(catalogs, nestedLayout, dynamicCategory, data.startWindow, data.endWindow);
		
							if (!catGr.hasNext())
				break;
			fetchCategories(catGr, data.categoriesList);
	}
	
	if (data.categoriesList.length > data.limit)
			data.showMore = true;
	else
		data.showMore = false;
	
	data.more_msg = gs.getMessage("Showing {0} categories", data.limit);
	
	
	function fetchCategories(categoriesGr, categories) {
		while (categoriesGr.next()) {
			var categoryJS = new sn_sc.CatCategory(categoriesGr.getUniqueValue() + '');
			if (!categoryJS.canView())
				continue;
		
			var categoryDetails = getCategoryDetails(categoryJS, 0);
			categoryDetails.sys_id = categoriesGr.getUniqueValue();
			categories.push(categoryDetails);
		}
	}
	
	function queryCategory(catalogs, nestedLayout, dynamicCategory, startWindow, endWindow) {
			var categoriesGr = new GlideRecord('sc_category');
			categoriesGr.addQuery("sc_catalog","5107e2762f723300a4a2c886f699b6c1");
		  gs.warn("category title"+categoriesGr.getDisplayValue("title"));
			if (!dynamicCategory)
				categoriesGr.addQuery("sys_class_name", "sc_category");
			categoriesGr.addActiveQuery();
			categoriesGr.orderBy('order');
			//categoriesGr.orderBy('title');
			if (nestedLayout)
				categoriesGr.addNullQuery("parent");
			categoriesGr.chooseWindow(startWindow, endWindow);
			categoriesGr.query();
			return categoriesGr;
	}
	
	function getCategoryDetails(categoryJS, level) {
		var categoryDetails = {};
		var showChildren = false;
		if (!categoryJS) {
			return categoryDetails;
		}
		categoryDetails.title = categoryJS.getTitle();
		categoryDetails.level = level;
		categoryDetails.description = categoryJS.getDescription();
		categoryDetails.full_description = categoryJS.getFullDescription();
		categoryDetails.icon = categoryJS.getIconSRC();
		categoryDetails.header_icon = categoryJS.getHeaderIconSRC();
		categoryDetails.homepage_image = categoryJS.getHomepageImageSRC();
		categoryDetails.sys_id = categoryJS.getID();
		categoryDetails.showChildren = (categoryDetails.sys_id === categoryId);
		categoryDetails.catalog = {"sys_id": categoryJS.getCatalog(), "title": new sn_sc.Catalog(categoryJS.getCatalog()).getTitle()}
		if (catalog_id == -1 && catalogSelectorArr.length > 2)
			categoryDetails.catalog_tooltip = gs.getMessage("[{0}]", categoryDetails.catalog.title);
		else
			categoryDetails.catalog_tooltip = '';
		
		if (data.largeDataSet != 'true') {
			if (checkCanView)
					categoryDetails.count = categoryDetails.totalCount = categoryJS.getViewableItemsCount(true);
				else
					categoryDetails.count = categoryDetails.totalCount = categoryJS.getItemsCount(true);
		}
		else {
			categoryDetails.count = 1;
		}
		
		var subCategoryCounts = 0;
		if (nestedLayout) {
			var subcategories = categoryJS.getViewableSubCategories();
			
			if (subcategories.length == 0) {
				categoryDetails.subcategories = [];
			} 
			else {
					categoryDetails.subcategories = [];
					subcategories.forEach(function(subCategory) {
						var subCategoryJS = new sn_sc.CatCategory(subCategory.sys_id + '');
						var category = getCategoryDetails(subCategoryJS, level + 1);
						categoryDetails.totalCount = categoryDetails.totalCount + category.totalCount;
						categoryDetails.subcategories.push(category);
						categoryDetails.showChildren = categoryDetails.showChildren || category.showChildren;
					});
				}
		}
		else {
			categoryDetails.totalCount = categoryDetails.count;
		}
		return categoryDetails;
	}
})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2020-01-21 08:55:18</sys_created_on>
        <sys_id>2c2cd0a4db62001016939b81ca9619d2</sys_id>
        <sys_mod_count>41</sys_mod_count>
        <sys_name>category_formation</sys_name>
        <sys_package display_value="LMS" source="x_315700_lms">03ba89b6db003300c1e8f53a299619df</sys_package>
        <sys_policy/>
        <sys_scope display_value="LMS">03ba89b6db003300c1e8f53a299619df</sys_scope>
        <sys_update_name>sp_widget_2c2cd0a4db62001016939b81ca9619d2</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2020-07-20 14:51:20</sys_updated_on>
        <template><![CDATA[<link href='https://fonts.googleapis.com/css?family=Montserrat' rel='stylesheet'>
<div class="holder">
        <div ng-repeat="category in data.categoriesList| orderBy:order | limitTo: data.limit track by category.sys_id" class="cat-item">
                <img src="{{::category.icon}}"
                    alt="Cover" style="width:100%; height:200px">
          <span>{{::category.totalCount}} <i class="fas fa-book fa-sm" ></i> </span>
                <div class="inner-container">
                    <h3 class="cat-title" ng-click="categorySelected(category)"> {{::category.title}}</h3>
                    <ul ng-if="category.subcategories.length > 0" class="sub-cat">
                        <li ng-click="categorySelected( sub_category)" ng-repeat="sub_category in category.subcategories" class="sub-cat-item">{{::sub_category.title}}</li>
                    </ul>
                    
                    
                </div>
        </div>
</div>
<script src="https://kit.fontawesome.com/3ee87980f2.js" crossorigin="anonymous"></script>

]]></template>
    </sp_widget>
</record_update>
