<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function($scope, $sce, CourseData) {

  var height = $('#course_title').outerHeight();
  $('#title').css('height', height + 'px');
  $('.action_btn').css('margin-top', (height - 40) / 2);
  $('.action_btn').css('margin-bottom', (height - 40) / 2);


  //custom alert boxes
  var c = this;
  c.data.reading_mode = true;
  c.data.edit = false;
  c.data.unit_name = "";
  //draw unit html on view mode ( gets result from quill directive )
  $scope.draw = function (html) {
    document.getElementById("view-mode").innerHTML = html;
  }

  //c.data.course_id = "course";
  c.data.unit_content = false;
  c.data.update_info = false;
  c.data.selected_obj = false;
  c.data.selected_all = [];
  c.data.positions = ['At the beginning', 'Before', 'After', 'At the end'];
  c.data.selected_position = "Select an option";

  $scope.changePosition = function (i) {
    c.data.selected_position = c.data.positions[i];
    c.data.disable_select_option = c.data.selected_position == c.data.positions[0] || c.data.selected_position == c.data.positions[3] ? true : null;
    c.data.position_error = null;
  }
  // $scope.objectChange = function () {
  //   c.data.position_error = null;
  // }
  c.data.disable_select_option = c.data.selected_position == c.data.positions[0] || c.data.selected_position == c.data.positions[3] ? true : null;

  $scope.$watch(function () { return CourseData.getCurrent() }, function (new_val) {
    var current_id = CourseData.getCurrent();
    var sectionlist = CourseData.getSectionList();

    if (current_id) {
      var current_object = CourseData.getSelectedObject(sectionlist, current_id);

      if (current_object.type == "sec") {
        current_object.listAll = CourseData.getAllSections(sectionlist);
      } else {
        current_object.listAll = CourseData.getSelectedObject(sectionlist, current_object.parent).obj.list_obj;
        if (current_object.type == "sub") {
          current_object.list_sec_sub = CourseData.getAllSections(sectionlist);
        } else {
          current_object.list_sec_sub = CourseData.getListSectionSub(sectionlist);
        }
      }
      if (current_object) {
        //rest error messages 
        c.data.position_error = null;
        c.data.name_error = null;
        //reset data holders
        c.data.selected_position = "Select an option";
        c.data.selected_all = [];
        c.data.selected_obj = true;
        c.data.selected_name = current_object.obj.name;
        if (current_object.type == 'sub unit')
          c.data.type = 'unt';
        else
          c.data.type = current_object.type;
        c.data.selected_id = current_object.obj.sys_id;
        c.data.selected_all = current_object.listAll;
        c.data.list = sectionlist;
        if (current_object.list_sec_sub) {
          c.data.list_sec_sub = current_object.list_sec_sub;
          c.data.inside = current_object.parent;
          //appel
          $scope.loadAfter();
          c.data.old_parent = current_object.parent;
        }
        if (c.data.type == 'unt') {
          //emmit to quill directive
          $scope.$emit('unit_selected', current_object.obj.sys_id);
          c.data.unit_content = true;
          c.data.update_info = false;
        } else {
          c.data.unit_content = false;
          c.data.update_info = true;
        }
      }
    }
  }, true);
  // if(c.data.current_state && c.data.current_state !=''){
  // 	console.log(CourseData.dataHolder);
  // }
  $scope.update = function () {
    c.data.action = "update";
    c.data.name = c.data.selected_name;
    switch (c.data.selected_position) {
      case 'At the beginning': c.data.position = 'begin'; c.data.order = CourseData.getOrder(c.data.selected_all, 'first'); break;
      case 'Before': c.data.position = 'before'; c.data.order = CourseData.getSelectedObject(c.data.list, c.data.selected_object) ? CourseData.getSelectedObject(c.data.list, c.data.selected_object).obj.order : null; break;
      case 'After': c.data.position = 'after'; c.data.order = CourseData.getSelectedObject(c.data.list, c.data.selected_object) ? CourseData.getSelectedObject(c.data.list, c.data.selected_object).obj.order + 100 : null; break;
      case 'At the end': c.data.position = 'end'; c.data.order = parseInt(CourseData.getOrder(c.data.selected_all, 'last')); break;
      default: c.data.position = null; break;
    }

    c.data.parent = c.data.type == 'sec' ? c.data.course_id : c.data.inside;
    var test = test_input();
    if (test) {
      c.server.update().then(function (r) {
        c.data.selected_position = "Select an option";
        $scope.$emit('reload');
        Swal.fire({
          position: 'top-end',
          icon: 'success',
          title: 'Update to ' + c.data.name + ' has been saved',
          showConfirmButton: false,
          timer: 1500
        });

      });
    }

  }
  $scope.delete = function () {
    //delete object
    Swal.fire({
      title: 'Are you sure?',
      text: "You won't be able to revert this!",
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#d33',
      cancelButtonColor: '#e3e3e3',
      confirmButtonText: 'Yes, delete it!'
    }).then(function (result) {
      if (result.value) {
        c.data.action = 'delete';
        c.data.parent = c.data.course_id;
        c.server.update().then(function (r) {
          if (r.deleted) {
            $scope.$emit('reload');
            Swal.fire({
              position: 'top-end',
              title: 'Deleted!',
              icon: 'success',
              showConfirmButton: false,
              timer: 1500
            });
          }
        });

      }
    });
  }
  $scope.update_info = function () {
    //update button clicked
    c.data.update_info = !c.data.update_info;
    if (c.data.type == 'unt')
      c.data.unit_content = !c.data.update_info;
  }
  $scope.edit = function () {
    //edit button clicked in unit only
    c.data.edit = !c.data.edit;
    c.data.update_info = false;
    if (!c.data.edit) {
      $('#quill-change').removeClass("fa-eye").addClass("fa-pencil");
    } else {
      $('#quill-change').removeClass("fa-pencil").addClass("fa-eye");
    }

  }
  $scope.loadAfter = function () {
    c.data.inside_error = null;
    var selected_obj = CourseData.getSelectedObject(c.data.list, c.data.inside);
    c.data.selected_all = CourseData.getListObjects(selected_obj.obj.list_obj);
  }
  $scope.expand = function(){
    $('#expand-icon').toggleClass('fa-expand',true);
    $('#expand-icon').toggleClass('fa-compress',true);
  }

  function test_input() {
    var res = true;
    if (c.data.type != 'sec' && !c.data.position && c.data.old_parent != c.data.parent) {
      res = false;
      c.data.position_error = "Please select a position";
    }
    if (c.data.order == null && c.data.position) {
      res = false;
      c.data.position_error = "Please select a position";
    }
    if (!c.data.name) {
      c.data.name_error = "Name must be provided";
      res = false;
    }
    return res;
  }
}]]></client_script>
        <controller_as>c</controller_as>
        <css>$light=#16dec7;
$dark = #293e40;
$dark2 = #5a7f71;


.ql-spanblock:after {
    content: "&lt;sb/&gt;";
  }
.ql-alertdanger,.ql-alertinfo,.ql-alertsuccess,.ql-alertwarning{
  font-family: FontAwesome;
  display: inline-block;
  padding-right: 6px;
  font-weight:900;
  vertical-align: middle;
}
.ql-alertdanger:after {
  content: "\f057";
  color:#a94442;
  }
.ql-alertinfo:after {
  content: "\f05a";
  color:#31708f;
  }
.ql-alertsuccess:before {
  content: "\f058";
  color:#3c763d;
  }
.ql-alertwarning:after {
  content: "\f071";
  color:#8a6d3b;
  }

  
  .spanblock {
      background-color: #F8F8F8;
      border: 1px solid #CCC;
      line-height: 19px;
      padding: 6px 10px;
      border-radius: 3px;
      margin: 15px 0;
  }
.alert{
	position:relative;
}
.alert-danger::before{
  font-family: FontAwesome;
  display: inline-block;
  padding-right: 6px;
  font-weight:900;
  vertical-align: middle;
  content: "\f057";
  position:absolute;
  top:-10px;
  left:-5px;
}
.alert-info::before{
  font-family: FontAwesome;
  display: inline-block;
  padding-right: 6px;
  font-weight:900;
  vertical-align: middle;
  content: "\f05a";
  position:absolute;
  top:-10px;
  left:-5px;
}

.alert-success::before{
  font-family: FontAwesome;
  display: inline-block;
  padding-right: 6px;
  font-weight:900;
  vertical-align: middle;
  content: "\f058";
  position:absolute;
  top:-10px;
  left:-5px;
}
.alert-warning::before{
  font-family: FontAwesome;
  display: inline-block;
  padding-right: 6px;
  font-weight:900;
  vertical-align: middle;
  content: "\f071";
  position:absolute;
  top:-10px;
  left:-5px;
}
.header{
    background: #596a68;
  	width:100%;
}
#title{
    margin: 0;
    padding: 1em;
  	color:white;
  	display: table-cell;
  	vertical-align: middle;
  	width: 100%

}
.action_btn{
 		border: none;
    outline: none;
    border-radius: 50%;
    height: 40px;
    width: 40px;
  	color:#596a68;
  background:white;
  &amp;:hover{
  box-shadow: 0 0 10px #16dec7;
    color:#16dec7;
}
}
.content{
  padding-top:10px;
}
.modal-footer {
  border-top:none !important;
}
.disabled_action{
background:#f1f1f1 !important;
  &amp;:hover{
    background : #f1f1f1 !important;
    color : black !important;
    pointer-events:none;
  }
}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>fm_quill_editor</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>fm_quill_editor</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function () {
    data.body = "";
    data.unitbody = "";
    data.unitid = "";
    data.unit_name = "";
    data.course_id = $sp.getParameter("sys_id");
	data.current_state = $sp.getParameter("current");
    var course_organizer = new x_315700_lms.CourseOrganizer();

    if (input && input.action == 'update') {
        var new_order = input.order;
        var parent = input.parent ? input.parent : null;
        if (input.type == 'sec') {
            //must catch if user only wants to change the name 
            var gr = new GlideRecord('x_315700_lms_section');
            gr.get(input.selected_id);
            var old_order = parseInt(gr.order);
            if (input.position && input.position == 'begin') {
                course_organizer.updateSectionAtBegin(input.type, parent, old_order);
                gr.order = 0;
            } else if (input.position && input.position == 'end') {
                course_organizer.updateSectionAtEnd(input.type, parent, old_order);
                gr.order = new_order;
                gr.name = input.name;
                gr.update();
            } else if (input.position && (input.position == 'after' || input.position == 'before')) {
                if (old_order > new_order) {
                    //shift forward if old order is greater than the new order
                    course_organizer.shift(input.type, new_order - 100, old_order, 1, parent);
                    gr.order = new_order;
                    gr.name = input.name;
                    gr.update();
                } else {
                    //shift backward if old order is less than the new order
                    course_organizer.shift(input.type, old_order, new_order, -1, parent);
                    gr.order = new_order - 100;
                    gr.name = input.name;
                    gr.update();
                }
            }

            gr.name = input.name;
            gr.update();
        } else if (input.type == 'sub') {
            var gr = new GlideRecord('x_315700_lms_section');
            gr.get(input.selected_id);

            var old_parent = gr.parent_section;
            var old_order = parseInt(gr.order);

            var new_parent = input.parent;
            var new_order = input.order;
            if (input.position) {
                //shift back all object after its old position in the old section
                course_organizer.shift(input.type, old_order, null, -1, old_parent);
                if (input.position && input.position != 'end')
                    new_order = new_order - 100;
                //shift forth all object after its new position in the new section
                course_organizer.shift(input.type, new_order, null, 1, new_parent);

                //if(input.position && input.position == 'before')
                gr.order = new_order + 100;
                gr.parent_section = new_parent;
            }
            gr.name = input.name;
            gr.update();
        } else if (input.type == 'unt') {
            var gr = new GlideRecord('x_315700_lms_unit');
            gr.get(input.selected_id);

            var old_parent = gr.section;
            var old_order = parseInt(gr.order);

            var new_parent = input.parent;
            var new_order = input.order;
            if (input.position) {
                //shift back all object after its old position in the old section
                course_organizer.shift(input.type, old_order, null, -1, old_parent);
                if (input.position && input.position != 'end')
                    new_order = new_order - 100;
                //shift forth all object after its new position in the new section
                course_organizer.shift(input.type, new_order, null, 1, new_parent);

                //if(input.position && input.position == 'before')
                gr.order = new_order + 100;
                gr.section = new_parent;
            }

            gr.name = input.name;
            gr.update();
        }
    } else if (input && input.action == 'delete') {
        data.deleted = false;
        var parent = input.parent ? input.parent : null;
        if (input.type == 'sec' || input.type == 'sub')
            course_organizer.deleteObject('x_315700_lms_section', input.selected_id, parent, input.type);
        else if (input.type == 'unt')
            course_organizer.deleteObject('x_315700_lms_unit', input.selected_id, parent, input.type);
        data.deleted = true;
    }
})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2020-02-17 10:36:48</sys_created_on>
        <sys_id>2e467b09db83001016939b81ca9619c9</sys_id>
        <sys_mod_count>451</sys_mod_count>
        <sys_name>fm_quill_editor</sys_name>
        <sys_package display_value="LMS" source="x_315700_lms">03ba89b6db003300c1e8f53a299619df</sys_package>
        <sys_policy/>
        <sys_scope display_value="LMS">03ba89b6db003300c1e8f53a299619df</sys_scope>
        <sys_update_name>sp_widget_2e467b09db83001016939b81ca9619c9</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2020-03-31 16:17:31</sys_updated_on>
        <template><![CDATA[<link href="https://fonts.googleapis.com/css?family=Quicksand&display=swap" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@9"></script>
<div ng-show="c.data.selected_obj" class="row header">
  <div class="col-sm-9">
    <h3 id="title">
        {{c.data.selected_name}}
    </h3>
  </div>
  <div class="col-sm-3" ng-if="!c.data.reading_mode">
    <div class="col-sm-4">
        <button ng-show="c.data.type == 'unt'" class="action_btn" ng-click="edit()">
          <i id="quill-change" class="fa fa-pencil fa-lg"></i>
         </button>
       </div>
       <div class="col-sm-4">
        <button class="action_btn" ng-click="update_info()">
          <i class="fa fa-cog fa-lg"></i>
         </button>
       </div>
       <div class="col-sm-4">
        <button class="action_btn" ng-click="delete()">
          <i class="fa fa-trash-o fa-lg"></i>
         </button>
       </div>
  </div>
  <div class="col-sm-3" ng-if="c.data.reading_mode">
    <div class="col-sm-4">
        <button class="action_btn" ng-click="expand()">
            <i id="expand-icon" class="fa fa-expand fa-lg"></i>
         </button>
       </div>
       <div class="col-sm-4">
        <button class="action_btn" >
          <i class="fa fa-step-backward fa-lg"></i>
         </button>
       </div>
       <div class="col-sm-4">
        <button class="action_btn">
          <i class="fa fa-step-forward fa-lg"></i>
         </button>
       </div>
  </div>
  
  
</div>
<div ng-show="c.data.unit_content" class="row">
        <div ng-show="c.data.edit">
            <quill-editor draw="draw"></quill-editor>
        </div>
    
        <div ng-show="!c.data.edit" id="view-mode"></div>
</div>

<div ng-if="c.data.update_info && c.data.selected_obj"  class="row modal-body content">
    <div class="form-group" ng-if="c.data.type!='sec'">
    <label for="type">Inside</label>
    <select class="form-control" id="inside" ng-model="c.data.inside" ng-change="loadAfter()">
        <option value="" disabled>Select your option</option>
        <option value="{{obj.id}}" ng-repeat="obj in c.data.list_sec_sub">{{obj.name}}</option>
    </select>
    <small ng-if="c.data.inside_error" class="text-danger">
        {{c.data.inside_error}}
    </small>
</div>
    <div class="form-group" ng-class="{true:'has-error',false:''}[c.data.position_error && c.data.position_error !='']">
        <label for="after">Position</label>
        <div class="input-group">
            <div class="input-group-btn">
                <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown"
                    aria-haspopup="true" aria-expanded="false">{{c.data.selected_position}} <span
                        class="caret"></span></button>
                <ul class="dropdown-menu">
                    <li ng-repeat="pos in c.data.positions track by $index"><a href="#"
                            ng-class="{true:'disabled_action',false:''}[c.data.selected_all.length==0 && (pos=='Before' || pos=='After')]"
                            ng-click="changePosition($index)">{{pos}}</a></li>
                </ul>
            </div>
            <select class="form-control" id="after" ng-model="c.data.selected_object"
                ng-disabled='c.data.disable_select_option' ng-change="objectChange()">
                <option value="" disabled selected>Select your option</option>
                <option ng-disabled="c.data.selected_id == obj_after.id" ng-if="c.data.selected_all.length>0"
                    ng-repeat="obj_after in c.data.selected_all | orderBy:'order'" value="{{obj_after.id}}">
                    {{obj_after.name}}</option>
            </select>
        </div>
        <small ng-if="c.data.position_error" class="text-danger">
            {{c.data.position_error}}
        </small>
    </div>

    <div ng-class="{true:'has-error',false:''}[c.data.name_error && c.data.name_error !='']" class="form-group">
        <label for="name">Name</label>
        <input type="name" class="form-control" id="name" ng-model="c.data.selected_name">
        <small ng-if="c.data.name_error" id="name-error" class="text-danger">
            {{c.data.name_error}}
        </small>
    </div>
    <div class="modal-footer">
        <button type="button" class="btn btn-default" ng-click="delete()">delete</button>
        <button type="button" class="btn btn-primary" ng-click="update()">update</button>
    </div>
</div>
]]></template>
    </sp_widget>
</record_update>
