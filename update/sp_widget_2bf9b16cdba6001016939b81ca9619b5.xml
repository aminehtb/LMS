<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function($scope, $location, $timeout, $window, $document, $rootScope, spUtil, spAriaUtil) {
    var c = this;
    $scope.category_selected = null;
    $scope.category_nav_title = "All";
    $scope.all_obj = { 'sys_id': null, 'catalog_id': c.data.catalog_id, 'id': 'service_catalog_lms' };
    $scope.selectedCatalog = c.data.catalogSelectorArr[0];
    $scope.changeCatalog = function (selectedCatalog) {
        $timeout(function () {
            if (selectedCatalog && selectedCatalog.hasOwnProperty("value")) {
                $location.search('catalog_id', selectedCatalog.value ? selectedCatalog.value : -1);
                $location.search('sys_id', null);
            }
        });
    }
    $scope.hideCategoryWidgetInXS = (c.options.hide_xs == 'true');
    if (c.data.categoryId) {
        if (!$scope.hideCategoryWidgetInXS)
            $scope.hideCategoryWidgetInXS = true;
    } else {
        if ($scope.hideCategoryWidgetInXS)
            $scope.hideCategoryWidgetInXS = false;
    }

    spUtil.getPreference('glide.ui.accessibility', function (value) {
        if (value == "true")
            $scope.tabindex = 0;
        else
            $scope.tabindex = -1;
    });
    $scope.displayChildren = function ($event, category) {
        $event.stopPropagation();
        category.showChildren = !category.showChildren;
        if (category.showChildren) {
            spAriaUtil.sendLiveMessage(category.title + ' ' + c.data.messages.expanded);
        }
        else {
            spAriaUtil.sendLiveMessage(category.title + ' ' + c.data.messages.collapsed);
        }
    };

    $scope.toggleSubCategories = function (val) {
        toggleSubCategories(c.data.categoriesList, val);
    };

    function toggleSubCategories(categories, val) {
        categories.forEach(function (category) {
            category.showChildren = val;
            if (category.subcategories && category.subcategories.length > 0) {
                toggleSubCategories(category.subcategories, val);
            }
        });
    }

    $scope.loadMore = function () {
        c.data.new_limit = c.data.limit + (c.options.number_of_categories_to_load || 15);
        c.data.more_msg = c.data.pleaseWait;
        c.server.update();
    };
    $scope.getCategoryById = function (cat_sys_id) {
        c.data.categoriesList.forEach(function (item) {
            if (item.sys_id == c.data.categoryId) {
                $scope.category_selected = item;
                $scope.category_nav_title = item.title;
            } else if (item.subcategories.length > 0) {
                item.subcategories.forEach(function (sub_item) {
                    if (sub_item.sys_id == c.data.categoryId) {
                        $scope.category_selected = sub_item;
                        $scope.category_nav_title = sub_item.title;
                    }
                });
            }
        });
    }
    $scope.categorySelected = function (category) {
        if (category.parent)
            $scope.all_obj.sys_id = category.parent;
        $timeout(function () {
            $location.search('sys_id', category.sys_id);
            $location.search('catalog_id', c.data.catalog_id);
            $location.search('id', 'service_catalog_lms');
        });
    };
    $scope.clickBack = function () {
        $timeout(function () {
            $location.search('sys_id', $scope.category_selected.parent ? $scope.category_selected.parent : null);
            $location.search('catalog_id', c.data.catalog_id);
            $location.search('id', 'service_catalog_lms');
        });
    };
    var listenerForBrowseCategories = $scope.$on("$sp.service_catelog.show.categories_widget", function () {
        $scope.hideCategoryWidgetInXS = false;
    });

    $scope.hideBrowseCategory = function () {
        $scope.hideCategoryWidgetInXS = true;
        $rootScope.$broadcast("$sp.service_catelog.show.items_widget");
    }

    $scope.$on("$destroy", function () {
        listenerForBrowseCategories();
    });

    $scope.isTouchDevice = function () {
        return ('ontouchstart' in $window);
    }
    c.data.categoriesList.forEach(function (item) {
        if (item.sys_id == c.data.categoryId) {
            $scope.category_selected = item;
            $scope.category_nav_title = item.title;
        } else if (item.subcategories.length > 0) {
            item.subcategories.forEach(function (sub_item) {
                if (sub_item.sys_id == c.data.categoryId) {
                    $scope.category_selected = sub_item;
                    $scope.category_nav_title = sub_item.title;
                }
            });
        }
    });

    //add course code
    //static cat query for now ( alla formation ctalog ctegories )
    c.data.cat_query = 'sc_catalog=5107e2762f723300a4a2c886f699b6c1';
	$scope.cat = { displayValue: "", value: "", name: 'cat' };
	$scope.$on("field.change", function (evt, parms) {
		if (parms.field.name == 'cat' && parms.field.value !=""){
            $scope.cat = parms.field;
            c.data.course_category_error = null
        }
	});
    $scope.inputChange = function(){
        switch(event.target.id){
            case'type': if(!c.data.type) c.data.type_error = "Course type should be provided" ;else c.data.type_error = null; break;
            case'name': if(!c.data.name) c.data.name_error = "Course name should be provided" ;else c.data.name_error = null; break;
            case'price': if(!c.data.price) c.data.price_error = "Course price should be provided"; else c.data.price_error = null; break;
            case'level': if(!c.data.level) c.data.level_error = "Course level should be provided"; else c.data.level_error = null; break;
            case'duration': if(!c.data.duration) c.data.duration_error = "Course duration should be provided"; else c.data.duration_error = null; break;
        }
    }

    $scope.add = function(){
        if(checkInput()){
            c.data.action = 'add_course';
            c.data.cat = $scope.cat.value;
            c.server.update().then(function(r){
                //sweet alert new course added
                if (r.inserted)
					$('#myModal').modal('hide');
				$("#myModal").on("hidden.bs.modal", function () {
					$('form')[0].reset();
				});

				Swal.fire({
					position: 'top-end',
					icon: 'success',
					title: 'New course has been created',
					showConfirmButton: false,
					timer: 1500
				});
            });
        }
    }
    function checkInput(){
        var check_pass = true;
        if(!c.data.type){
            c.data.type_error = "Course type should be provided";
            check_pass = false;
        }
        if(!c.data.name){
            c.data.name_error = "Course name should be provided";
            check_pass = false;
        }
        if(!$scope.cat.value){
            c.data.course_category_error = "Course category should be provided";
            check_pass = false;
        }
        if(!c.data.price){
            c.data.price_error = "Course price should be provided";
            check_pass = false;
        }
        if(!c.data.level){
            c.data.level_error = "Course level should be provided";
            check_pass = false;
        }
        if(!c.data.duration){
            c.data.duration_error = "Course duration should be provided";
            check_pass = false;
        }

        return check_pass;
    }
}]]></client_script>
        <controller_as>c</controller_as>
        <css>.category-widget {
	border: 1px solid $panel-inner-border;
  
  .category-list {
    .fa {
      margin-right: 5px;
    }
    .l-h-1_6x {
      line-height: 1.6em;
    }
    a {
		width: 100%;
      	vertical-align: middle;
	    display: inline-block;
    }
    .list-group {
      margin-bottom: 0;
    }
    .list-group-item {
      padding: 0;
      border: 0;
    }
    .group-item {
      padding: 10px 15px;
    }
    .group-item-default {
      &amp;:hover, &amp;:focus {
        background-color: darken($panel-default-heading-bg, 2%);
      }
    }
    .group-item-primary {
      &amp;:hover, &amp;:focus {
        border-left: 3px solid $primary !important;
      }
    }
    .group-item-success {
      &amp;:hover {
        background-color: lighten($panel-success-heading-bg, 3%)
      }
    }
    .group-item-info {
      &amp;:hover, &amp;:focus {
        background-color: lighten($panel-info-heading-bg, 3%)
      }
    }
    .group-item-warning {
      &amp;:hover, &amp;:focus {
        background-color: $panel-warning-heading-bg
      }
    }
    .group-item-danger {
      &amp;:hover, &amp;:focus {
        background-color: lighten($panel-danger-heading-bg, 3%)
      }
    }
    
    .list-bg-default {
      background-color: $panel-default-heading-bg;
    }
    .list-bg-primary {
      background-color: lighten($panel-info-heading-bg, 6%);
    }
    .list-bg-success {
      background-color: lighten($panel-success-heading-bg, 6%);
    }
    .list-bg-info {
      background-color: lighten($panel-info-heading-bg, 6%);
    }
    .list-bg-warning {
      background-color: lighten($panel-warning-heading-bg, 3%);
    }
    .list-bg-danger {
      background-color: lighten($panel-danger-heading-bg, 6%);
    }
  }
}
.panel-primary .badge {
  background-color: $primary;
  color: white;
}
.panel-default .badge {
  background-color: $panel-default-text;
  color: white
}
.panel-success .badge {
  background-color:  $panel-success-text;
  color: white;
}
.panel-info .badge {
  background-color: $panel-info-text;
  color: white;
}
.panel-warning .badge {
  background-color: $panel-warning-text;
  color: white;
}
.panel-danger .badge {
  background-color: $panel-danger-text;
  color: white;
}
.category-list .badge {
  text-align: right;
}
.text-active {
   color: $link-color;
   border-left: 3px solid $primary
}
.text-default {
   color: $text-muted;
}

.list-group-item {
	.list-group.sub-category-list {
  	.list-group-item span.category { // we only want nested list group items to have this indent
    	padding-left: 15px;
    }
  }
}

.vertical-menu {
  width: 100%; 
  padding-top:10px
}

.vertical-menu a {
  background-color: #eee; 
  font-family: Quicksand, sans-serif;
  font-size: 1.6rem;
  color: black; 
  display: block; 
  padding: 12px; 
  text-decoration: none; 
}

.vertical-menu a:hover {
  background-color: #ccc;
  i{
    transition:all .3s ease-in-out;
    transform:scale(1.2) translateX(-5px);
    
  }
}

.vertical-menu a.active {
  background-color: #596a68; 
  color: white;
  ont-weight: bold;
}
.vertical-menu a i{
  	font-size: 2.5rem;
    padding: 0.5rem;
  	position: relative;
  	top:4px;
    left:4px;
  	margin-right: 5px;
  	color: white;
}

.hide{
    display: none !important;
}
.show{
    display: block !important;
}


.add{
    position: absolute;
    right: 20px;
    width: 40px;
      height: 40px;
      z-index: 10;
    transform: translateY(-20px);
    border: none;
    outline: none;
    border-radius: 50%;
    background:white;
    color:#596a68;
}
.add:hover{
box-shadow: 0 0 10px #16dec7;
color:#16dec7;
}</css>
        <data_table>sp_instance</data_table>
        <demo_data>{"options" :&#13;
   {&#13;
      "hide_xs" : false&#13;
   }&#13;
}</demo_data>
        <description/>
        <docs/>
        <field_list>color</field_list>
        <has_preview>true</has_preview>
        <id>category_list</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>category_list</name>
        <option_schema>[{"name":"hide_xs","default_value":false,"section":"Behavior","label":"Hide at XS","type":"boolean"},{"name":"omit_badges","section":"Behavior","label":"Omit badges (may impact performance for large items in categories)","type":"boolean"},{"name":"check_can_view","default_value":"true","section":"Behavior","label":"Check canView per item","type":"boolean"},{"hint":"Choose between a flattened and a nested category structure (Nested may impact performance for large items in categories)","name":"category_layout","section":"Presentation","label":"Category Layout","type":"choice","choices":[{"label":"Flat","value":"Flat"},{"label":"Nested","value":"Nested"}]},{"displayValue":"Page","name":"page","section":"Data","label":"page","type":"reference","value":"sp_page","ed":{"reference":"sp_page"}},{"hint":"Number of categories to load on page load","name":"number_of_categories_to_load","section":"Data","default_value":"15","label":"Number of categories to load","type":"integer"}]</option_schema>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function () {

    var catalog_id = $sp.getParameter("catalog_id") ? $sp.getParameter("catalog_id") + "" : "-1";
    var catalogSelectorArr = [];
    data.selectedCatalogIndex = catalog_id == -1 ? 0 : -1;
    var catalogIDs = $sp.getCatalogs().value + "";
    var catalogs = catalogIDs.split(",");
    gs.warn("catalogs" + catalogs);
    var isCatalogAccessibleViaPortal = catalog_id == -1 ? true : false;
    catalogs.forEach(function (catalogSysId) {
        if (catalog_id == catalogSysId) {
            isCatalogAccessibleViaPortal = true;
        }
    });

    var counter = 1;
    catalogs.forEach(function (catalogSysId, index) {
        if (index == 0) {
            gs.warn(catalogSysId);
            var catalog = new sn_sc.Catalog(catalogSysId);
            gs.warn(catalog);
            var catalogObj = { value: catalogSysId, displayValue: catalog.getTitle() };
            if (catalog.canView()) {
                if (catalog_id === catalogSysId) {
                    data.selectedCatalogIndex = counter;
                }
                catalogSelectorArr.push(catalogObj);
                counter++;
            }
        }
    });
    data.catalogSelectorArr = catalogSelectorArr;


    data.catalog_id = catalog_id ? catalog_id : "-1";
    data.showMoreMsg = gs.getMessage("Show More");
    data.pleaseWait = gs.getMessage("Please wait... fetching categories");
    var categoryId = $sp.getParameter('sys_id') == undefined ? "" : $sp.getParameter('sys_id') + "";
    data.categoryId = categoryId;
    var catalogIDs = (data.catalog_id && data.catalog_id !== "-1") ? data.catalog_id : $sp.getCatalogs().value + "";
    var viewType = '';
    var checkCanView = false;
    var nestedLayout = (options.category_layout !== "Flat");
    var dynamicCategory = false;

    var catalogArr = catalogIDs.split(",");
    var catalogs = [];
    catalogArr.forEach(function (catalogSysId) {
        var catalog = new sn_sc.Catalog(catalogSysId);
        if (catalog.canView()) {
            catalogs.push(catalogSysId);
        }
    });

    data.categoryId = categoryId;
    var msg = data.messages = {};
    msg.expanded = gs.getMessage("Expanded");
    msg.collapsed = gs.getMessage("Collapsed");
    msg.catalogTitle = options.catalog_title ? gs.getMessage(options.catalog_title) : gs.getMessage('Catalogs');

    data.largeDataSet = gs.getProperty("glide.sc.largeSet.optimization.enable", "false");
    if (data.largeDataSet == 'true')
        nestedLayout = false;

    if (options.page) {
        var page = new GlideRecord('sp_page');
        if (page.get(options.page))
            data.page = page.id + '';
    }
    checkCanView = (options.check_can_view == 'true');

    if (!isCatalogAccessibleViaPortal) {
        return;
    }
    data.categoriesList = [];
    var categoriesInPage = options.number_of_categories_to_load || 15;
    data.limit = categoriesInPage;

    if (input && input.new_limit)
        data.limit = input.new_limit;
    if (input && input.categoriesList)
        data.categoriesList = input.categoriesList.slice(); //Copy the input array
    gs.warn("categories" + data.categoriesList);
    if (input && input.startWindow) {
        data.endWindow = input.endWindow;
    }
    else {
        data.startWindow = 0;
        data.endWindow = 0;
    }

    while (data.categoriesList.length < data.limit + 1) {
        data.startWindow = data.endWindow;
        data.endWindow = data.endWindow + categoriesInPage;
        var catGr = queryCategory(catalogs, nestedLayout, dynamicCategory, data.startWindow, data.endWindow);

        if (!catGr.hasNext())
            break;
        fetchCategories(catGr, data.categoriesList);
    }

    if (data.categoriesList.length > data.limit)
        data.showMore = true;
    else
        data.showMore = false;

    data.more_msg = gs.getMessage("Showing {0} categories", data.limit);


    function fetchCategories(categoriesGr, categories) {
        while (categoriesGr.next()) {
            var categoryJS = new sn_sc.CatCategory(categoriesGr.getUniqueValue() + '');
            if (!categoryJS.canView())
                continue;

            var categoryDetails = getCategoryDetails(categoryJS, 0);
            categoryDetails.sys_id = categoriesGr.getUniqueValue();
            categories.push(categoryDetails);
        }
    }

    function queryCategory(catalogs, nestedLayout, dynamicCategory, startWindow, endWindow) {
        var categoriesGr = new GlideRecord('sc_category');
        categoriesGr.addQuery("sc_catalog", "5107e2762f723300a4a2c886f699b6c1");
        gs.warn("category title" + categoriesGr.getDisplayValue("title"));
        if (!dynamicCategory)
            categoriesGr.addQuery("sys_class_name", "sc_category");
        categoriesGr.addActiveQuery();
        categoriesGr.orderBy('order');
        categoriesGr.orderBy('title');
        if (nestedLayout)
            categoriesGr.addNullQuery("parent");
        categoriesGr.chooseWindow(startWindow, endWindow);
        categoriesGr.query();
        return categoriesGr;
    }

    function getCategoryDetails(categoryJS, level) {
        var categoryDetails = {};
        var showChildren = false;
        if (!categoryJS) {
            return categoryDetails;
        }
        categoryDetails.parent = categoryJS.getParent();
        //categoryDetails.parent = categoryJS.read({"parent" : ""}, true).parent;
        categoryDetails.title = categoryJS.getTitle();
        categoryDetails.level = level;
        categoryDetails.description = categoryJS.getDescription();
        categoryDetails.full_description = categoryJS.getFullDescription();
        categoryDetails.icon = categoryJS.getIconSRC();
        categoryDetails.header_icon = categoryJS.getHeaderIconSRC();
        categoryDetails.homepage_image = categoryJS.getHomepageImageSRC();
        categoryDetails.sys_id = categoryJS.getID();
        categoryDetails.showChildren = (categoryDetails.sys_id === categoryId);
        categoryDetails.catalog = { "sys_id": categoryJS.getCatalog(), "title": new sn_sc.Catalog(categoryJS.getCatalog()).getTitle() }
        if (catalog_id == -1 && catalogSelectorArr.length > 2)
            categoryDetails.catalog_tooltip = gs.getMessage("[{0}]", categoryDetails.catalog.title);
        else
            categoryDetails.catalog_tooltip = '';

        if (data.largeDataSet != 'true') {
            if (checkCanView)
                categoryDetails.count = categoryDetails.totalCount = categoryJS.getViewableItemsCount(true);
            else
                categoryDetails.count = categoryDetails.totalCount = categoryJS.getItemsCount(true);
        }
        else {
            categoryDetails.count = 1;
        }

        var subCategoryCounts = 0;
        if (nestedLayout) {
            var subcategories = categoryJS.getViewableSubCategories();

            if (subcategories.length == 0) {
                categoryDetails.subcategories = [];
            }
            else {
                categoryDetails.subcategories = [];
                subcategories.forEach(function (subCategory) {
                    var subCategoryJS = new sn_sc.CatCategory(subCategory.sys_id + '');
                    var category = getCategoryDetails(subCategoryJS, level + 1);
                    categoryDetails.totalCount = categoryDetails.totalCount + category.totalCount;
                    categoryDetails.subcategories.push(category);
                    categoryDetails.showChildren = categoryDetails.showChildren || category.showChildren;
                });
            }
        }
        else {
            categoryDetails.totalCount = categoryDetails.count;
        }
        return categoryDetails;
    }
    //add course
    if (input && input.action == "add_course") {
        if(!input.type || !input.name || !input.level ||!input.price || !input.duration || !input.cat){
            data.inserted = false;
        }else{
            var table_name = "";
            switch(input.type){
                case 'short': table_name = 'x_315700_lms_short_term_course'; break;
                case 'long' : table_name = 'x_315700_lms_long_term_course'; break;
                case 'async' : table_name = 'x_315700_lms_synchronous_course'; break;
            }
            var gr = new GlideRecord(table_name);
            gr.initialize();
            gr.name = input.name;
            gr.category = input.cat;
            gr.duration = input.duration;
            gr.level = input.level;
            gr.price = input.price;
            var id = gr.insert();
            if(id)
                data.inserted = true;
        }
    }
})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2020-01-21 15:45:22</sys_created_on>
        <sys_id>2bf9b16cdba6001016939b81ca9619b5</sys_id>
        <sys_mod_count>85</sys_mod_count>
        <sys_name>category_list</sys_name>
        <sys_package display_value="LMS" source="x_315700_lms">03ba89b6db003300c1e8f53a299619df</sys_package>
        <sys_policy/>
        <sys_scope display_value="LMS">03ba89b6db003300c1e8f53a299619df</sys_scope>
        <sys_update_name>sp_widget_2bf9b16cdba6001016939b81ca9619b5</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2020-07-17 21:40:10</sys_updated_on>
        <template><![CDATA[<link href="https://fonts.googleapis.com/css?family=Quicksand:400,700" rel='stylesheet'>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@9"></script>
<div class="vertical-menu">
    <a href="javascript:void(0)" class="active" ng-click="clickBack()"><i
            class="fa fa-chevron-left"></i>{{category_nav_title}}</a>
    <button class="add" data-toggle="modal" data-target="#myModal">
        <i class="fa fa-plus fa-lg"></i>
    </button>
    <div ng-class="{true: 'show', false: 'hide'}[category_nav_title=='All']">
        <div ng-repeat="category in data.categoriesList | limitTo: data.limit track by category.sys_id">
            <a href="javascript:void(0)" ng-click="categorySelected(category)">{{category.title}}</a>

        </div>
    </div>

    <div ng-if="category_selected!=null && category_selected.subcategories.length > 0">

        <a ng-repeat="sub_category in category_selected.subcategories " href="javascript:void(0)"
            ng-click="categorySelected(sub_category)">{{sub_category.title}}</a>
    </div>
</div>

<div id="myModal" class="modal fade" role="dialog">
    <div class="modal-dialog  modal-lg">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Add</h4>
            </div>
            <div class="modal-body">
                <form>
                    <div class="row">
                        <div class="col-md-6">
                            <div ng-class="{true:'has-error',false:''}[c.data.type_error && c.data.type_error !='']"
                                class="form-group">
                                <label for="type">Type</label>
                                <select class="form-control" id="type" ng-model="c.data.type" ng-change="inputChange()">
                                    <option value="" disabled selected>Select your type</option>
                                    <option value="short">Short term course</option>
                                    <option value="long">Long term course</option>
                                    <option value="async">Asynchronous course</option>
                                </select>
                                <small ng-if="c.data.type_error" class="text-danger">
                                    {{c.data.type_error}}
                                </small>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div ng-class="{true:'has-error',false:''}[c.data.name_error && c.data.name_error !='']"
                                class="form-group">
                                <label for="name">Name</label>
                                <input type="name" class="form-control" id="name" ng-model="c.data.name"
                                    aria-describedby="name-error" ng-change="inputChange()">
                                <small ng-if="c.data.name_error" id="name-error" class="text-danger">
                                    {{c.data.name_error}}
                                </small>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div ng-class="{true:'has-error',false:''}[c.data.course_category_error && c.data.course_category_error !='']"
                                class="form-group">
                                <label for="course_category">Category</label>
                                <sn-record-picker field="cat" table="'sc_category'" display-field="'name'"
                                    value-field="'sys_id'" search-fields="'name'" default-query="c.data.cat_query"
                                    page-size="100" on-change="catChange()"></sn-record-picker>
                                <small ng-if="c.data.course_category_error" class="text-danger">
                                    {{c.data.course_category_error}}
                                </small>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div ng-class="{true:'has-error',false:''}[c.data.price_error && c.data.price_error !='']"
                                class="form-group">
                                <label for="price">Price</label>
                                <input type="name" class="form-control" id="price" ng-model="c.data.price"
                                    aria-describedby="price-error" ng-change="inputChange()">
                                <small ng-if="c.data.price_error" id="price-error" class="text-danger">
                                    {{c.data.price_error}}
                                </small>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div ng-class="{true:'has-error',false:''}[c.data.level_error && c.data.level_error !='']"
                                class="form-group">
                                <label for="level">Level</label>
                                <select class="form-control" id="level" ng-model="c.data.level"
                                    ng-change="inputChange()">
                                    <option value="" disabled selected>Select the level</option>
                                    <option value="0">Beginner</option>
                                    <option value="1">Intermediate</option>
                                    <option value="2">Advanced</option>
                                </select>
                                <small ng-if="c.data.level_error" class="text-danger">
                                    {{c.data.level_error}}
                                </small>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div ng-class="{true:'has-error',false:''}[c.data.duration_error && c.data.duration_error !='']"
                                class="form-group">
                                <label for="duration">Duration</label>
                                <input type="name" class="form-control" id="duration" ng-model="c.data.duration"
                                    aria-describedby="duration-error" ng-change="inputChange()">
                                <small ng-if="c.data.duration_error" id="duration-error" class="text-danger">
                                    {{c.data.duration_error}}
                                </small>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" ng-click="add()">Save</button>
            </div>
        </div>

    </div>
</div>]]></template>
    </sp_widget>
</record_update>
