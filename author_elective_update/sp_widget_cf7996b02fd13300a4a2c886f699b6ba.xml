<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="DELETE">
        <category>custom</category>
        <client_script><![CDATA[function(spModal) {

 var c = this;


    c.data.knowledgeurl = "https://" + c.data.instancename + ".service-now.com/sp?id=form&table=kb_knowledge";
    c.data.sectionurl = "https://" + c.data.instancename + ".service-now.com/sp?id=form&table=x_315700_lms_section";
    c.data.activityurl = "https://" + c.data.instancename + ".service-now.com/sp?id=form&table=x_315700_lms_activitycmp";
  








/**
 * 
 * copyright 2016 creativeprogramming.it di Stefano Gargiulo
 * email: info@creativeprogramming.it
 * accepting tips at https://www.paypal.me/creativedotit 
 * license: MIT
 * 
 */
(function (factory) {
    /* global define */
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define(['jquery'], factory);
    } else if (typeof module === 'object' && module.exports) {
        // Node/CommonJS
        module.exports = factory(require('jquery'));
    } else {
        // Browser globals
        factory(window.jQuery);
    }
}(function ($) {

    // Extends plugins for adding hello.
    //  - plugin is external module for customizing.
    $.extend($.summernote.plugins, {
        /**
         * @param {Object} context - context object has status of editor.
         */
        'addclass': function (context) {
            var self = this;
            if (typeof context.options.addclass === 'undefined') {
                context.options.addclass = {};
            }
            if (typeof context.options.addclass.classTags === 'undefined') {
                context.options.addclass.classTags = ["jumbotron", "lead","img-rounded","img-circle", "img-responsive","btn", "btn btn-success","btn btn-danger","text-muted", "text-primary", "text-warning", "text-danger", "text-success", "table-bordered", "table-responsive", "alert", "alert alert-success", "alert alert-info", "alert alert-warning", "alert alert-danger", "visible-sm", "hidden-xs", "hidden-md", "hidden-lg", "hidden-print"];
                //  console.log("Please define your summernote.options.addclass.classTags array");
            }
            // ui has renders to build ui elements.
            //  - you can create a button with `ui.button`
            var ui = $.summernote.ui;

            addStyleString(".scrollable-menu {height: auto; max-height: 200px; max-width:300px; overflow-x: hidden;}");

            context.memo('button.addclass', function () {
                return ui.buttonGroup([
                    ui.button({
                        className: 'dropdown-toggle',
                        contents: '<i class="fa fa-css3"\/>' + ' ' + ui.icon(context.options.icons.caret, 'span'),
                        //ui.icon(context.options.icons.magic) + ' ' + ui.icon(context.options.icons.caret, 'span'),
                        tooltip: 'toggle CSS class', //lang.style.style,
                        data: {
                            toggle: 'dropdown'
                        }
                    }),
                    ui.dropdown({
                        className: 'dropdown-style scrollable-menu',
                        items: context.options.addclass.classTags,
                        template: function (item) {

                            if (typeof item === 'string') {
                                item = {tag: "div", title: item, value: item};
                            }

                            var tag = item.tag;
                            var title = item.title;
                            var style = item.style ? ' style="' + item.style + '" ' : '';
                            var cssclass = item.value ? ' class="' + item.value + '" ' : '';
                   

                            return '<' + tag + ' ' + style + cssclass + '>' + title + '</' + tag + '>';
                        },
                        click: function (event, namespace, value) {

                            event.preventDefault();
                            value = value || $(event.target).closest('[data-value]').data('value');



                            var $node = $(context.invoke("restoreTarget"))
                            if ($node.length==0){
                                $node = $(document.getSelection().focusNode.parentElement, ".note-editable");
                            }
                            
                            if (typeof context.options.addclass !== 'undefined' && typeof context.options.addclass.debug !== 'undefined' && context.options.addclass.debug) {
                                console.debug(context.invoke("restoreTarget"), $node, "toggling class: " + value, window.getSelection());
                            }


                            $node.toggleClass(value)


                        }
                    })
                ]).render();
                return $optionList;
            });

            function addStyleString(str) {
                var node = document.createElement('style');
                node.innerHTML = str;
                document.body.appendChild(node);
            }

            // This events will be attached when editor is initialized.
            this.events = {
                // This will be called after modules are initialized.
                'summernote.init': function (we, e) {
                    //console.log('summernote initialized', we, e);
                },
                // This will be called when user releases a key on editable.
                'summernote.keyup': function (we, e) {
                    //  console.log('summernote keyup', we, e);
                }
            };

            // This method will be called when editor is initialized by $('..').summernote();
            // You can create elements for plugin
            this.initialize = function () {

            };

            // This methods will be called when editor is destroyed by $('..').summernote('destroy');
            // You should remove elements on `initialize`.
            this.destroy = function () {
                /*  this.$panel.remove();
                 this.$panel = null; */
            };
        }
    });
}));




    var KnowledgeButton = function (context) {
        var ui = $.summernote.ui;
        var shared = {};
        var button = ui.button({
            contents: '<img width="20" height="20" src="kbarticle.svg"> ',
            tooltip: 'Add Kb Article',
            click: function () {
             spModal.open({
                    title:'Knowledge Articles List',
                    size:'lg',
                    widget:'kbknowledgelist',
                    //widgetInput:{table:'kb_knowledge',display_field:'short_description',maximum_entries:'10'}
							      shared: shared
							 
                }).then(function(){
							 c.data.selectedValue = shared.selection;
							 var node = document.createElement('div');
                    node.innerHTML = ' ' + c.data.selectedValue.text +'</div>' ;
                    context.invoke('editor.insertNode', node);
							 
				 
                });
								
    }
        });

        return button.render();    // return button as jquery object
    }
	


		
		


 var ActivityButton = function (context) {
        var ui = $.summernote.ui;
        var shared={};
        // create button
        var button = ui.button({
            contents: '<img width="20" height="20" src="note.svg">',
            tooltip: 'Add new Activity',
            click: function () {
                 spModal.open({
                    title:'Add new Activity',
                    size:'lg',
                    widget:'Activity',
									  shared: shared
                }).then(function(){
								c.data.selectedValue = shared.selection;
							/*	var s = c.widget.options.shared;
	              var id = c.data.value;	
		            return angular.isDefined(id) ? (s.value = id) : s.value;
		
	*/
							 //$rootScope.$emit("value",c.value);
							 var node = document.createElement('div');
									  node.classname="container";
                    node.innerHTML = '<button type="button" class="btn btn-info" data-toggle="collapse" data-target="#demo"> ' + c.data.selectedValue.title +'</button> <div id="demo" class="collapse"> '+ c.data.selectedValue.description + '</div></div> ' ;
                    context.invoke('editor.insertNode', node);
               	  
                    console.log('..... closed ......');
                });
            }
        });
 
      return button.render();    // return button as jquery object
    }

 


     var sectionButton = function (context) {
        var ui = $.summernote.ui;
        var shared={};
        var button = ui.button({
            contents: '<img width="20" height="20" src="flag.svg"></a>',
            tooltip: 'Add new section',
            click: function () {
             spModal.open({
                    title:'Sections List',
                    size:'lg',
                    widget:'sectionlist',
				            shared: shared
							 
                }).then(function(){
							 c.data.selectedValue = shared.selection;
							 
							 var node = document.createElement('div');
							      node.classname="section";
                    node.innerHTML = '<div class="title"> <h2> Section 1   ' + c.data.selectedValue.name +' </h2></div></div>' ;
                    context.invoke('editor.insertNode', node);
                });
								
    }
        });

        return button.render();    // return button as jquery object
    }

 var scormButton = function (context) {
        var ui = $.summernote.ui;
        var shared={};
        var button = ui.button({
            contents: '<img width="20" height="20" src="package.svg"></a>',
            tooltip: 'Add Scorm Package',
            click: function () {
             spModal.open({
                    title:'Add Scorm Package',
                    size:'lg',
							      widget:'scormattachment'
							 
                }).then(function(){
							
                });
								
    }
        });

        return button.render();    // return button as jquery object
    }
 var unitButton = function (context) {
        var ui = $.summernote.ui;
        var shared={};
        var button = ui.button({
            contents: '<img width="20" height="20" src="unit_pic.svg"></a>',
            tooltip: 'Add Unit',
            click: function () {
             spModal.open({
                    title:'Add Unit',
                    size:'lg',
							      widget:'scormattachment'
							 
                }).then(function(){
							  /*	var s = c.widget.options.shared;
	              var id = c.data.value;	
		            return angular.isDefined(id) ? (s.value = id) : s.value;
		
	*/
							 //$rootScope.$emit("value",c.value);
							
                });
								
    }
        });

        return button.render();    // return button as jquery object
    }
		 		 
		 
		 
		 
  


	/*$(function() {      
    setInterval(function(){
        localStorage.setItem("summernotedata", $("#summernote").summernote("code"));
    }, 5000); 
});
*/
    $(function() {
        $('#summernote').summernote({
            addclass: {
                debug: false,
                classTags: [{ title: "Button", "value": "btn btn-success" }, "jumbotron", "lead", "img-rounded", "img-circle", "img-responsive", "btn", "btn btn-success", "btn btn-danger", "text-muted", "text-primary", "text-warning", "text-danger", "text-success", "table-bordered", "table-responsive", "alert", "alert alert-success", "alert alert-info", "alert alert-warning", "alert alert-danger", "visible-sm", "hidden-xs", "hidden-md", "hidden-lg", "hidden-print"]
            },
					  callbacks: {
            onInit: function() {
            $("#summernote").summernote("code", localStorage.getItem("summernotedata"));
            }},
            height: 300,
            toolbar: [
               
                ['img', ['picture']],
                ['style', ['style', 'addclass', 'clear']],
                ['fontstyle', ['bold', 'italic', 'ul', 'ol', 'link', 'paragraph']],
                ['fontstyleextra', ['strikethrough', 'underline', 'hr', 'color', 'superscript', 'subscript']],
                ['extra', ['video', 'table', 'height']],
                ['misc', ['undo', 'redo', 'codeview', 'help']],
                ['mybutton', ['knowledge']],
                ['mybutton1', ['activity']],
                ['mybutton2', ['section']],
                ['mybutton3', ['list']],
							  ['mybutton4',['scorm']],
							  ['mybutton5',['unit']]
							



            ],
					
            buttons: {
							section: sectionButton,
                knowledge: KnowledgeButton,
                activity: ActivityButton,
                
							  scorm: scormButton,
							  unit: unitButton
               
            }
        });
    });
}]]></client_script>
        <controller_as>c</controller_as>
        <css>

.nbs-flexisel-nav-left, .nbs-flexisel-nav-right {
    width: 20px;
    height:25px;
    position: absolute;
    cursor: pointer;
    z-index: 100;
    margin-top:2em;
}
.nbs-flexisel-nav-left {
    right: 0;
    background: none;
}
.nbs-flexisel-nav-right {
 left: 0;
  background: none;
}
li.nbs-flexisel-item {
 width:370px;
}
.biseller-column  p {
    font-size: 1em;
    color: #fff;
    margin: 0;
    text-align:center;
}
.panel-title &gt; a, .panel-title &gt; small, .panel-title &gt; .small, .panel-title &gt; small &gt; a, .panel-title &gt; .small &gt; a {
    color:#000;
    text-decoration: none;
}
.panel-title {
    font-size: 1.1em;
}
.panel-default &gt; .panel-heading {
    background: none;
    border: none;
	cursor: pointer;
}
.panel-default {
    border: none;
}
.panel-group .panel-heading + .panel-collapse &gt; .panel-body, .panel-group .panel-heading + .panel-collapse &gt; .list-group {
    border: none;
}
.asd {
    padding: 1em 0;
	text-transform:capitalize;
}
.panel_text {
    font-size: 14px;
    color: black;
    line-height: 1.8em;
}
.panel{
	box-shadow:none;
}
.pa_italic span{
	display:none;
}
.pa_italic i{
	left: -1em;
}
.collapsed span{
	display: inline-block;
    left: -1em;
}
.collapsed i{
	display:none;
}
.panel_text {
    background:#fff;
.img-fluid. max-width: 100%;
  height:auto;
}
p{font-size: 1.3rem;
  line-height: 1.625rem;
 font-family: Verdana, Geneva, sans-serif;
  
}
.responsive {
  max-width: 90%;
  height: auto;
  margin-left: auto;
  margin-right: auto;
  display: block;
}
.youtube-player{
   margin-left: auto;
    margin-right: auto;
    margin-bottom: 6px;
    display: block;
}
h2 { text-align: center }



</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id>summernotetest</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>summernotetest</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
  /* populate the 'data' object */
  /* e.g., data.table = $sp.getValue('table'); */


	 data.instancename = gs.getProperty('instance_name');
	 data.knowledge=[];
	 var knowledge=new GlideRecord("kb_knowledge");
	knowledge.query();
	while (knowledge.next()) {
    knowledgeobj = {};
    $sp.getRecordDisplayValues(knowledgeobj,knowledge,'short_description,sys_id');	

		data.knowledge.push(knowledgeobj);
	}
})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2019-05-06 13:11:49</sys_created_on>
        <sys_id>cf7996b02fd13300a4a2c886f699b6ba</sys_id>
        <sys_mod_count>285</sys_mod_count>
        <sys_name>summernotetest</sys_name>
        <sys_package display_value="LMS" source="x_315700_lms">03ba89b6db003300c1e8f53a299619df</sys_package>
        <sys_policy/>
        <sys_scope display_value="LMS">03ba89b6db003300c1e8f53a299619df</sys_scope>
        <sys_update_name>sp_widget_cf7996b02fd13300a4a2c886f699b6ba</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2019-05-31 11:35:47</sys_updated_on>
        <template><![CDATA[<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.0/css/bootstrap.min.css">
<meta name="viewport" content="width=device-width, initial-scale=1">
 <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.0/jquery.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.0/js/bootstrap.min.js"></script>
<link href="https://netdna.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.css" rel="stylesheet">
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.js"></script> 
<script src="https://netdna.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.js"></script> 
<link href="https://cdnjs.cloudflare.com/ajax/libs/summernote/0.8.11/summernote.css" rel="stylesheet">


<div id="summernote"> 
  
</div>

 
   
  

  


]]></template>
    </sp_widget>
<sys_update_version action="INSERT_OR_UPDATE">
        <action>DELETE</action>
        <application display_value="LMS">03ba89b6db003300c1e8f53a299619df</application>
        <file_path/>
        <instance_id>ce1e2e54db7ec0544d2bac44d49619c4</instance_id>
        <instance_name>dev98968</instance_name>
        <name>sp_widget_cf7996b02fd13300a4a2c886f699b6ba</name>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sp_widget"&gt;
    &lt;sp_widget action="INSERT_OR_UPDATE"&gt;
        &lt;category&gt;custom&lt;/category&gt;
        &lt;client_script&gt;&lt;![CDATA[function(spModal) {

 var c = this;


    c.data.knowledgeurl = "https://" + c.data.instancename + ".service-now.com/sp?id=form&amp;table=kb_knowledge";
    c.data.sectionurl = "https://" + c.data.instancename + ".service-now.com/sp?id=form&amp;table=x_315700_lms_section";
    c.data.activityurl = "https://" + c.data.instancename + ".service-now.com/sp?id=form&amp;table=x_315700_lms_activitycmp";
  








/**
 * 
 * copyright 2016 creativeprogramming.it di Stefano Gargiulo
 * email: info@creativeprogramming.it
 * accepting tips at https://www.paypal.me/creativedotit 
 * license: MIT
 * 
 */
(function (factory) {
    /* global define */
    if (typeof define === 'function' &amp;&amp; define.amd) {
        // AMD. Register as an anonymous module.
        define(['jquery'], factory);
    } else if (typeof module === 'object' &amp;&amp; module.exports) {
        // Node/CommonJS
        module.exports = factory(require('jquery'));
    } else {
        // Browser globals
        factory(window.jQuery);
    }
}(function ($) {

    // Extends plugins for adding hello.
    //  - plugin is external module for customizing.
    $.extend($.summernote.plugins, {
        /**
         * @param {Object} context - context object has status of editor.
         */
        'addclass': function (context) {
            var self = this;
            if (typeof context.options.addclass === 'undefined') {
                context.options.addclass = {};
            }
            if (typeof context.options.addclass.classTags === 'undefined') {
                context.options.addclass.classTags = ["jumbotron", "lead","img-rounded","img-circle", "img-responsive","btn", "btn btn-success","btn btn-danger","text-muted", "text-primary", "text-warning", "text-danger", "text-success", "table-bordered", "table-responsive", "alert", "alert alert-success", "alert alert-info", "alert alert-warning", "alert alert-danger", "visible-sm", "hidden-xs", "hidden-md", "hidden-lg", "hidden-print"];
                //  console.log("Please define your summernote.options.addclass.classTags array");
            }
            // ui has renders to build ui elements.
            //  - you can create a button with `ui.button`
            var ui = $.summernote.ui;

            addStyleString(".scrollable-menu {height: auto; max-height: 200px; max-width:300px; overflow-x: hidden;}");

            context.memo('button.addclass', function () {
                return ui.buttonGroup([
                    ui.button({
                        className: 'dropdown-toggle',
                        contents: '&lt;i class="fa fa-css3"\/&gt;' + ' ' + ui.icon(context.options.icons.caret, 'span'),
                        //ui.icon(context.options.icons.magic) + ' ' + ui.icon(context.options.icons.caret, 'span'),
                        tooltip: 'toggle CSS class', //lang.style.style,
                        data: {
                            toggle: 'dropdown'
                        }
                    }),
                    ui.dropdown({
                        className: 'dropdown-style scrollable-menu',
                        items: context.options.addclass.classTags,
                        template: function (item) {

                            if (typeof item === 'string') {
                                item = {tag: "div", title: item, value: item};
                            }

                            var tag = item.tag;
                            var title = item.title;
                            var style = item.style ? ' style="' + item.style + '" ' : '';
                            var cssclass = item.value ? ' class="' + item.value + '" ' : '';
                   

                            return '&lt;' + tag + ' ' + style + cssclass + '&gt;' + title + '&lt;/' + tag + '&gt;';
                        },
                        click: function (event, namespace, value) {

                            event.preventDefault();
                            value = value || $(event.target).closest('[data-value]').data('value');



                            var $node = $(context.invoke("restoreTarget"))
                            if ($node.length==0){
                                $node = $(document.getSelection().focusNode.parentElement, ".note-editable");
                            }
                            
                            if (typeof context.options.addclass !== 'undefined' &amp;&amp; typeof context.options.addclass.debug !== 'undefined' &amp;&amp; context.options.addclass.debug) {
                                console.debug(context.invoke("restoreTarget"), $node, "toggling class: " + value, window.getSelection());
                            }


                            $node.toggleClass(value)


                        }
                    })
                ]).render();
                return $optionList;
            });

            function addStyleString(str) {
                var node = document.createElement('style');
                node.innerHTML = str;
                document.body.appendChild(node);
            }

            // This events will be attached when editor is initialized.
            this.events = {
                // This will be called after modules are initialized.
                'summernote.init': function (we, e) {
                    //console.log('summernote initialized', we, e);
                },
                // This will be called when user releases a key on editable.
                'summernote.keyup': function (we, e) {
                    //  console.log('summernote keyup', we, e);
                }
            };

            // This method will be called when editor is initialized by $('..').summernote();
            // You can create elements for plugin
            this.initialize = function () {

            };

            // This methods will be called when editor is destroyed by $('..').summernote('destroy');
            // You should remove elements on `initialize`.
            this.destroy = function () {
                /*  this.$panel.remove();
                 this.$panel = null; */
            };
        }
    });
}));




    var KnowledgeButton = function (context) {
        var ui = $.summernote.ui;
        var shared = {};
        var button = ui.button({
            contents: '&lt;img width="20" height="20" src="kbarticle.svg"&gt; ',
            tooltip: 'Add Kb Article',
            click: function () {
             spModal.open({
                    title:'Knowledge Articles List',
                    size:'lg',
                    widget:'kbknowledgelist',
                    //widgetInput:{table:'kb_knowledge',display_field:'short_description',maximum_entries:'10'}
							      shared: shared
							 
                }).then(function(){
							 c.data.selectedValue = shared.selection;
							 var node = document.createElement('div');
                    node.innerHTML = ' ' + c.data.selectedValue.text +'&lt;/div&gt;' ;
                    context.invoke('editor.insertNode', node);
							 
				 
                });
								
    }
        });

        return button.render();    // return button as jquery object
    }
	


		
		


 var ActivityButton = function (context) {
        var ui = $.summernote.ui;
        var shared={};
        // create button
        var button = ui.button({
            contents: '&lt;img width="20" height="20" src="note.svg"&gt;',
            tooltip: 'Add new Activity',
            click: function () {
                 spModal.open({
                    title:'Add new Activity',
                    size:'lg',
                    widget:'Activity',
									  shared: shared
                }).then(function(){
								c.data.selectedValue = shared.selection;
							/*	var s = c.widget.options.shared;
	              var id = c.data.value;	
		            return angular.isDefined(id) ? (s.value = id) : s.value;
		
	*/
							 //$rootScope.$emit("value",c.value);
							 var node = document.createElement('div');
									  node.classname="container";
                    node.innerHTML = '&lt;button type="button" class="btn btn-info" data-toggle="collapse" data-target="#demo"&gt; ' + c.data.selectedValue.title +'&lt;/button&gt; &lt;div id="demo" class="collapse"&gt; '+ c.data.selectedValue.description + '&lt;/div&gt;&lt;/div&gt; ' ;
                    context.invoke('editor.insertNode', node);
               	  
                    console.log('..... closed ......');
                });
            }
        });
 
      return button.render();    // return button as jquery object
    }

 


     var sectionButton = function (context) {
        var ui = $.summernote.ui;
        var shared={};
        var button = ui.button({
            contents: '&lt;img width="20" height="20" src="flag.svg"&gt;&lt;/a&gt;',
            tooltip: 'Add new section',
            click: function () {
             spModal.open({
                    title:'Sections List',
                    size:'lg',
                    widget:'sectionlist',
				            shared: shared
							 
                }).then(function(){
							 c.data.selectedValue = shared.selection;
							 
							 var node = document.createElement('div');
							      node.classname="section";
                    node.innerHTML = '&lt;div class="title"&gt; &lt;h2&gt; Section 1   ' + c.data.selectedValue.name +' &lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;' ;
                    context.invoke('editor.insertNode', node);
                });
								
    }
        });

        return button.render();    // return button as jquery object
    }

 var scormButton = function (context) {
        var ui = $.summernote.ui;
        var shared={};
        var button = ui.button({
            contents: '&lt;img width="20" height="20" src="package.svg"&gt;&lt;/a&gt;',
            tooltip: 'Add Scorm Package',
            click: function () {
             spModal.open({
                    title:'Add Scorm Package',
                    size:'lg',
							      widget:'scormattachment'
							 
                }).then(function(){
							
                });
								
    }
        });

        return button.render();    // return button as jquery object
    }
 var unitButton = function (context) {
        var ui = $.summernote.ui;
        var shared={};
        var button = ui.button({
            contents: '&lt;img width="20" height="20" src="unit_pic.svg"&gt;&lt;/a&gt;',
            tooltip: 'Add Unit',
            click: function () {
             spModal.open({
                    title:'Add Unit',
                    size:'lg',
							      widget:'scormattachment'
							 
                }).then(function(){
							  /*	var s = c.widget.options.shared;
	              var id = c.data.value;	
		            return angular.isDefined(id) ? (s.value = id) : s.value;
		
	*/
							 //$rootScope.$emit("value",c.value);
							
                });
								
    }
        });

        return button.render();    // return button as jquery object
    }
		 		 
		 
		 
		 
  


	/*$(function() {      
    setInterval(function(){
        localStorage.setItem("summernotedata", $("#summernote").summernote("code"));
    }, 5000); 
});
*/
    $(function() {
        $('#summernote').summernote({
            addclass: {
                debug: false,
                classTags: [{ title: "Button", "value": "btn btn-success" }, "jumbotron", "lead", "img-rounded", "img-circle", "img-responsive", "btn", "btn btn-success", "btn btn-danger", "text-muted", "text-primary", "text-warning", "text-danger", "text-success", "table-bordered", "table-responsive", "alert", "alert alert-success", "alert alert-info", "alert alert-warning", "alert alert-danger", "visible-sm", "hidden-xs", "hidden-md", "hidden-lg", "hidden-print"]
            },
					  callbacks: {
            onInit: function() {
            $("#summernote").summernote("code", localStorage.getItem("summernotedata"));
            }},
            height: 300,
            toolbar: [
               
                ['img', ['picture']],
                ['style', ['style', 'addclass', 'clear']],
                ['fontstyle', ['bold', 'italic', 'ul', 'ol', 'link', 'paragraph']],
                ['fontstyleextra', ['strikethrough', 'underline', 'hr', 'color', 'superscript', 'subscript']],
                ['extra', ['video', 'table', 'height']],
                ['misc', ['undo', 'redo', 'codeview', 'help']],
                ['mybutton', ['knowledge']],
                ['mybutton1', ['activity']],
                ['mybutton2', ['section']],
                ['mybutton3', ['list']],
							  ['mybutton4',['scorm']],
							  ['mybutton5',['unit']]
							



            ],
					
            buttons: {
							section: sectionButton,
                knowledge: KnowledgeButton,
                activity: ActivityButton,
                
							  scorm: scormButton,
							  unit: unitButton
               
            }
        });
    });
}]]&gt;&lt;/client_script&gt;
        &lt;controller_as&gt;c&lt;/controller_as&gt;
        &lt;css&gt;

.nbs-flexisel-nav-left, .nbs-flexisel-nav-right {
    width: 20px;
    height:25px;
    position: absolute;
    cursor: pointer;
    z-index: 100;
    margin-top:2em;
}
.nbs-flexisel-nav-left {
    right: 0;
    background: none;
}
.nbs-flexisel-nav-right {
 left: 0;
  background: none;
}
li.nbs-flexisel-item {
 width:370px;
}
.biseller-column  p {
    font-size: 1em;
    color: #fff;
    margin: 0;
    text-align:center;
}
.panel-title &amp;gt; a, .panel-title &amp;gt; small, .panel-title &amp;gt; .small, .panel-title &amp;gt; small &amp;gt; a, .panel-title &amp;gt; .small &amp;gt; a {
    color:#000;
    text-decoration: none;
}
.panel-title {
    font-size: 1.1em;
}
.panel-default &amp;gt; .panel-heading {
    background: none;
    border: none;
	cursor: pointer;
}
.panel-default {
    border: none;
}
.panel-group .panel-heading + .panel-collapse &amp;gt; .panel-body, .panel-group .panel-heading + .panel-collapse &amp;gt; .list-group {
    border: none;
}
.asd {
    padding: 1em 0;
	text-transform:capitalize;
}
.panel_text {
    font-size: 14px;
    color: black;
    line-height: 1.8em;
}
.panel{
	box-shadow:none;
}
.pa_italic span{
	display:none;
}
.pa_italic i{
	left: -1em;
}
.collapsed span{
	display: inline-block;
    left: -1em;
}
.collapsed i{
	display:none;
}
.panel_text {
    background:#fff;
.img-fluid. max-width: 100%;
  height:auto;
}
p{font-size: 1.3rem;
  line-height: 1.625rem;
 font-family: Verdana, Geneva, sans-serif;
  
}
.responsive {
  max-width: 90%;
  height: auto;
  margin-left: auto;
  margin-right: auto;
  display: block;
}
.youtube-player{
   margin-left: auto;
    margin-right: auto;
    margin-bottom: 6px;
    display: block;
}
h2 { text-align: center }



&lt;/css&gt;
        &lt;data_table&gt;sp_instance&lt;/data_table&gt;
        &lt;demo_data/&gt;
        &lt;description/&gt;
        &lt;docs/&gt;
        &lt;field_list/&gt;
        &lt;has_preview&gt;false&lt;/has_preview&gt;
        &lt;id&gt;summernotetest&lt;/id&gt;
        &lt;internal&gt;false&lt;/internal&gt;
        &lt;link&gt;&lt;![CDATA[function link(scope, element, attrs, controller) {  }]]&gt;&lt;/link&gt;
        &lt;name&gt;summernotetest&lt;/name&gt;
        &lt;option_schema/&gt;
        &lt;public&gt;false&lt;/public&gt;
        &lt;roles/&gt;
        &lt;script&gt;&lt;![CDATA[(function() {
  /* populate the 'data' object */
  /* e.g., data.table = $sp.getValue('table'); */


	 data.instancename = gs.getProperty('instance_name');
	 data.knowledge=[];
	 var knowledge=new GlideRecord("kb_knowledge");
	knowledge.query();
	while (knowledge.next()) {
    knowledgeobj = {};
    $sp.getRecordDisplayValues(knowledgeobj,knowledge,'short_description,sys_id');	

		data.knowledge.push(knowledgeobj);
	}
})();]]&gt;&lt;/script&gt;
        &lt;servicenow&gt;false&lt;/servicenow&gt;
        &lt;sys_class_name&gt;sp_widget&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2019-05-06 13:11:49&lt;/sys_created_on&gt;
        &lt;sys_id&gt;cf7996b02fd13300a4a2c886f699b6ba&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;285&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;summernotetest&lt;/sys_name&gt;
        &lt;sys_package display_value="LMS" source="x_315700_lms"&gt;03ba89b6db003300c1e8f53a299619df&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="LMS"&gt;03ba89b6db003300c1e8f53a299619df&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sp_widget_cf7996b02fd13300a4a2c886f699b6ba&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2019-05-31 11:35:47&lt;/sys_updated_on&gt;
        &lt;template&gt;&lt;![CDATA[&lt;link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.0/css/bootstrap.min.css"&gt;
&lt;meta name="viewport" content="width=device-width, initial-scale=1"&gt;
 &lt;script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.0/jquery.min.js"&gt;&lt;/script&gt;
  &lt;script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.0/js/bootstrap.min.js"&gt;&lt;/script&gt;
&lt;link href="https://netdna.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.css" rel="stylesheet"&gt;
&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.js"&gt;&lt;/script&gt; 
&lt;script src="https://netdna.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.js"&gt;&lt;/script&gt; 
&lt;link href="https://cdnjs.cloudflare.com/ajax/libs/summernote/0.8.11/summernote.css" rel="stylesheet"&gt;


&lt;div id="summernote"&gt; 
  
&lt;/div&gt;

 
   
  

  


]]&gt;&lt;/template&gt;
    &lt;/sp_widget&gt;
&lt;/record_update&gt;</payload>
        <payload_hash>-572371564</payload_hash>
        <record_name>summernotetest</record_name>
        <reverted_from/>
        <source>52acf146078d1010288ff16c7c1ed025</source>
        <source_table>sys_upgrade_history</source_table>
        <state>previous</state>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2020-05-29 14:25:57</sys_created_on>
        <sys_id>b1ec7586078d1010288ff16c7c1ed0ab</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_recorded_at>17260d3438d0000001</sys_recorded_at>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2020-05-29 14:25:57</sys_updated_on>
        <type>Widget</type>
        <update_guid>71ec7586898d101074e7b599c215a6ab</update_guid>
        <update_guid_history>71ec7586898d101074e7b599c215a6ab:-572371564</update_guid_history>
    </sys_update_version>
    <sys_metadata_delete action="INSERT_OR_UPDATE">
        <sys_audit_delete display_value="summernotetest">80da797a074a1010288ff16c7c1ed0cf</sys_audit_delete>
        <sys_class_name>sys_metadata_delete</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2020-07-20 15:15:04</sys_created_on>
        <sys_db_object display_value="" name="sp_widget">sp_widget</sys_db_object>
        <sys_id>30b2446f2c8a4a40ba5e7bbcca8994f1</sys_id>
        <sys_metadata>cf7996b02fd13300a4a2c886f699b6ba</sys_metadata>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>summernotetest</sys_name>
        <sys_package display_value="LMS" source="x_315700_lms">03ba89b6db003300c1e8f53a299619df</sys_package>
        <sys_parent/>
        <sys_policy/>
        <sys_scope display_value="LMS">03ba89b6db003300c1e8f53a299619df</sys_scope>
        <sys_scope_delete display_value="">1b77cb96281c4768a079ae9292f582b1</sys_scope_delete>
        <sys_update_name>sp_widget_cf7996b02fd13300a4a2c886f699b6ba</sys_update_name>
        <sys_update_version display_value="sp_widget_cf7996b02fd13300a4a2c886f699b6ba">b1ec7586078d1010288ff16c7c1ed0ab</sys_update_version>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2020-07-20 15:15:04</sys_updated_on>
    </sys_metadata_delete>
</record_update>
