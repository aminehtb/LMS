<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_angular_provider">
    <sp_angular_provider action="DELETE">
        <name>fmSurveyForm</name>
        <script><![CDATA[function(i18n, $rootScope) {

	return {
		template: '<div ng-repeat="page in pages track by $index" ng-if="checkPagination(pages, $index)">' +
			'<div class="assessable-record" ng-if="pagination != \'none\'  && (data.evaluation_method == \'assessment\' || data.evaluation_method == \'attestation_v2\' || data.evaluation_method == \'risk_assessment\') " >' +
			'<h3 class="assessable-record-text">' +
			'{{page.assessableRecord.asrName}}' +
			'</h3></div>' +
			'<div class="panel-heading survey-heading" ng-if="pagination != \'none\' || $index == 0 && !data.isKioskSurvey">' +
			'<h3 class="survey-heading-text">' +
			'<a ng-if="data.trigger_id && (data.evaluation_method == \'survey\' || data.evaluation_method == \'quiz\') " class="survey-heading" style="font-weight: 100;" href="?id=ticket&table={{data.trigger_table}}&sys_id={{data.trigger_id}}">{{data.trigger_display}}&nbsp;</a>' +
			'<span ng-if="pagination == \'none\'">{{data.title}}</span>' +
			'<span ng-if="pagination != \'none\'">{{page.display}}&nbsp;</span>' +
			'</h3>' +
			'<span class="category-description" ng-if="(pagination != \'none\') &amp;&amp; (page.catDesc &amp;&amp; page.catDesc.length)" >{{page.catDesc}}</span>' +
			'</div>' +
			'<div class="text-center intro-text introduction" ng-class="{\'wrapper-md\': !data.isKioskSurvey}" ng-style="{\'margin-top\':data.isKioskSurvey ? \'15px\' : \'\'}" ng-if= "data.one_click_survey == \'true\' && data.introduction && data.not_show_intro_note == \'false\' ">' +
			'<span ng-bind-html="data.introduction"></span>' +
			'</div>' +
			'<div ng-class="{\'wrapper-md\': !data.isKioskSurvey}" ng-if="((!data.asr[page.assessableRecord.asrId].collapsed) || page.showAsrName == \'true\' || pagination != \'none\')">' +
			'<div id="walkup_lang_picker" style="text-align: justify; text-align-last: right;">' +
			'<label ng-if="data.showLanguagePicker == \'true\' && data.one_click_survey == \'true\'" for="spLanguagePicker">${Language}: </label>' +
			'<select ng-if="data.showLanguagePicker == \'true\' && data.one_click_survey == \'true\'" ng-model="data.pickedLanguage" name="spLanguagePicker" id="spLanguagePicker" ' +
			'ng-options="lang.label for lang in data.languages track by lang.value" ng-change="c.setLanguage()">' +
			'</select>' +
			'</div>' +
			'<!-- Category collapse - show only in no-pagination case -->' +
			'<div class="" ng-if="pagination == \'none\' && pages.length > 1 && (data.evaluation_method == \'assessment\' || data.evaluation_method == \'attestation_v2\' || data.evaluation_method == \'risk_assessment\') &amp;&amp; page.showAsrName == \'true\'" >' +
			'<h3 class="col-xs-11 category-label">' +
			'{{page.assessableRecord.asrName}}' +
			'</h3>' +
			'<h3 class="col-xs-1 text-right">' +
			'<a ng-if="!data.asr[page.assessableRecord.asrId].collapsed" href="javascript:void(0)"><span class="glyphicon glyphicon-menu-down" ng-click="data.asr[page.assessableRecord.asrId].collapsed = true"></span></a>' +
			'<a ng-if="data.asr[page.assessableRecord.asrId].collapsed" href="javascript:void(0)"><span class="glyphicon glyphicon-menu-right" ng-click="data.asr[page.assessableRecord.asrId].collapsed = false"></span></a>' +
			'</h3>' +
			'</div>' +
			'<div class="wrapper-sm row" ng-if="pagination == \'none\' && pages.length > 1 && !data.asr[page.assessableRecord.asrId].collapsed" ng-style="{\'border-top\': (($index > 0 && !(page.showAsrName == \'true\')) ? \'1px solid #e6e8ea\' : \'\'), \'margin-left\':(data.evaluation_method == \'assessment\' || data.evaluation_method == \'attestation_v2\' || data.evaluation_method == \'risk_assessment\') ? \'5px\' : \'\' }">' +
			'<h3 class="col-xs-11 category-label" ng-style="{\'font-size\':(data.evaluation_method == \'assessment\' || data.evaluation_method == \'attestation_v2\' || data.evaluation_method == \'risk_assessment\') ? \'1.5em\' : \'\' }">' +
			'</span>{{page.display}}' +
			'</h3>' +
			'<h3 class="col-xs-1 text-right">' +
			'<a ng-if="!page.collapsed" href="javascript:void(0)"><span class="glyphicon glyphicon-menu-down" ng-click="page.collapsed = true"></span></a>' +
			'<a ng-if="page.collapsed" href="javascript:void(0)"><span class="glyphicon glyphicon-menu-right" ng-click="page.collapsed = false"></span></a>' +
			'</h3>' +
			'<span  style="margin-left:10px;" ng-if="(page.catDesc &amp;&amp; page.catDesc.length)">{{page.catDesc}}</span>' +
			'</div>' +
			'<div id="category-questions-{{page.id}}" class="collapse" ng-class="(data.asr[page.assessableRecord.asrId].collapsed || page.collapsed) ? \'\' : \'in\'" ng-style="{\'margin-left\':(data.evaluation_method == \'assessment\' || data.evaluation_method == \'attestation_v2\' || data.evaluation_method == \'risk_assessment\') ? \'30px\' : \'\' }">' +
			'<div ng-repeat="id in page.questions track by $index" ng-init="field = data.questions.idMap[id]" ng-if="(data.questions.idMap[id].type != \'template\' || data.questions.idMap[id].template.firstQuestion == true || isMobile)">' +
			'<div class="wrapper-sm row" ng-class=" { \'text-center\': data.isKioskSurvey, \'form-group\': !data.isKioskSurvey }" style="margin-left: 0" ng-if="!field.depends_on || c.isAnyDependencySatisfied(field)" tabindex="0">' +
			'<h4 class="question-label" ng-if="field.type != \'checkbox\' && field.type != \'signature\' && field.type != \'template\' && field.type != \'attachment\'">' +
			'<span class="field-decorations">' +
			'<span ng-show="field.mandatory" class="fa fa-asterisk mandatory" ng-class="{\'mandatory-filled\': c.isMandatoryFilled(field)}" title="{{data.parameterizedMsgsMap.mandatory}}" style="padding-right: .25em" ></span>' +
			'<span ng-repeat="decoration in field.decorations track by $index" class="decoration {{ decoration.icon }}" title="{{ decoration.text }}"></span>' +
			'</span>' +
			'{{field.label}}' +
			'</h4>' +
			'<div class="details-text" ng-if="field.details && field.type != \'checkbox\' && field.type != \'signature\' && field.type != \'template\' && field.type != \'attachment\'" ng-bind-html="field.details"></div>' +
			'<sp-survey-field ng-class=" { \'text-center\': data.isKioskSurvey } " field="field" data="data" c="c" mobile-prefix="mobilePrefix"></sp-survey-field>' +
			'</div> <!-- end form-group -->' +
			'</div> <!-- end ng-repeat field in data.questions -->' +
			'</div>' +
			'</div> <!-- end wrapper-md -->' +
			'<!-- Nav Buttons -->' +
			'<div class="wrapper-md" ng-if="pagination != \'none\' || $index == pages.length - 1 && !data.isKioskSurvey">' +
			'<div class="row">' +
			'<div class="col-xs-6 col-sm-4" ng-if="!isMobile || $index > 0">' +
			'<div class="wrapper-xs">' +
			'<div ng-if="pagination == \'none\' || $index == 0">' +
			'<button class="btn btn-default hidden-xs" ng-click="cancel(page, c.state)">${Cancel}</button>' +
			'</div>' +
			'<div ng-if="pagination != \'none\' && $index > 0">' +
			'<button class="btn btn-default hidden-xs" ng-click="previousPage(c.state)">${Previous}</button>' +
			'<button class="btn btn-default btn-block btn-lg visible-xs" ng-click="previousPage(c.state)">${Previous}</button>' +
			'</div>' +
			'</div>' +
			'</div>' +
			'<div class="col-xs-6 col-sm-8 text-right" ng-class="(pagination != \'none\' && $index > 0) ? \'\' : \'col-xs-12\'">' +
			'<div class="wrapper-xs hidden-xs" ng-if="!c.isPublic" style="display:inline-block">' +
			'<div ng-if="pagination == \'none\' || isLastPage(page)">' +
			'<button class="btn btn-default" ng-click="save(page, c.state)">${Save}</button>' +
			'</div>' +
			'</div>' +
			'<div class="wrapper-xs" ng-style="{\'display\': (!isMobile ? \'inline-block\' : \'\')}">' +
			'<div ng-if="pagination != \'none\' && !isLastPage(page)">' +
			'<button class="btn btn-primary hidden-xs" ng-click="nextPage(page, c.state)" ng-disabled="disableNextButton(page)">${Next}</button>' +
			'<button class="btn btn-primary btn-block btn-lg visible-xs" ng-click="nextPage(page, c.state)" ng-disabled="disableNextButton(page)">${Next}</button>' +
			'</div>' +
			'<div ng-if="pagination == \'none\' || isLastPage(page)">' +
			'<button class="btn btn-primary hidden-xs" ng-click="submit(page, c.state)" ng-disabled="disableNextButton(page)">${Submit}</button>' +
			'<button class="btn btn-primary btn-block btn-lg visible-xs" ng-click="submit(page, c.state)" ng-disabled="disableNextButton(page)">${Submit}</button>' +
			'</div>' +
			'</div>' +
			'</div>' +
			'</div>' +
			'</div>' +
			'</div> <!-- end ng-repeat category in data.categories -->' +
			'<!-- Survey thank you page -->' +
			'<div class="wrapper-md" ng-if="(c.state === pages.length) && data.successMessage && data.successMessage.length && (!data.isKioskSurvey || isMobile)">' +
			'<div class="text-center intro-text">' +
			'<div class="wrapper-sm">' +
			'<div class="outer-circle">' +
			'<span class = "intro-icon-assessment survey-icon glyphicon icon-article-document"ng-if="(data.evaluation_method == \'assessment\' || data.evaluation_method == \'attestation_v2\' || data.evaluation_method == \'risk_assessment\')"></span>' +
			'<span ng-if="(data.evaluation_method == \'survey\' || data.evaluation_method == \'quiz\')" class="survey-icon glyphicon icon-form"></span>' +
			'</div>' +
			'</div>' +
			'</div>' +
			'<div class="wrapper-sm text-center end-note">' +
			'<h4 class="description-text" ng-bind-html="data.successMessage"></h4>' +
			'</div>' +
			'</div>',

		scope: {
			pagination: '=',
			isMobile: '=',
			data: '=',
			c: '='
		},

		controller: function ($scope) {
			var init = function () {
				$scope.mobilePrefix = "mobile-";
				$scope.pages = [];
				if ($scope.c.data.evaluation_method == 'assessment' || $scope.c.data.evaluation_method == 'attestation_v2' || $scope.c.data.evaluation_method == 'risk_assessment') {
					if ($scope.pagination == 'question')
						$scope.pages = $scope.c.data.questions.idList.map(function (qid) { return { id: qid, questions: [qid], display: $scope.c.data.questions.idMap[qid].category.display, catDesc: $scope.c.data.questions.idMap[qid].category.description, assessableRecord: $scope.c.data.questions.idMap[qid].assessableRecord } });

					else if ($scope.pagination == 'category')
						$scope.pages = $scope.c.data.categories.idList.map(function (catid) {
							var obj = $scope.c.data.categories.idMap[catid];
							return {
								id: catid, display: obj.display, questions: obj.questions,
								catDesc: obj.description, assessableRecord: obj.assessableRecord
							};
						});

					else
						$scope.pages = $scope.c.data.categories.idList.map(function (catid) {
							var obj = $scope.c.data.categories.idMap[catid];
							return {
								id: catid, display: obj.display, questions: obj.questions,
								catDesc: obj.description, assessableRecord: obj.assessableRecord, showAsrName: obj.showAsrName
							};
						});
				} else {
					if ($scope.pagination == 'question')
						$scope.pages = $scope.c.data.questions.idList.map(function (qid) { return { id: qid, questions: [qid], catDesc: $scope.c.data.questions.idMap[qid].category.description, display: $scope.c.data.questions.idMap[qid].category.display } });

					else
						$scope.pages = $scope.c.data.categories.idList.map(function (catid) {
							var category = $scope.c.data.categories.idMap[catid];
							return { id: catid, display: category.display, catDesc: category.description, questions: category.questions };
						});
				}

				var signature = $scope.c.data.signature;
				if (signature && !$scope.c.isPublic) {
					if ($scope.pagination == 'none')
						$scope.pages[$scope.pages.length - 1].questions.push(signature.sys_id);
					else
						$scope.pages.push({ id: signature.sys_id, display: $scope.c.data.title, questions: [signature.sys_id] });

					$scope.c.data.questions.idMap[signature.sys_id] = {
						type: 'signature',
						name: 'signature_result',
						label: signature.label,
						value: signature.value,
						sys_id: signature.sys_id,
						signType: signature.type,
						depends_on: ''
					};
				}
			};
			init();
			console.log($scope.c.data);

			var mapReduceAllTrue = function (questions, callback) {
				return questions.map(function (qid) {
					return callback($scope.c.data.questions.idMap[qid]);
				}).reduce(function (x, y) {
					return x && y;
				}, true);
			};

			var disableNextButtonHelper = function (page) {
				if (!page || !page.questions || !page.questions.length)
					return true;

				return !$scope.isPageValid(page) || !$scope.isPageMandatoryFilled(page);
			};

			$scope.disableNextButton = function (page) {
				if ($scope.pagination == 'none')
					return $scope.pages.map(function (x) { return disableNextButtonHelper(x) })
						.reduce(function (x, y) { return x || y }, false);
				return disableNextButtonHelper(page);
			};

			// Returns true if all questions within this page have a valid response
			var isPageValidHelper = function (page) {
				return mapReduceAllTrue(page.questions, function (question) { return !question.invalidValue });
			};

			$scope.isPageValid = function (page) {
				if ($scope.pagination == 'none')
					return $scope.pages.map(function (x) { return isPageValidHelper(x) })
						.reduce(function (x, y) { return x && y }, true);
				return isPageValidHelper(page);
			};

			$scope.isSignatureFilled = function (page) {
				if ($scope.pagination != 'none' && !page.questions.reduce(function (x, y) { return x || $scope.c.data.questions.idMap[y].type == 'signature' }, false))
					return true;

				var signature = $scope.data.signature;
				if (!signature || signature.type == 'assertion_only')
					return true;

				if (signature.type == 'full_name' && !signature.validated) {
					signature.validationCallback = function (validated) {
						if (validated)
							$scope.submit(page, $scope.c.state);
						else
							$scope.c.showSignatureMessage();
					};
					$scope.c.showSignatureAuthModal();
					return false;
				}

				if (signature.type == 'checkbox') {
					if ($scope.c.data.questions.idMap[signature.sys_id].value != 'true')
						return false;
					else
						$scope.c.data.questions.idMap[signature.sys_id].value = 'checked';
				}

				return true;
			};

			// Returns true if all mandatory questions within this page are filled
			var isPageMandatoryFilledHelper = function (page) {
				var questionsList = page.questions.concat([]);
				if (!$scope.isMobile)
					page.questions.forEach(function (qid) {
						var question = $scope.c.data.questions.idMap[qid];
						if (question.type == 'template' && question.template.firstQuestion) {
							var templateGroup = $scope.c.data.templateGroups[question.templateGroup];
							questionsList = questionsList.concat(templateGroup.questions.filter(function (tid) { return tid != qid; }));
						}
					});
				return mapReduceAllTrue(questionsList, function (question) { return !question.mandatory || $scope.c.isMandatoryFilled(question) });
			};

			$scope.isPageMandatoryFilled = function (page) {
				if ($scope.pagination == 'none')
					return $scope.pages.map(function (x) { return isPageMandatoryFilledHelper(x) })
						.reduce(function (x, y) { return x && y }, true);
				return isPageMandatoryFilledHelper(page);
			};

			// Saves questions
			var saveCurrentQuestions = function (questions, action, updateSuccessMessage) {
				var formdata = { "sysparm_instance_id": $scope.c.data.instanceId, "sysparm_action": action };
				questions.forEach(function (qid) { $scope.c.updateQuestion(qid, formdata) });
				formdata['percent_answered'] = $scope.c.getPercentAnswered();
				if (!!updateSuccessMessage)
					formdata['updateSuccessMessage'] = true;
				$scope.c.submitAjax(formdata);
			};

			// Saves questions on current page or all pages depending on pagination setting
			$scope.saveCurrentPage = function (page, action, updateSuccessMessage) {
				if ($scope.pagination == 'none')
					return saveCurrentQuestions($scope.pages.reduce(function (p1, p2) { return p1.concat(p2.questions) }, []), action, updateSuccessMessage);
				else if ($scope.pagination == 'question' && !$scope.isMobile) {
					var question = $scope.data.questions.idMap[page.questions[0]];
					if (question.type == 'template')
						return saveCurrentQuestions($scope.data.templateGroups[question.templateGroup].questions, action, updateSuccessMessage);
				}
				return saveCurrentQuestions(page.questions, action, updateSuccessMessage);
			};

			// Get the next (or) previous navigable page
			var nextNavigablePage = function (state, forwardDirection) {
				var current = state;
				while (1) {
					// Get next value within bounds
					current = forwardDirection ? current + 1 : current - 1;

					if (current <= 0)
						return 0;

					if (current >= $scope.pages.length)
						return $scope.pages.length;

					if (!$scope.isMobile && mapReduceAllTrue($scope.pages[current].questions, function (q) { return q.template && !q.template.firstQuestion }))
						continue;

					if (mapReduceAllTrue($scope.pages[current].questions, function (question) { return !!question.depends_on && !$scope.c.isAnyDependencySatisfied(question) })) {
						if (current == $scope.pages.length - 1)
							return state;
					} else
						return current;
				}
			};

			var doValidations = function (page, saveAndExit) {
				if (!$scope.isPageValid(page)) {
					$scope.c.showInvalidResponseMessage();
					return false;
				}

				if (!saveAndExit && !$scope.isPageMandatoryFilled(page)) {
					$scope.c.showMandatoryMessage();
					return false;
				}

				if (!saveAndExit && !$scope.isSignatureFilled(page)) {
					if ($scope.c.data.signature.type != 'full_name')
						$scope.c.showSignatureMessage();
					return false;
				}

				return true;
			};

			var nextPageHelper = function (page, state, action, showSuccessMessage) {
				// Clear any existing messages
				$scope.c.hideInlineErrorMessage();

				// Always skip validation if clicking cancel button
				if (action != 'cancel') {
					// Only do the validations if the user is not trying to save & exit
					var saveAndExit = (action == 'save' && showSuccessMessage);

					if ($scope.pagination == 'none') {
						if ($scope.pages.reduce(function (x, y) { return x || !doValidations(y, saveAndExit) }, false))
							return false;
					} else {
						if (!doValidations(page, saveAndExit))
							return false;
					}
				}

				// Save page
				$scope.saveCurrentPage(page, action, !!showSuccessMessage);

				// Navigate to the next page
				if (!!showSuccessMessage)
					$scope.c.state = $scope.pages.length;
				else
					$scope.c.state = nextNavigablePage(state, true);

				// DEF0073704: once we get saving/cancelling/submitting page, we should broadcast to 'spSurveyEndNotes' directive to show success message
				$scope.$broadcast('update-show-msg', $scope.c.state, $scope.pages.length);

				// Scroll to the top
				$('section.page').scrollTop(0);
			};

			// DEF0073704: every time that window's width got changed, we should update c.state accordingly for either desktop view or mobile view
			// where c.state refers to the index of current page. Note that for mobile view, page index is also the question index.
			$scope.$watch(function () { return $scope.c.windowInnerWidth; }, function (newInnerWidth, oldInnerWidth) {
				// When c.state equals to -1, we should show get started page as always.
				if ($scope.c.state === -1)
					return;

				if (oldInnerWidth > 767 && newInnerWidth <= 767 && $scope.isMobile) {
					// When changing from desktop view to mobile view, we move to the first question again.
					$scope.c.state = 0;

				} else if (oldInnerWidth <= 767 && newInnerWidth > 767 && !$scope.isMobile) {
					// When changing from mobile view to desktop view
					var questionIndex = $scope.c.state;
					var count = 0;
					// When pagination is none, then we show all questions/categories in one page for desktop view.
					// When pagination is category, then we should move to the page that current question is on.
					if ($scope.pagination === 'category') {
						for (var i = 0; i < $scope.pages.length; i++) {
							if (questionIndex - $scope.pages[i].questions.length >= 0) {
								questionIndex -= $scope.pages[i].questions.length;
								count++;
							} else
								break;
						}
					}
					$scope.c.state = count;
				}
			});

			// DEF0073704: code refactory
			var checkPaginationForMobileView = function (pageIndex) {
				if ($scope.isMobile) {
					if ($scope.c.state === pageIndex)
						return true;

					if ($scope.c.state === 0 && $scope.pagination === 'none')
						return true;
				}
				return false;
			};

			// DEF0073704: code refactory
			var checkPaginationForDesktopView = function (pages, pageIndex) {
				if (!$scope.isMobile) {
					if ($scope.c.state === pageIndex)
						return true;

					if ($scope.c.state === 0 && $scope.pagination === 'none')
						return true;

					if ($scope.data.isKioskSurvey)
						return true;
				}
				return false;
			};

			// DEF0073704: code refactory
			$scope.checkPagination = function (pages, pageIndex) {
				return checkPaginationForMobileView(pageIndex) || checkPaginationForDesktopView(pages, pageIndex);
			};

			$scope.nextPage = function (page, state) {
				nextPageHelper(page, state, 'save');
			};

			$scope.submit = function (page, state) {
				nextPageHelper(page, state, 'submit', true);
			};

			$rootScope.submit = function (page, state) {
				nextPageHelper(page, state, 'submit', true);
			};

			$scope.save = function (page, state) {
				nextPageHelper(page, state, 'save', true);
			};

			$scope.cancel = function (page, state) {
				nextPageHelper(page, state, 'cancel', true);
			};

			$scope.previousPage = function (state) {
				$scope.c.state = nextNavigablePage(state, false);

				// Scroll to the top
				$('section.page').scrollTop(0);
			};

			$scope.isLastPage = function (page) {
				console.log(page);
				var retVal = true;
				var i;
				if ($scope.c.state == $scope.pages.length - 1)
					return retVal;
				var question = $scope.data.questions.idMap[page.questions[0]];
				console.log(question);
				var tmpGroup = question.templateGroup;
				if (!$scope.isMobile
					&& $scope.pagination == 'question'
					&& question.type == 'template') {
					var numQuestionsOnTemplate = $scope.c.data.templateGroups[tmpGroup].questions.length;
					if ($scope.c.state == $scope.pages.length - numQuestionsOnTemplate)
						return retVal;
				}
				for (i = $scope.c.state + 1; i < $scope.pages.length; i++) {
					var nextPage = $scope.pages[i];

					if (!mapReduceAllTrue(nextPage.questions, function (question) { return !!question.depends_on && !$scope.c.isAnyDependencySatisfied(question) })) {
						retVal = false;
						break;
					}
				}

				return retVal;
			};
		}
	}
}]]></script>
        <sys_class_name>sp_angular_provider</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2020-07-09 08:35:20</sys_created_on>
        <sys_id>e5d5b70b07311010288ff16c7c1ed0f5</sys_id>
        <sys_mod_count>7</sys_mod_count>
        <sys_name>fmSurveyForm</sys_name>
        <sys_package display_value="LMS" source="x_315700_lms">03ba89b6db003300c1e8f53a299619df</sys_package>
        <sys_policy/>
        <sys_scope display_value="LMS">03ba89b6db003300c1e8f53a299619df</sys_scope>
        <sys_update_name>sp_angular_provider_e5d5b70b07311010288ff16c7c1ed0f5</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2020-07-09 10:33:53</sys_updated_on>
        <type>directive</type>
    </sp_angular_provider>
    <sys_update_version action="INSERT_OR_UPDATE">
        <action>DELETE</action>
        <application display_value="LMS">03ba89b6db003300c1e8f53a299619df</application>
        <file_path/>
        <instance_id>ce1e2e54db7ec0544d2bac44d49619c4</instance_id>
        <instance_name>dev98968</instance_name>
        <name>sp_angular_provider_e5d5b70b07311010288ff16c7c1ed0f5</name>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sp_angular_provider"&gt;&lt;sp_angular_provider action="INSERT_OR_UPDATE"&gt;&lt;name&gt;fmSurveyForm&lt;/name&gt;&lt;script&gt;&lt;![CDATA[function(i18n, $rootScope) {

	return {
		template: '&lt;div ng-repeat="page in pages track by $index" ng-if="checkPagination(pages, $index)"&gt;' +
			'&lt;div class="assessable-record" ng-if="pagination != \'none\'  &amp;&amp; (data.evaluation_method == \'assessment\' || data.evaluation_method == \'attestation_v2\' || data.evaluation_method == \'risk_assessment\') " &gt;' +
			'&lt;h3 class="assessable-record-text"&gt;' +
			'{{page.assessableRecord.asrName}}' +
			'&lt;/h3&gt;&lt;/div&gt;' +
			'&lt;div class="panel-heading survey-heading" ng-if="pagination != \'none\' || $index == 0 &amp;&amp; !data.isKioskSurvey"&gt;' +
			'&lt;h3 class="survey-heading-text"&gt;' +
			'&lt;a ng-if="data.trigger_id &amp;&amp; (data.evaluation_method == \'survey\' || data.evaluation_method == \'quiz\') " class="survey-heading" style="font-weight: 100;" href="?id=ticket&amp;table={{data.trigger_table}}&amp;sys_id={{data.trigger_id}}"&gt;{{data.trigger_display}}&amp;nbsp;&lt;/a&gt;' +
			'&lt;span ng-if="pagination == \'none\'"&gt;{{data.title}}&lt;/span&gt;' +
			'&lt;span ng-if="pagination != \'none\'"&gt;{{page.display}}&amp;nbsp;&lt;/span&gt;' +
			'&lt;/h3&gt;' +
			'&lt;span class="category-description" ng-if="(pagination != \'none\') &amp;amp;&amp;amp; (page.catDesc &amp;amp;&amp;amp; page.catDesc.length)" &gt;{{page.catDesc}}&lt;/span&gt;' +
			'&lt;/div&gt;' +
			'&lt;div class="text-center intro-text introduction" ng-class="{\'wrapper-md\': !data.isKioskSurvey}" ng-style="{\'margin-top\':data.isKioskSurvey ? \'15px\' : \'\'}" ng-if= "data.one_click_survey == \'true\' &amp;&amp; data.introduction &amp;&amp; data.not_show_intro_note == \'false\' "&gt;' +
			'&lt;span ng-bind-html="data.introduction"&gt;&lt;/span&gt;' +
			'&lt;/div&gt;' +
			'&lt;div ng-class="{\'wrapper-md\': !data.isKioskSurvey}" ng-if="((!data.asr[page.assessableRecord.asrId].collapsed) || page.showAsrName == \'true\' || pagination != \'none\')"&gt;' +
			'&lt;div id="walkup_lang_picker" style="text-align: justify; text-align-last: right;"&gt;' +
			'&lt;label ng-if="data.showLanguagePicker == \'true\' &amp;&amp; data.one_click_survey == \'true\'" for="spLanguagePicker"&gt;${Language}: &lt;/label&gt;' +
			'&lt;select ng-if="data.showLanguagePicker == \'true\' &amp;&amp; data.one_click_survey == \'true\'" ng-model="data.pickedLanguage" name="spLanguagePicker" id="spLanguagePicker" ' +
			'ng-options="lang.label for lang in data.languages track by lang.value" ng-change="c.setLanguage()"&gt;' +
			'&lt;/select&gt;' +
			'&lt;/div&gt;' +
			'&lt;!-- Category collapse - show only in no-pagination case --&gt;' +
			'&lt;div class="" ng-if="pagination == \'none\' &amp;&amp; pages.length &gt; 1 &amp;&amp; (data.evaluation_method == \'assessment\' || data.evaluation_method == \'attestation_v2\' || data.evaluation_method == \'risk_assessment\') &amp;amp;&amp;amp; page.showAsrName == \'true\'" &gt;' +
			'&lt;h3 class="col-xs-11 category-label"&gt;' +
			'{{page.assessableRecord.asrName}}' +
			'&lt;/h3&gt;' +
			'&lt;h3 class="col-xs-1 text-right"&gt;' +
			'&lt;a ng-if="!data.asr[page.assessableRecord.asrId].collapsed" href="javascript:void(0)"&gt;&lt;span class="glyphicon glyphicon-menu-down" ng-click="data.asr[page.assessableRecord.asrId].collapsed = true"&gt;&lt;/span&gt;&lt;/a&gt;' +
			'&lt;a ng-if="data.asr[page.assessableRecord.asrId].collapsed" href="javascript:void(0)"&gt;&lt;span class="glyphicon glyphicon-menu-right" ng-click="data.asr[page.assessableRecord.asrId].collapsed = false"&gt;&lt;/span&gt;&lt;/a&gt;' +
			'&lt;/h3&gt;' +
			'&lt;/div&gt;' +
			'&lt;div class="wrapper-sm row" ng-if="pagination == \'none\' &amp;&amp; pages.length &gt; 1 &amp;&amp; !data.asr[page.assessableRecord.asrId].collapsed" ng-style="{\'border-top\': (($index &gt; 0 &amp;&amp; !(page.showAsrName == \'true\')) ? \'1px solid #e6e8ea\' : \'\'), \'margin-left\':(data.evaluation_method == \'assessment\' || data.evaluation_method == \'attestation_v2\' || data.evaluation_method == \'risk_assessment\') ? \'5px\' : \'\' }"&gt;' +
			'&lt;h3 class="col-xs-11 category-label" ng-style="{\'font-size\':(data.evaluation_method == \'assessment\' || data.evaluation_method == \'attestation_v2\' || data.evaluation_method == \'risk_assessment\') ? \'1.5em\' : \'\' }"&gt;' +
			'&lt;/span&gt;{{page.display}}' +
			'&lt;/h3&gt;' +
			'&lt;h3 class="col-xs-1 text-right"&gt;' +
			'&lt;a ng-if="!page.collapsed" href="javascript:void(0)"&gt;&lt;span class="glyphicon glyphicon-menu-down" ng-click="page.collapsed = true"&gt;&lt;/span&gt;&lt;/a&gt;' +
			'&lt;a ng-if="page.collapsed" href="javascript:void(0)"&gt;&lt;span class="glyphicon glyphicon-menu-right" ng-click="page.collapsed = false"&gt;&lt;/span&gt;&lt;/a&gt;' +
			'&lt;/h3&gt;' +
			'&lt;span  style="margin-left:10px;" ng-if="(page.catDesc &amp;amp;&amp;amp; page.catDesc.length)"&gt;{{page.catDesc}}&lt;/span&gt;' +
			'&lt;/div&gt;' +
			'&lt;div id="category-questions-{{page.id}}" class="collapse" ng-class="(data.asr[page.assessableRecord.asrId].collapsed || page.collapsed) ? \'\' : \'in\'" ng-style="{\'margin-left\':(data.evaluation_method == \'assessment\' || data.evaluation_method == \'attestation_v2\' || data.evaluation_method == \'risk_assessment\') ? \'30px\' : \'\' }"&gt;' +
			'&lt;div ng-repeat="id in page.questions track by $index" ng-init="field = data.questions.idMap[id]" ng-if="(data.questions.idMap[id].type != \'template\' || data.questions.idMap[id].template.firstQuestion == true || isMobile)"&gt;' +
			'&lt;div class="wrapper-sm row" ng-class=" { \'text-center\': data.isKioskSurvey, \'form-group\': !data.isKioskSurvey }" style="margin-left: 0" ng-if="!field.depends_on || c.isAnyDependencySatisfied(field)" tabindex="0"&gt;' +
			'&lt;h4 class="question-label" ng-if="field.type != \'checkbox\' &amp;&amp; field.type != \'signature\' &amp;&amp; field.type != \'template\' &amp;&amp; field.type != \'attachment\'"&gt;' +
			'&lt;span class="field-decorations"&gt;' +
			'&lt;span ng-show="field.mandatory" class="fa fa-asterisk mandatory" ng-class="{\'mandatory-filled\': c.isMandatoryFilled(field)}" title="{{data.parameterizedMsgsMap.mandatory}}" style="padding-right: .25em" &gt;&lt;/span&gt;' +
			'&lt;span ng-repeat="decoration in field.decorations track by $index" class="decoration {{ decoration.icon }}" title="{{ decoration.text }}"&gt;&lt;/span&gt;' +
			'&lt;/span&gt;' +
			'{{field.label}}' +
			'&lt;/h4&gt;' +
			'&lt;div class="details-text" ng-if="field.details &amp;&amp; field.type != \'checkbox\' &amp;&amp; field.type != \'signature\' &amp;&amp; field.type != \'template\' &amp;&amp; field.type != \'attachment\'" ng-bind-html="field.details"&gt;&lt;/div&gt;' +
			'&lt;sp-survey-field ng-class=" { \'text-center\': data.isKioskSurvey } " field="field" data="data" c="c" mobile-prefix="mobilePrefix"&gt;&lt;/sp-survey-field&gt;' +
			'&lt;/div&gt; &lt;!-- end form-group --&gt;' +
			'&lt;/div&gt; &lt;!-- end ng-repeat field in data.questions --&gt;' +
			'&lt;/div&gt;' +
			'&lt;/div&gt; &lt;!-- end wrapper-md --&gt;' +
			'&lt;!-- Nav Buttons --&gt;' +
			'&lt;div class="wrapper-md" ng-if="pagination != \'none\' || $index == pages.length - 1 &amp;&amp; !data.isKioskSurvey"&gt;' +
			'&lt;div class="row"&gt;' +
			'&lt;div class="col-xs-6 col-sm-4" ng-if="!isMobile || $index &gt; 0"&gt;' +
			'&lt;div class="wrapper-xs"&gt;' +
			'&lt;div ng-if="pagination == \'none\' || $index == 0"&gt;' +
			'&lt;button class="btn btn-default hidden-xs" ng-click="cancel(page, c.state)"&gt;${Cancel}&lt;/button&gt;' +
			'&lt;/div&gt;' +
			'&lt;div ng-if="pagination != \'none\' &amp;&amp; $index &gt; 0"&gt;' +
			'&lt;button class="btn btn-default hidden-xs" ng-click="previousPage(c.state)"&gt;${Previous}&lt;/button&gt;' +
			'&lt;button class="btn btn-default btn-block btn-lg visible-xs" ng-click="previousPage(c.state)"&gt;${Previous}&lt;/button&gt;' +
			'&lt;/div&gt;' +
			'&lt;/div&gt;' +
			'&lt;/div&gt;' +
			'&lt;div class="col-xs-6 col-sm-8 text-right" ng-class="(pagination != \'none\' &amp;&amp; $index &gt; 0) ? \'\' : \'col-xs-12\'"&gt;' +
			'&lt;div class="wrapper-xs hidden-xs" ng-if="!c.isPublic" style="display:inline-block"&gt;' +
			'&lt;div ng-if="pagination == \'none\' || isLastPage(page)"&gt;' +
			'&lt;button class="btn btn-default" ng-click="save(page, c.state)"&gt;${Save}&lt;/button&gt;' +
			'&lt;/div&gt;' +
			'&lt;/div&gt;' +
			'&lt;div class="wrapper-xs" ng-style="{\'display\': (!isMobile ? \'inline-block\' : \'\')}"&gt;' +
			'&lt;div ng-if="pagination != \'none\' &amp;&amp; !isLastPage(page)"&gt;' +
			'&lt;button class="btn btn-primary hidden-xs" ng-click="nextPage(page, c.state)" ng-disabled="disableNextButton(page)"&gt;${Next}&lt;/button&gt;' +
			'&lt;button class="btn btn-primary btn-block btn-lg visible-xs" ng-click="nextPage(page, c.state)" ng-disabled="disableNextButton(page)"&gt;${Next}&lt;/button&gt;' +
			'&lt;/div&gt;' +
			'&lt;div ng-if="pagination == \'none\' || isLastPage(page)"&gt;' +
			'&lt;button class="btn btn-primary hidden-xs" ng-click="submit(page, c.state)" ng-disabled="disableNextButton(page)"&gt;${Submit}&lt;/button&gt;' +
			'&lt;button class="btn btn-primary btn-block btn-lg visible-xs" ng-click="submit(page, c.state)" ng-disabled="disableNextButton(page)"&gt;${Submit}&lt;/button&gt;' +
			'&lt;/div&gt;' +
			'&lt;/div&gt;' +
			'&lt;/div&gt;' +
			'&lt;/div&gt;' +
			'&lt;/div&gt;' +
			'&lt;/div&gt; &lt;!-- end ng-repeat category in data.categories --&gt;' +
			'&lt;!-- Survey thank you page --&gt;' +
			'&lt;div class="wrapper-md" ng-if="(c.state === pages.length) &amp;&amp; data.successMessage &amp;&amp; data.successMessage.length &amp;&amp; (!data.isKioskSurvey || isMobile)"&gt;' +
			'&lt;div class="text-center intro-text"&gt;' +
			'&lt;div class="wrapper-sm"&gt;' +
			'&lt;div class="outer-circle"&gt;' +
			'&lt;span class = "intro-icon-assessment survey-icon glyphicon icon-article-document"ng-if="(data.evaluation_method == \'assessment\' || data.evaluation_method == \'attestation_v2\' || data.evaluation_method == \'risk_assessment\')"&gt;&lt;/span&gt;' +
			'&lt;span ng-if="(data.evaluation_method == \'survey\' || data.evaluation_method == \'quiz\')" class="survey-icon glyphicon icon-form"&gt;&lt;/span&gt;' +
			'&lt;/div&gt;' +
			'&lt;/div&gt;' +
			'&lt;/div&gt;' +
			'&lt;div class="wrapper-sm text-center end-note"&gt;' +
			'&lt;h4 class="description-text" ng-bind-html="data.successMessage"&gt;&lt;/h4&gt;' +
			'&lt;/div&gt;' +
			'&lt;/div&gt;',

		scope: {
			pagination: '=',
			isMobile: '=',
			data: '=',
			c: '='
		},

		controller: function ($scope) {
			var init = function () {
				$scope.mobilePrefix = "mobile-";
				$scope.pages = [];
				if ($scope.c.data.evaluation_method == 'assessment' || $scope.c.data.evaluation_method == 'attestation_v2' || $scope.c.data.evaluation_method == 'risk_assessment') {
					if ($scope.pagination == 'question')
						$scope.pages = $scope.c.data.questions.idList.map(function (qid) { return { id: qid, questions: [qid], display: $scope.c.data.questions.idMap[qid].category.display, catDesc: $scope.c.data.questions.idMap[qid].category.description, assessableRecord: $scope.c.data.questions.idMap[qid].assessableRecord } });

					else if ($scope.pagination == 'category')
						$scope.pages = $scope.c.data.categories.idList.map(function (catid) {
							var obj = $scope.c.data.categories.idMap[catid];
							return {
								id: catid, display: obj.display, questions: obj.questions,
								catDesc: obj.description, assessableRecord: obj.assessableRecord
							};
						});

					else
						$scope.pages = $scope.c.data.categories.idList.map(function (catid) {
							var obj = $scope.c.data.categories.idMap[catid];
							return {
								id: catid, display: obj.display, questions: obj.questions,
								catDesc: obj.description, assessableRecord: obj.assessableRecord, showAsrName: obj.showAsrName
							};
						});
				} else {
					if ($scope.pagination == 'question')
						$scope.pages = $scope.c.data.questions.idList.map(function (qid) { return { id: qid, questions: [qid], catDesc: $scope.c.data.questions.idMap[qid].category.description, display: $scope.c.data.questions.idMap[qid].category.display } });

					else
						$scope.pages = $scope.c.data.categories.idList.map(function (catid) {
							var category = $scope.c.data.categories.idMap[catid];
							return { id: catid, display: category.display, catDesc: category.description, questions: category.questions };
						});
				}

				var signature = $scope.c.data.signature;
				if (signature &amp;&amp; !$scope.c.isPublic) {
					if ($scope.pagination == 'none')
						$scope.pages[$scope.pages.length - 1].questions.push(signature.sys_id);
					else
						$scope.pages.push({ id: signature.sys_id, display: $scope.c.data.title, questions: [signature.sys_id] });

					$scope.c.data.questions.idMap[signature.sys_id] = {
						type: 'signature',
						name: 'signature_result',
						label: signature.label,
						value: signature.value,
						sys_id: signature.sys_id,
						signType: signature.type,
						depends_on: ''
					};
				}
			};
			init();
			console.log($scope.c.data);

			var mapReduceAllTrue = function (questions, callback) {
				return questions.map(function (qid) {
					return callback($scope.c.data.questions.idMap[qid]);
				}).reduce(function (x, y) {
					return x &amp;&amp; y;
				}, true);
			};

			var disableNextButtonHelper = function (page) {
				if (!page || !page.questions || !page.questions.length)
					return true;

				return !$scope.isPageValid(page) || !$scope.isPageMandatoryFilled(page);
			};

			$scope.disableNextButton = function (page) {
				if ($scope.pagination == 'none')
					return $scope.pages.map(function (x) { return disableNextButtonHelper(x) })
						.reduce(function (x, y) { return x || y }, false);
				return disableNextButtonHelper(page);
			};

			// Returns true if all questions within this page have a valid response
			var isPageValidHelper = function (page) {
				return mapReduceAllTrue(page.questions, function (question) { return !question.invalidValue });
			};

			$scope.isPageValid = function (page) {
				if ($scope.pagination == 'none')
					return $scope.pages.map(function (x) { return isPageValidHelper(x) })
						.reduce(function (x, y) { return x &amp;&amp; y }, true);
				return isPageValidHelper(page);
			};

			$scope.isSignatureFilled = function (page) {
				if ($scope.pagination != 'none' &amp;&amp; !page.questions.reduce(function (x, y) { return x || $scope.c.data.questions.idMap[y].type == 'signature' }, false))
					return true;

				var signature = $scope.data.signature;
				if (!signature || signature.type == 'assertion_only')
					return true;

				if (signature.type == 'full_name' &amp;&amp; !signature.validated) {
					signature.validationCallback = function (validated) {
						if (validated)
							$scope.submit(page, $scope.c.state);
						else
							$scope.c.showSignatureMessage();
					};
					$scope.c.showSignatureAuthModal();
					return false;
				}

				if (signature.type == 'checkbox') {
					if ($scope.c.data.questions.idMap[signature.sys_id].value != 'true')
						return false;
					else
						$scope.c.data.questions.idMap[signature.sys_id].value = 'checked';
				}

				return true;
			};

			// Returns true if all mandatory questions within this page are filled
			var isPageMandatoryFilledHelper = function (page) {
				var questionsList = page.questions.concat([]);
				if (!$scope.isMobile)
					page.questions.forEach(function (qid) {
						var question = $scope.c.data.questions.idMap[qid];
						if (question.type == 'template' &amp;&amp; question.template.firstQuestion) {
							var templateGroup = $scope.c.data.templateGroups[question.templateGroup];
							questionsList = questionsList.concat(templateGroup.questions.filter(function (tid) { return tid != qid; }));
						}
					});
				return mapReduceAllTrue(questionsList, function (question) { return !question.mandatory || $scope.c.isMandatoryFilled(question) });
			};

			$scope.isPageMandatoryFilled = function (page) {
				if ($scope.pagination == 'none')
					return $scope.pages.map(function (x) { return isPageMandatoryFilledHelper(x) })
						.reduce(function (x, y) { return x &amp;&amp; y }, true);
				return isPageMandatoryFilledHelper(page);
			};

			// Saves questions
			var saveCurrentQuestions = function (questions, action, updateSuccessMessage) {
				var formdata = { "sysparm_instance_id": $scope.c.data.instanceId, "sysparm_action": action };
				questions.forEach(function (qid) { $scope.c.updateQuestion(qid, formdata) });
				formdata['percent_answered'] = $scope.c.getPercentAnswered();
				if (!!updateSuccessMessage)
					formdata['updateSuccessMessage'] = true;
				$scope.c.submitAjax(formdata);
			};

			// Saves questions on current page or all pages depending on pagination setting
			$scope.saveCurrentPage = function (page, action, updateSuccessMessage) {
				if ($scope.pagination == 'none')
					return saveCurrentQuestions($scope.pages.reduce(function (p1, p2) { return p1.concat(p2.questions) }, []), action, updateSuccessMessage);
				else if ($scope.pagination == 'question' &amp;&amp; !$scope.isMobile) {
					var question = $scope.data.questions.idMap[page.questions[0]];
					if (question.type == 'template')
						return saveCurrentQuestions($scope.data.templateGroups[question.templateGroup].questions, action, updateSuccessMessage);
				}
				return saveCurrentQuestions(page.questions, action, updateSuccessMessage);
			};

			// Get the next (or) previous navigable page
			var nextNavigablePage = function (state, forwardDirection) {
				var current = state;
				while (1) {
					// Get next value within bounds
					current = forwardDirection ? current + 1 : current - 1;

					if (current &lt;= 0)
						return 0;

					if (current &gt;= $scope.pages.length)
						return $scope.pages.length;

					if (!$scope.isMobile &amp;&amp; mapReduceAllTrue($scope.pages[current].questions, function (q) { return q.template &amp;&amp; !q.template.firstQuestion }))
						continue;

					if (mapReduceAllTrue($scope.pages[current].questions, function (question) { return !!question.depends_on &amp;&amp; !$scope.c.isAnyDependencySatisfied(question) })) {
						if (current == $scope.pages.length - 1)
							return state;
					} else
						return current;
				}
			};

			var doValidations = function (page, saveAndExit) {
				if (!$scope.isPageValid(page)) {
					$scope.c.showInvalidResponseMessage();
					return false;
				}

				if (!saveAndExit &amp;&amp; !$scope.isPageMandatoryFilled(page)) {
					$scope.c.showMandatoryMessage();
					return false;
				}

				if (!saveAndExit &amp;&amp; !$scope.isSignatureFilled(page)) {
					if ($scope.c.data.signature.type != 'full_name')
						$scope.c.showSignatureMessage();
					return false;
				}

				return true;
			};

			var nextPageHelper = function (page, state, action, showSuccessMessage) {
				// Clear any existing messages
				$scope.c.hideInlineErrorMessage();

				// Always skip validation if clicking cancel button
				if (action != 'cancel') {
					// Only do the validations if the user is not trying to save &amp; exit
					var saveAndExit = (action == 'save' &amp;&amp; showSuccessMessage);

					if ($scope.pagination == 'none') {
						if ($scope.pages.reduce(function (x, y) { return x || !doValidations(y, saveAndExit) }, false))
							return false;
					} else {
						if (!doValidations(page, saveAndExit))
							return false;
					}
				}

				// Save page
				$scope.saveCurrentPage(page, action, !!showSuccessMessage);

				// Navigate to the next page
				if (!!showSuccessMessage)
					$scope.c.state = $scope.pages.length;
				else
					$scope.c.state = nextNavigablePage(state, true);

				// DEF0073704: once we get saving/cancelling/submitting page, we should broadcast to 'spSurveyEndNotes' directive to show success message
				$scope.$broadcast('update-show-msg', $scope.c.state, $scope.pages.length);

				// Scroll to the top
				$('section.page').scrollTop(0);
			};

			// DEF0073704: every time that window's width got changed, we should update c.state accordingly for either desktop view or mobile view
			// where c.state refers to the index of current page. Note that for mobile view, page index is also the question index.
			$scope.$watch(function () { return $scope.c.windowInnerWidth; }, function (newInnerWidth, oldInnerWidth) {
				// When c.state equals to -1, we should show get started page as always.
				if ($scope.c.state === -1)
					return;

				if (oldInnerWidth &gt; 767 &amp;&amp; newInnerWidth &lt;= 767 &amp;&amp; $scope.isMobile) {
					// When changing from desktop view to mobile view, we move to the first question again.
					$scope.c.state = 0;

				} else if (oldInnerWidth &lt;= 767 &amp;&amp; newInnerWidth &gt; 767 &amp;&amp; !$scope.isMobile) {
					// When changing from mobile view to desktop view
					var questionIndex = $scope.c.state;
					var count = 0;
					// When pagination is none, then we show all questions/categories in one page for desktop view.
					// When pagination is category, then we should move to the page that current question is on.
					if ($scope.pagination === 'category') {
						for (var i = 0; i &lt; $scope.pages.length; i++) {
							if (questionIndex - $scope.pages[i].questions.length &gt;= 0) {
								questionIndex -= $scope.pages[i].questions.length;
								count++;
							} else
								break;
						}
					}
					$scope.c.state = count;
				}
			});

			// DEF0073704: code refactory
			var checkPaginationForMobileView = function (pageIndex) {
				if ($scope.isMobile) {
					if ($scope.c.state === pageIndex)
						return true;

					if ($scope.c.state === 0 &amp;&amp; $scope.pagination === 'none')
						return true;
				}
				return false;
			};

			// DEF0073704: code refactory
			var checkPaginationForDesktopView = function (pages, pageIndex) {
				if (!$scope.isMobile) {
					if ($scope.c.state === pageIndex)
						return true;

					if ($scope.c.state === 0 &amp;&amp; $scope.pagination === 'none')
						return true;

					if ($scope.data.isKioskSurvey)
						return true;
				}
				return false;
			};

			// DEF0073704: code refactory
			$scope.checkPagination = function (pages, pageIndex) {
				return checkPaginationForMobileView(pageIndex) || checkPaginationForDesktopView(pages, pageIndex);
			};

			$scope.nextPage = function (page, state) {
				nextPageHelper(page, state, 'save');
			};

			$scope.submit = function (page, state) {
				nextPageHelper(page, state, 'submit', true);
			};

			$rootScope.submit = function (page, state) {
				nextPageHelper(page, state, 'submit', true);
			};

			$scope.save = function (page, state) {
				nextPageHelper(page, state, 'save', true);
			};

			$scope.cancel = function (page, state) {
				nextPageHelper(page, state, 'cancel', true);
			};

			$scope.previousPage = function (state) {
				$scope.c.state = nextNavigablePage(state, false);

				// Scroll to the top
				$('section.page').scrollTop(0);
			};

			$scope.isLastPage = function (page) {
				console.log(page);
				var retVal = true;
				var i;
				if ($scope.c.state == $scope.pages.length - 1)
					return retVal;
				var question = $scope.data.questions.idMap[page.questions[0]];
				console.log(question);
				var tmpGroup = question.templateGroup;
				if (!$scope.isMobile
					&amp;&amp; $scope.pagination == 'question'
					&amp;&amp; question.type == 'template') {
					var numQuestionsOnTemplate = $scope.c.data.templateGroups[tmpGroup].questions.length;
					if ($scope.c.state == $scope.pages.length - numQuestionsOnTemplate)
						return retVal;
				}
				for (i = $scope.c.state + 1; i &lt; $scope.pages.length; i++) {
					var nextPage = $scope.pages[i];

					if (!mapReduceAllTrue(nextPage.questions, function (question) { return !!question.depends_on &amp;&amp; !$scope.c.isAnyDependencySatisfied(question) })) {
						retVal = false;
						break;
					}
				}

				return retVal;
			};
		}
	}
}]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sp_angular_provider&lt;/sys_class_name&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2020-07-09 08:35:20&lt;/sys_created_on&gt;&lt;sys_id&gt;e5d5b70b07311010288ff16c7c1ed0f5&lt;/sys_id&gt;&lt;sys_mod_count&gt;7&lt;/sys_mod_count&gt;&lt;sys_name&gt;fmSurveyForm&lt;/sys_name&gt;&lt;sys_package display_value="LMS" source="x_315700_lms"&gt;03ba89b6db003300c1e8f53a299619df&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="LMS"&gt;03ba89b6db003300c1e8f53a299619df&lt;/sys_scope&gt;&lt;sys_update_name&gt;sp_angular_provider_e5d5b70b07311010288ff16c7c1ed0f5&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2020-07-09 10:33:53&lt;/sys_updated_on&gt;&lt;type&gt;directive&lt;/type&gt;&lt;/sp_angular_provider&gt;&lt;/record_update&gt;</payload>
        <payload_hash>-917372474</payload_hash>
        <record_name>fmSurveyForm</record_name>
        <reverted_from/>
        <source>ec8ff54a078d1010288ff16c7c1ed09f</source>
        <source_table>sys_update_set</source_table>
        <state>previous</state>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2020-07-09 10:33:54</sys_created_on>
        <sys_id>52f0981f07711010288ff16c7c1ed040</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_recorded_at>17333238a5d0000001</sys_recorded_at>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2020-07-09 10:33:54</sys_updated_on>
        <type>Widget Angular Provider</type>
        <update_guid>5af0981fbf7110105bcffe94dfd0fa3f</update_guid>
        <update_guid_history>5af0981fbf7110105bcffe94dfd0fa3f:-917372474,4feef703e57110109a34019b779cc730:645938842,860e3fcfc9311010252fd46f07094753:-838594211,255db7cf9131101099a599ffbbc6696d:-2126367080,493bbf4f6f311010fd451d210f13fad0:710842723,8067b7cb7531101075bdb66b5e3345af:-1043855030,b3e5b78b9231101032d63378c8759a4e:-767493986,edd5b70b5731101094f82debcbf9c1f6:464747954</update_guid_history>
    </sys_update_version>
    <sys_metadata_delete action="INSERT_OR_UPDATE">
        <sys_audit_delete display_value="fmSurveyForm">f0e23df2074a1010288ff16c7c1ed0fe</sys_audit_delete>
        <sys_class_name>sys_metadata_delete</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2020-07-20 14:40:26</sys_created_on>
        <sys_db_object display_value="" name="sp_angular_provider">sp_angular_provider</sys_db_object>
        <sys_id>155dc2c27e6b42089d36637357723204</sys_id>
        <sys_metadata>e5d5b70b07311010288ff16c7c1ed0f5</sys_metadata>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>fmSurveyForm</sys_name>
        <sys_package display_value="LMS" source="x_315700_lms">03ba89b6db003300c1e8f53a299619df</sys_package>
        <sys_parent/>
        <sys_policy/>
        <sys_scope display_value="LMS">03ba89b6db003300c1e8f53a299619df</sys_scope>
        <sys_scope_delete display_value="">1b77cb96281c4768a079ae9292f582b1</sys_scope_delete>
        <sys_update_name>sp_angular_provider_e5d5b70b07311010288ff16c7c1ed0f5</sys_update_name>
        <sys_update_version display_value="sp_angular_provider_e5d5b70b07311010288ff16c7c1ed0f5">52f0981f07711010288ff16c7c1ed040</sys_update_version>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2020-07-20 14:40:26</sys_updated_on>
    </sys_metadata_delete>
</record_update>
