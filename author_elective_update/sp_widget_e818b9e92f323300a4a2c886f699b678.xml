<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="DELETE">
        <category>custom</category>
        <client_script><![CDATA[function ($scope, $http, spScUtil, spUtil, nowAttachmentHandler, $rootScope, $sanitize, $window, $sce, i18n, $timeout, $log, spAriaUtil, $document, spModal, $q, spAtf, $location, spAriaFocusManager, spSCNavStateManager) {
	var c = this;
	c.data.item=c.data.sc_cat_item;
  console.log(c.data.item);
	if (c.data.sc_cat_item && $scope.data.hasOwnProperty("_generatedItemGUID")) {
		c.data.sc_cat_item._attachmentGUID = $scope.data._generatedItemGUID;
	}

	c.quantity = c.data.quantity ? c.data.quantity + "" : "1";
	c.mandatory = [];
	$scope.stickyHeaderTop = '0px';
	c.widget._debugContextMenu = [
		[ i18n.getMessage("Open") + " sc_cat_item", function() {
			var item = c.data.sc_cat_item;
			$window.open("/sp_config?id=form&table=" + item.table + "&sys_id=" + item.sys_id); }]
	];
	
	$rootScope.$on('spModel.gForm.rendered', function() {
		$timeout(function() {
							spAtf.init().then(function(atf) {
								$scope._atf = atf;
								atf.expose('catalog_util', catalogUtil);
							});
		}, 10);
	});
	
	//	ATF helper object
	var catalogUtil = {
		updateGform: function() {
			$scope._atf.expose('g_form', spAtf.augmentForm(g_form));
		},
		
		addRow: function(fieldId, timeoutInMS) {
			if (timeoutInMS <= 0)
				timeoutInMS = 1000;
			var deferred = $q.defer();
			$scope.$broadcast("$sp.sc_multi_row.create_row", fieldId, $scope.data.sc_cat_item.sys_id);
			$scope.$on('spModel.gForm.initialized', function(e, gFormInstance) {
				if (gFormInstance.getSysId() == fieldId)
					deferred.resolve();
			});
			$timeout(function() {
				deferred.reject();
			}, timeoutInMS);
			return deferred.promise;
		},
		
		submit: function (timeout) {
			var deferred = $q.defer();
			$scope.triggerOnSubmit(timeout);
			var cleanup = $scope.$on('$sp.service_catalog.form_submit_failed', function() {
					cleanup();
					deferred.reject("Can't submit form");
			});
			if (g_form) {
					g_form.$private.events.on('submitted', function() {
			var cleanUp = $scope.$on('$sp.sc_cat_item.submitted', function(o, result) {
						$timeout(function() {
							cleanUp();
							deferred.resolve(result);
						}, 10);
					});
				});
			}
			else
				deferred.reject('g_form not initialized');
			
			return deferred.promise;
		},
		
		addToCart: function(timeout) {
			var defer = $q.defer();
			$scope.triggerAddToCart(timeout);
			var cleanup = $scope.$on('$sp.service_catalog.form_submit_failed', function() {
					cleanup();
					defer.reject("Can't submit form");
			});
			if (g_form) {
				g_form.$private.events.on('submitted', function() {
			var cleanup = $scope.$on('$sp.sc_cat_item.add_to_cart', function(o, result) {
				$timeout(function() {
					cleanup();
					defer.resolve(result);
				}, 10);
			});
				});
			}
			else
				defer.reject('g_form not initialized');			
			return defer.promise;
		},
		
		submitCatItem: function(timeout) {
			var defer = $q.defer();
			$scope.triggerOnSubmit(timeout);
			var cleanup = $scope.$on('$sp.service_catalog.form_submit_failed', function() {
					cleanup();
					defer.reject("Can't submit form");
			});
			if (g_form) {
				g_form.$private.events.on('submitted', function() {
				if ($scope.data.sys_properties.twostep && $scope.data.sc_cat_item.request_method != "submit") {
					defer.resolve();
				}
				else{
					var cleanUp = $scope.$on('$sp.sc_cat_item.submitted', function(o, result) {
						$timeout(function() {
							cleanUp();
							result.single_step = true;
							defer.resolve(result);
						}, 10);
					});
				}
				});
			}
			else
				defer.reject('g_form not initialized');
			return defer.promise;
		},
		
		setQuantity: function(quantity) {
			if ($scope.c.data.sc_cat_item.sys_class_name !== "sc_cat_item_producer" && $scope.c.data.sc_cat_item.sys_class_name !== "std_change_record_producer") {
				$scope.c.quantity = quantity;
				$scope.$apply();
			}
		},
		
		getQuantity: function() {
			return $scope.c.quantity;
		},
		
		getPrice: function() {
			var obj = {};
			obj.price = $scope.data.sc_cat_item.price_display;
			obj.recurring_price = $scope.data.sc_cat_item.recurring_price_display;
			obj.recurring_frequency = $scope.data.sc_cat_item.recurring_frequency;
			return obj;
		}
	}
	
	c.showAddCartBtn = function() {
		return !$scope.submitted &&
		c.options.show_add_cart_button &&
			c.data.sc_cat_item.sys_class_name !== "sc_cat_item_producer" &&
			c.data.sc_cat_item.sys_class_name !== "std_change_record_producer" &&
			!c.data.sc_cat_item.no_cart && !c.data.is_cart_item;
	}
	
	c.showQuantitySelector = function() {
		// Following if block is code for hard-setting an aria-label on the quantity select box
		// for displaying the label "quantity"
		if($('#catItemQuantity') != null) {
			var quantityElement = $('#catItemQuantity');
			quantityElement.prev().find(".select2-offscreen").removeAttr("aria-labelledby").attr("aria-label","Quantity " + c.quantity);
		}
		
		return c.data.sc_cat_item.sys_class_name !== "sc_cat_item_producer" &&
			c.data.sc_cat_item.sys_class_name !== "std_change_record_producer" &&
			!c.data.sc_cat_item.no_quantity &&
			(c.data.sc_cat_item.cart_guide === undefined || c.data.sc_cat_item.cart_guide === null)&&
			(!c.data.sc_cat_item.no_order_now || !c.data.sc_cat_item.no_cart);
	}
	c.showOrderNowButton = function() {
		return !$scope.data.is_cart_item && (c.data.sc_cat_item.use_sc_layout || !c.data.sc_cat_item.no_order_now);
	}
	c.showAddToWishlist = function () {
		return !$scope.submitted  && 
			(c.data.showWishlist && 
			 !c.data.sc_cat_item.no_wishlist && 
			 !c.data.is_cart_item && 
			 c.options.show_add_to_wishlist_button === 'true');
	}
	c.allowOrder = function() {
		if (c.data.sc_cat_item.use_sc_layout)
			return true;
		if (c.data.sc_cat_item.no_order)
			return false;
		if (c.data.sc_cat_item.no_order_now && c.data.sc_cat_item.no_cart)
			return false;
		return true;
	}
	
	c.hideCartMsg = function () {
		$scope.data.showMsg = false;
	}

	c.showAttachments = function() {
		return !$scope.submitted &&
			!c.data.sc_cat_item.no_attachments &&
			c.data.sc_cat_item.sys_class_name !== "std_change_record_producer";
	};
	$scope.$on('dialog.upload_too_large.show', function(e) {
		$log.error($scope.m.largeAttachmentMsg);
		spUtil.addErrorMessage($scope.m.largeAttachmentMsg);
	});
	$scope.m = $scope.data.msgs;
	var ah = $scope.attachmentHandler = new nowAttachmentHandler(setAttachments, appendError);
	function appendError(error) {
		spUtil.addErrorMessage(error.msg + error.fileName);
	}
	ah.setParams($scope.data._attachmentTable, $scope.data._generatedItemGUID, 1024 * 1024 * $scope.data.maxAttachmentSize);
	function setAttachments(attachments, action) {
		$scope.attachments = attachments;
		if (action === "added") {
			$scope.setFocusToAttachment();
			if ($scope.attachments.length > 0)
			 $scope.data.sc_cat_item.attachment_submitted = true;
		}
		if (action === "renamed")
			spAriaUtil.sendLiveMessage($scope.m.renameSuccessMsg);
		if (action === "deleted") {
			spAriaUtil.sendLiveMessage($scope.m.deleteSuccessMsg);
			if ($scope.attachments.length == 0)
				$scope.data.sc_cat_item.attachment_submitted = false;
		}
		spUtil.get($scope,{action:"from_attachment"});
	}
	$scope.attachmentHandler.getAttachmentList();
	$scope.confirmDeleteAttachment = function(attachment) {
		spModal.confirm($scope.data.msgs.delete_attachment).then(function() {
			$scope.attachmentHandler.deleteAttachment(attachment);
			$scope.setFocusToAttachmentButton();
		});
	}
	$scope.dismissWishListMessage = function() {
		$scope.is_update_wishlist = false;
	}
	
  if ($scope.data.sc_cat_item) {
		$scope.data.sc_cat_item.description = $sce.trustAsHtml($scope.data.sc_cat_item.description);
		if (angular.equals($scope.data.sc_cat_item._fields, {}))
				$scope.data.no_fields = true;
		if ($scope.data.sc_cat_item.sys_class_name !== "sc_cat_item_producer" && 
				$scope.data.sc_cat_item.sys_class_name !== "std_change_record_producer") {	
			if ($scope.data.sc_cat_item.request_method == "request")
				$scope.submitButtonMsg = $scope.m.requestMsg;
			else if ($scope.data.sc_cat_item.request_method == "submit")
				$scope.submitButtonMsg = $scope.m.submitMsg;
		else
				$scope.submitButtonMsg = $scope.m.orderNowMsg;
		} else
			$scope.submitButtonMsg = $scope.m.submitMsg;
		
		// Breadcrumbs
		if (!$scope.data.categories)
			$scope.data.categories = [];
		$scope.data.categories.forEach(function(category, index, categories) {
			categories[index].url = category.url + '&catalog_id=' + $scope.data.catalog_id;
		});
		if ($scope.data.is_wishlist_item) {
			$scope.data.categories.unshift({label: $scope.m.wishlistMsg, url: '?id=sc_wishlist'});
			$scope.data.categories.push({label: $scope.data.sc_cat_item.name, url: '#'});
		}
		else if ($scope.data.is_cart_item) {
			$scope.data.categories.unshift({label: $scope.m.cartMsg, url: '?id=sc_cart'});
			$scope.data.categories.push({label: $scope.data.sc_cat_item.name, url: '#'});
		}
		else if ($scope.data.categories.length > 0) {
			$scope.data.categories.unshift({label: $scope.data.sc_catalog || $scope.page.title, url: '?id=' + $scope.data.sc_category_page + "&catalog_id=" + $scope.data.catalog_id});
			$scope.data.categories.push({label: $scope.data.sc_cat_item.name, url: '#'});
			if ($scope.data.all_catalog_msg) {
				$scope.data.categories.unshift({label: $scope.data.all_catalog_msg, url: '?id=' + $scope.data.sc_category_page + "&catalog_id=-1"});
			}
		}
		else {
			$scope.data.categories.push({label: $scope.data.sc_cat_item.name, url: '#'});
		}
		
		$timeout(function() {
			$scope.$emit('sp.update.breadcrumbs', $scope.data.categories);
		});
		spUtil.setSearchPage('sc');
	} else {
		var notFoundBC = [{label: $scope.page.title, url: '?id=' + $scope.data.sc_catalog_page}];
		$timeout(function() {
			$scope.$emit('sp.update.breadcrumbs', notFoundBC);
		});
		spUtil.setSearchPage('sc');
	};
	c.getItemId = function () {
		return $scope.data.sc_cat_item ? $scope.data.sc_cat_item.sys_id : -1;
	};
	var g_form;
	$scope.$on('spModel.gForm.initialized', function(e, gFormInstance) {
		if (gFormInstance.getSysId() != -1 && gFormInstance.getSysId() != c.getItemId())
			return;
		g_form = gFormInstance;
		spSCNavStateManager.register(g_form);
		$timeout(function() {
				$rootScope.$emit('spModel.gForm.rendered', g_form);
		}, 175);
		
		// This runs after all onSubmit scripts have executed
		g_form.$private.events.on('submitted', function() {
			cleanFailedSubmit();
			$scope.submitting = true;
			if ($scope.data.sc_cat_item.item_action === "order")
				getOne();
			else if ($scope.data.sc_cat_item.item_action === "add_to_cart")
				addToCart();
			else if ($scope.data.sc_cat_item.item_action == "update_cart")
				updateCart();
		});
	});
	function getVarData(fields) {
		var reqData = {};
		for(var obj in fields)
			reqData[fields[obj].name] = fields[obj].value;
		return reqData;
	}
	function addLink(url, msg) {
		return "<a class='link' href=" + url + ">" + msg + "</a>";
	}
	
	$scope.$on("$sp.service_catalog.wishlist.update", function(evt, item) {
		if (item === $scope.data.sys_id)
			$scope.data.show_wishlist_msg = false;
	});
	$scope.addToWishlist = function() {
		var invalid = false;
		Object.keys($scope.data.sc_cat_item._fields).forEach(function (f) {
			if ($scope.data.sc_cat_item._fields[f].isRegexInvalid && $scope.data.sc_cat_item._fields[f].isInvalid)
				invalid = true;
		})
		if (invalid) {
			spUtil.addErrorMessage($scope.m.regexError);
			return;
		}
		$scope.submitting = true;
		$scope.m.actionMsg = $scope.data.is_wishlist_item ? $scope.m.wishlistUpdateMsg : $scope.m.wishlistAddMsg;
		$scope.m.actionMsg += addLink('?id=sc_wishlist', $scope.m.viewWishListMsg);
		$scope.m.actionMsg += '<i class="fa fa-close pull-right pointer close-notification" aria-label="${Close Notification}" tabindex="0" ng-click="c.hideCartMsg()"/>';
		$scope.m.actionMsg = $sce.trustAsHtml($scope.m.actionMsg);
		$scope.is_update_wishlist = false;
		spScUtil.addToWishlist($scope.data.sc_cat_item.sys_id, c.quantity, getVarData($scope.data.sc_cat_item._fields), $scope.data._generatedItemGUID).then(function(response) {
			var cartItemId = "";
			for (var i=0; i<response.data.result.items.length; i++) {
				var item = response.data.result.items[i];
				if (item.catalog_item_id === $scope.data.sc_cat_item.sys_id) {
					cartItemId = item.cart_item_id;
					break;
				}
			}
			$rootScope.$broadcast("$sp.service_catalog.wishlist.add_item");
			$rootScope.$broadcast("$sp.service_catalog.wishlist.update", cartItemId);
			g_form.$private.userState.clearModifiedFields();
			$scope.data.showMsg = $scope.is_update_wishlist = true;
			$scope.data.is_wishlist_item = true;
			$scope.data.show_wishlist_msg = false;
			$scope.submitting = false;
			spUtil.scrollTo('#sc_cat_item', 300);
		});
	}

	$scope.triggerAddToCart = function(timeout) {
		$scope.data.sc_cat_item.item_action = "add_to_cart";
		$scope.data.sc_cat_item.quantity = c.quantity;
		$scope.$evalAsync(function () {
			if (g_form) {
				$scope.submitting = true;
				if (!g_form.submit()) {
					timeout = timeout || 1000;
					$timeout(function () {
						$scope.$broadcast('$sp.service_catalog.form_submit_failed', {action_name: 'submit'});
					}, timeout);
				}
			}
			
		})
		return false;
	}

	$scope.triggerUpdateCart = function(timeout) {
		$scope.data.sc_cat_item.item_action = "update_cart";
		$scope.data.sc_cat_item.quantity = c.quantity;
		$scope.$evalAsync(function () {
			if (g_form) {
				$scope.submitting = true;
				if (!g_form.submit()) {
					timeout = timeout || 1000;
					$timeout(function () {
						$scope.$broadcast('$sp.service_catalog.form_submit_failed', {action_name: 'submit'});
					}, timeout);
				}
			}
			
		})
		return false;
	}

	$scope.triggerOnSubmit = function(timeout) {
		if ($scope.options.isServiceWorkspace && $window.frameElement) {
			var workspaceParams = {};
			workspaceParams.sysparm_parent_table = $window.frameElement.getAttribute('parent-table');
			workspaceParams.sysparm_parent_sys_id = $window.frameElement.getAttribute('parent-sys-id');
			$scope.data.workspaceParams = workspaceParams;
		}
		$scope.data.sc_cat_item.item_action = "order";
		$scope.data.sc_cat_item.quantity = c.quantity;
		$scope.$evalAsync(function () {
			if (g_form) {
				$scope.submitting = true;
				if (!g_form.submit()) {
					timeout = timeout || 1000;
					$timeout(function () {
						$scope.$broadcast('$sp.service_catalog.form_submit_failed', {action_name: 'submit'});
					}, timeout);
				}
			}
			
		})
		return false;
	}
	function setFieldsReadonly() {
		var allFields = g_form.getFieldNames();
		for (var fieldName in allFields) {
			g_form.setReadonly(allFields[fieldName], true);
		}
	}
	// order / create request
	function getOne() {
		$scope.server.get({
			action: 'log_request',
			itemDetails: {
				sys_id: $scope.data.sc_cat_item.sys_id,
										name: $scope.data.sc_cat_item.name,
				sys_class_name: $scope.data.sc_cat_item.sys_class_name
			}
		});
		//Required to pass as payload for usage as embeddedWidget
		var embeddedWidgetOptions = {
			"auto_redirect" : "true",
			"requested_for_id" : "",
			"requested_for_display" : ""
		};
		if ($scope.data.sc_cat_item.sys_class_name != "sc_cat_item_producer" && $scope.data.sc_cat_item.sys_class_name != "std_change_record_producer") {
			if ($scope.data.sys_properties.twostep && $scope.data.sc_cat_item.request_method != "submit") {
				var payload = {
					cart: 'cart_' + $scope.data.sc_cat_item.sys_id,
					itemDetails: {
						sys_id: $scope.data.sc_cat_item.sys_id, 
						quantity: $scope.data.sc_cat_item.quantity, 
						fields: getVarData($scope.data.sc_cat_item._fields), 
						newRecordID: $scope.data._generatedItemGUID,
						request_method : $scope.data.sc_cat_item.request_method
					},
					action: $scope.data.is_wishlist_item ? "order_wishlist_item" : "order_item",
					workspaceParams: $scope.data.workspaceParams
				};
				for (var embeddedOption in embeddedWidgetOptions) {
					payload[embeddedOption] = c.options[embeddedOption] || embeddedWidgetOptions[embeddedOption];
				}
				$scope.server.get(payload).then(function(response) {
					var orderItemModalCtrl;
					var unregister = $scope.$on('$sp.service_catalog.cart.cancel_order', function() {
						$scope.submitting = false;
						orderItemModalCtrl.close();
					});
					var closeModalOnSubmit = $scope.$on('$sp.service_catalog.cart.submitted', function(){
						orderItemModalCtrl.close();
						setFieldsReadonly();
						$scope.submitted = true;
					});
					var orderItemModal = angular.copy(response.data.orderItemModal);
					orderItemModal.options.afterOpen = function(ctrl){
						orderItemModalCtrl = ctrl;
					};
					orderItemModal.options.afterClose = function() {
							unregister();
							closeModalOnSubmit();
							c.orderItemModal = null;
							orderItemModalCtrl = null;
						};
						c.orderItemModal = orderItemModal;
					});
			} else {
				var additionalParms = {};
				if ($scope.data.workspaceParams) {
					additionalParms.sysparm_parent_sys_id = $scope.data.workspaceParams.sysparm_parent_sys_id;
					additionalParms.sysparm_parent_table = $scope.data.workspaceParams.sysparm_parent_table;
				}
				$scope.submitting = true;
				if ($scope.data.is_wishlist_item) {

					spScUtil.orderWishlistedItem($scope.data.sc_cat_item.sys_id, $scope.data.sc_cat_item.quantity, getVarData($scope.data.sc_cat_item._fields), $scope.data._generatedItemGUID, additionalParms).then(function(response) {
						var a = response.data.result;
						$scope.$emit("$$uiNotification", a.$$uiNotification);
						$scope.$emit("$sp.sc_cat_item.submitted", a);
						$rootScope.$broadcast("$sp.service_catalog.wishlist.update");
						if (c.options.auto_redirect == 'false') {
							$scope.submitting = false;
							$scope.submitted = true;
							$rootScope.$broadcast("$sp.service_catalog.cart.submitted", true);
							spUtil.addInfoMessage($scope.m.requestSubmitted);
							return;
						} else
							$location.search('id=sc_request&is_new_order=true&table=sc_request&sys_id=' + a.sys_id);
					});
				}
				else {
					spScUtil.orderNow($scope.data.sc_cat_item.sys_id, $scope.data.sc_cat_item.quantity, getVarData($scope.data.sc_cat_item._fields), $scope.data._generatedItemGUID, additionalParms).then(function(response) {
							var a = response.data.result;
							$scope.$emit("$$uiNotification", a.$$uiNotification);
							$scope.$emit("$sp.sc_cat_item.submitted", a);
							if (c.options.auto_redirect == 'false') {
								$scope.submitting = false;
								$scope.submitted = true;
								$rootScope.$broadcast("$sp.service_catalog.cart.submitted", true);
								spUtil.addInfoMessage($scope.m.requestSubmitted);
								return;
							} else if (!$scope._atf)
								$location.search('id=sc_request&is_new_order=true&table=sc_request&sys_id=' + a.sys_id);
					});
				}
			}
		} else {
			postCatalogFormRequest().then(function(response) {
				var a = response.data.result;
				if (!$scope.options.isServiceWorkspace)
				$scope.$emit("$$uiNotification", a.$$uiNotification);
				$scope.$emit("$sp.sc_cat_item.submitted", a);
				if ($scope.data.is_wishlist_item)
					$rootScope.$broadcast("$sp.service_catalog.wishlist.update");
				if (c.options.auto_redirect == 'false') {
					setFieldsReadonly();
					$scope.submitted = true;
				} else if (!$scope._atf)
						handleRedirect(a.number, a.table, a.sys_id, a.redirect_to, a.redirect_portal_url);
				$scope.submitting = false;
				$scope.submitButtonMsg = $scope.m.submittedMsg;
			});
		}
	}

	$scope.$on("$sp.sc_cat_item.submitted", function(){
		g_form.$private.userState.clearModifiedFields();
	});
  
	function addToCart() {
		$scope.server.get({
			action: 'log_request',
			itemDetails: {sys_id: $scope.data.sc_cat_item.sys_id, 
										name: $scope.data.sc_cat_item.name,
										sys_class_name: $scope.data.sc_cat_item.sys_class_name}
		});
		
		postCatalogFormRequest().then(function(response) {
			$rootScope.$broadcast("$sp.service_catalog.cart.add_item");
			$rootScope.$broadcast("$sp.service_catalog.cart.update");
			$scope.$emit("$sp.sc_cat_item.add_to_cart", $scope.data._generatedItemGUID);
			if ($scope.data.is_wishlist_item) {
				$rootScope.$broadcast("$sp.service_catalog.wishlist.update");
				$scope.data.is_wishlist_item = false;
				if ($location.$$search.edit === "wishlist") {
					$location.search("id=sc_wishlist");
					return;
				}
			}
			g_form.$private.userState.clearModifiedFields();
			c.status = i18n.getMessage("Added item to shopping cart");
			$scope.server.get({action: 'init_item'}).then(function(response) {
				$scope.data._generatedItemGUID = response.data._generatedItemGUID;
				ah.setParams($scope.data._attachmentTable, $scope.data._generatedItemGUID, 1024 * 1024 * $scope.data.maxAttachmentSize);
				$scope.attachmentHandler.getAttachmentList();
				$scope.m.actionMsg = $scope.m.cartAddMsg + addLink('?id=sc_cart', $scope.m.viewCartMsg);
				$scope.m.actionMsg += '<i class="fa fa-close pull-right pointer close-notification" aria-label="${Close Notification}" tabindex="0" ng-click="c.hideCartMsg()"/>';
				$scope.m.actionMsg = $sce.trustAsHtml($scope.m.actionMsg);
				$scope.data.showMsg = true;
				$scope.submitting = false;
				cleanFailedSubmit = $scope.$on('$sp.service_catalog.form_submit_failed', function() { $scope.submitting = false; });
				spUtil.scrollTo('#sc_cat_item', 300);
			});
		});
	}
	function updateCart() {
		postCatalogFormRequest().then(function(response) {
			g_form.$private.userState.clearModifiedFields();
			c.status = i18n.getMessage("Updated Item to shopping cart.");
			$location.search('id=sc_cart');
		})
	}
	function postCatalogFormRequest() {
		$scope.submitting = true;
		if ($scope.data.is_wishlist_item) {
			$scope.is_update_wishlist = false;
			$scope.data.show_wishlist_msg = false;
			if ($scope.data.sc_cat_item.sys_class_name === "sc_cat_item_producer")
				return spScUtil.submitWishlistedProducer($scope.data.sc_cat_item.sys_id, getVarData($scope.data.sc_cat_item._fields), $scope.data._generatedItemGUID, $scope.data.workspaceParams);
			else if ($scope.data.sc_cat_item.item_action === "add_to_cart")
				return spScUtil.addWishlistedItemToCart($scope.data.sc_cat_item.sys_id, $scope.data.sc_cat_item.quantity, getVarData($scope.data.sc_cat_item._fields), $scope.data._generatedItemGUID);
		}
		else if ($scope.data.is_cart_item)
			return spScUtil.updateCart($scope.data._generatedItemGUID, $scope.data.sc_cat_item.quantity, getVarData($scope.data.sc_cat_item._fields));
		else if ($scope.data.sc_cat_item.sys_class_name === "sc_cat_item_producer")
			return spScUtil.submitProducer($scope.data.sc_cat_item.sys_id, getVarData($scope.data.sc_cat_item._fields), $scope.data._generatedItemGUID, $scope.data.workspaceParams);
		else if ($scope.data.sc_cat_item.sys_class_name === "std_change_record_producer")
			return spScUtil.submitStdChgProducer($scope.data.sc_cat_item.sys_id, $scope.data.stdChg.twoStep, $scope.data.stdChg.currentVersion, $scope.data._generatedItemGUID, $scope.portal.url_suffix);
		else if ($scope.data.sc_cat_item.item_action === "add_to_cart")
			return spScUtil.addToCart($scope.data.sc_cat_item.sys_id, $scope.data.sc_cat_item.quantity, getVarData($scope.data.sc_cat_item._fields), $scope.data._generatedItemGUID);
	}
	// spModel populates mandatory - hasMandatory is called by the submit button
	$scope.hasMandatory = function() {
		return c.mandatory && c.mandatory.length > 0;
	};
	
	//	Listeners
	var cleanFailedSubmit = $scope.$on('$sp.service_catalog.form_submit_failed', function() { $scope.submitting = false; });
	
	// switch catalog items
	var unregister = $scope.$on('$sp.list.click', onListClick);
	$scope.$on("$destroy", function() {
		$rootScope.$broadcast("$sp.service_catalog.item.close");
		unregister();
	});
	function onListClick(evt, arg) {
		$scope.data.sys_id = arg.sys_id;
		spUtil.update($scope);
	}
	
	function formatRedirectUrl(page, table, sys_id) {
		var url;
		var paramObj = {page: page, table: table, sys_id: sys_id};
		url = spUtil.format(c.options.url, paramObj);
		return url;
	}
	
	function handleRedirect(n, table, sys_id, redirectTo, redirectUrl) {

		var page = 'form';
		if (table == 'sc_request')
			page = 'sc_request';
		else if (n)
			page = 'ticket';
		
		if (redirectTo == 'catalog_home') 
			page = 'sc_home';

		//For Standard change, always direct to form if not in Workspace
		if ($scope.data.sc_cat_item.sys_class_name === "std_change_record_producer") {
			if ($scope.options.isServiceWorkspace) {
				var params = {};
				params.msg = 'TARGET_RECORD_SELECTED';
				params.target_table = table;
				params.target_sys_id = -1;
				if (sys_id)
					params.target_sys_id = sys_id;

				if ($scope.data.stdChg.twoStep)
					params.target_query = 'type=standard^std_change_producer_version=' + $scope.data.stdChg.currentVersion;

				window.postMessage(params, location.origin);
				return;
			} else
			page = 'form';
		}

		if (c.options.page) {page = c.options.page;}
		if (c.options.table) {table = c.options.table;}
		var url = formatRedirectUrl(page, table, sys_id);
		if ($scope.data.sc_cat_item.sys_class_name === "sc_cat_item_producer" || $scope.data.sc_cat_item.sys_class_name === "std_change_record_producer") {
			if (redirectUrl) {
				$window.location.href = redirectUrl;
			} else {
				var newURL = $location.search(url);
		        spAriaFocusManager.navigateToLink(newURL.url());
			}
			return;
		}
		$location.search(formatRedirectUrl('sc_request', 'sc_request', sys_id));
		return;
	}
   
	
	

    $timeout(function() {
        if ($document[0].getElementsByClassName('sc-sticky-item-header').length > 0) {
            var titleHeight = $document[0].getElementsByClassName('sc-sticky-item-header')[0].clientHeight;
            $scope.stickyHeaderTop = '-' + (titleHeight - 20 - $document[0].getElementsByClassName('sc-cat-item-short-description')[0].clientHeight) + 'px;';
        }
    });

	$('#more').click(function () {
if($('a span').hasClass('glyphicon-chevron-down'))
{
    $('#more').html('<span class="glyphicon glyphicon-chevron-up"></span> Less Info'); 
}
else
{      
    $('#more').html('<span class="glyphicon glyphicon-chevron-down"></span> More Info'); 
}
});
}]]></client_script>
        <controller_as>c</controller_as>
        <css>

.panel-button {
  float: none;
}

.sp-attachment-add {
  padding: 5px;
}

.p-t-none {
  padding-top: 0 !important;
}

.file-list-wrap {
	margin-bottom: 10px;
}

.sc-btn {
  color: $text-color;
}

.dismiss-button {
  position: absolute;
  top: 1rem;
	right: 10px;
	color: $text-color;
	cursor: pointer;
}

.item-header {
  padding-top: 40px !important;
  padding-bottom: 40px !important;
}

.sc-item-description img {
  max-width: 100%;
  height: auto;
}
.sc-sticky-item-header {
  position: sticky;
  position: -webkit-sticky;
  position: -ms-sticky;
  top: -($font-size-h2 + $font-size-base);
  z-index: 10;
  background-color: inherit;
  border-radius: 4px 4px 0 0;
}
.sc-fixed {
  position: fixed;
  max-height: 100%;
  width: 17.67777%;
}
.no-margin {
	margin: 0px; 
}
.sc-item-error-messages {
  max-height: 100%;
  position: absolute;
  overflow-y: auto;
  overflow-x: hidden;
  width: 100%; 
}
.sc-field-error-label {
  margin-right: .5em; 
  display: inline-block;
  cursor: pointer;
  background-color: $sc-field-error-color;
  text-overflow: ellipsis;
  overflow: hidden;
  white-space: nowrap;
}
.image-gallery {
  font-size: 8px;
  color: #CECECE;
  .active {
    color: #717171;
  }
  i {
    padding: 0 5px;
  }
}
.relative {
  position: relative;
}
.sc-order-widget-btn {
   position: absolute;
   left: 9%;
}

.close-notification {
  	position: absolute;
  	top: 10px;
  	right: 18px;
}
@media only screen and (max-width : 992px) {
  .sc-fixed {
    position: relative;
    width: 100%;
  }
  .wishlist-update-message {
    display : block;
  }
  .sc-item-error-messages {
    position: relative;
  }
  .read-more, .read-less {
    font-size: 15px;
    cursor: pointer;
  }
  .more-text {
    display: none;
  }
  .inline-cart {
    display: none;
  }
  .right-side-cart {
    display: inherit !important;
  }
}
@media only screen and (max-width : 768px) {
  .sc-sticky-item-header {
     position: inherit;
  }
  
}
.inline-cart {
  .quantity-selector {
    display: inline-block;
    width: 65px;
    padding-top: 2px;
  }
}
.alert-success .link {
    text-decoration: underline;
}

.alert-info-border {
	border-color: $alert-info-border;
}
.section{
  border-bottom : 1px groove ; 
}
.min{
  float:right;
}
.course_program .unit li{
  margin:8px;
}
.course_program .subunit li{
  margin:15px;
}
.course_program .subsection {
  margin:13px;
}

.course_program {
  counter-reset: section;
  margin-top:15px;
  
}
.course_program .section{
  counter-reset: subsection;
}
.course_program ul {
   counter-reset: unit;
}
.course_program  .unit ul{
 
  margin:0;
  padding:0;
  
}
.course_program  .unit li{
 cursor:move;
  display:block;
 ;
  
}
.course_program b::before {
  counter-increment: section;
  content: "Section " counter(section) " - ";
}
.course_program .unit li::before {
  
  counter-increment: unit;
  content: counter(unit) ".  ";
}
.course_program .subunit{
  counter-reset: subunit;
}
.course_program .subunit h5::before {
  
  counter-increment: subunit;
  content: counter(subunit) ".  ";
}

.course_program .subsection b::before{
  counter-increment: subsection;
  content: "SubSection " counter(subsection) " - ";
}
.objective{
  background-color:#e6f7ff;
  width:100%;
  height:60%;
  padding:25px;
  margin-top:18px;
  position:relative;
}
.info {
  color:#0099e6;
   position:absolute;
    left: -10px;
  top: -5px;
}
.prior {
  background-color:#ffebe6;
  width:100%;
  height:60%;
  padding:25px;
  margin-top:15px;
  position:relative;
  margin-bottom:15px;
  
}
.icon {
  color:#ff704d;
   position:absolute;
  left: -10px;
  top: -5px;
}
.general{
  //margin:10px;
  
}
.titlestyle{
  background-color:#00251a;
}
.flag{
  background-color:green;
}
.btn{
  background-color:#39796b;
  border: none;
  color: white;
  padding: 17px 35px;
  text-align: center;
  text-decoration: none;
  font-size: 22px;
  font-weight:bold;
  display: block;
   margin : auto;
}
$complete: #1a3300;
$active: #1a3300;
$mute: #e6e6e6;

.steps {
  list-style: none;
  margin-top:30px;
  padding: 0;
  display: table;
  table-layout: fixed;
  width: 100%;
  color: darken($mute, 33%);
  height:4rem;

  &gt; .step {
    position: relative;
    display: table-cell;
    text-align: center;
    font-size: 15px;
    color:#1a3300;
    
    &amp;:before {
      content: attr(data-step);
      display: block;
      margin: 0 auto;
      background: #ffffff;
      border:2px solid $mute;
      color:$mute;
      width: 2rem;
      height: 2rem;
      text-align: center;
      margin-bottom: -4.2rem;
      line-height: 1.9rem;
      border-radius: 50%;
      position: relative;
      z-index: 1;
      font-weight:700;
      font-size:1rem;
    }
    &amp;:after {
      content: '';
      position: absolute;
      display: block;
      background: $mute;
      width: 100%;
      height: 0.125rem;
      top: 1rem;
      left: 50%;
    }
    &amp;:last-child:after {
      display: none;
    }
    &amp;.is-complete {
      color:#1a3300;
      
      &amp;:before {
        content:'\2713';
        color: $complete;
        background:#fef0e2;
        border:2px solid $complete;
      }
      &amp;:after {
        background: $complete;
      }
    }
    &amp;.is-active {
      font-size:1.5rem;

      &amp;:before {
        color: #FFF;
        border:2px solid $complete;
        background: $active;
        margin-bottom: -4.9rem;
      }
    }
  }
}




ul {
  list-style-type: none;
  padding: 0;
  margin: 0;
}
ul::after {
  content: "";
  display: block;
  clear: both;
}

ul {
  background: white;
    list-style: none;
    margin: 0;
    padding-left: 0;
}

.scrollbar li {
    color: black;
    display: block;
    float: left;
    padding: 1rem;
    position: relative;
    text-decoration: none;
    font-size:10px;
    
  transition-duration: 0.5s;
}
  
li a {
  color: #fff;
}

li:hover {
   
    cursor: pointer;
}

ul li ul {
    
    visibility: hidden;
  opacity: 0;
  min-width: 5rem;
    position: absolute;
  transition: all 0.5s ease;
  margin-top: 1rem;
    left: 0;
  display: none;
}






























.scrollbar ol {
	position: relative;
	display: block;
	margin: 70px;
	height: 4px;
	background: #8c8c8c;
}
.scrollbar ol::before,
.scrollbar ol::after {
	content: "";
	position: absolute;
	top: -8px;
	display: block;
	width: 0;
	height: 0;
  border-radius: 10px;
	border: 10px solid #8c8c8c;
}
 ol::before {
	left:-5px;
}
.scrollbar ol::after {
	right: -10px;
	border: 10px solid #8c8c8c;
  border-radius: 10px;
}

/* ---- Timeline elements ---- */
.scrollbar li  {
	position: relative;
	display: inline-block;
	float: left;
	width: 150px;
	font: bold 10px arial;
  height: 50px;
}
.scrollbar li .diplome {
  position: absolute;
  top: -47px;
  left: 36%;
  color: #000000;
}
.scrollbar li .point {
	content: "";
	top: -5px;
	left: 43%;
	display: block;
	width: 0;
	height: 0;
	border: 8px dotted #8c8c8c;
	border-radius: 10px;
	
  position: absolute;
}
.scrollbar li .description {
  display: none;
  background-color: #f4f4f4;
  padding: 4px;
  margin-top: 15px;
  position: relative;
  font-weight: normal;
  z-index: 1;
}
.scrollbar .description::before {
  content: '';
  width: 0; 
  height: 0; 
  border-left: 5px solid transparent;
  border-right: 5px solid transparent;
  border-bottom: 5px solid #f4f4f4;
  position: absolute;
  top: -5px;
  left: 43%;
}

/* ---- Hover effects ---- */
.scrollbar li:hover  {
	cursor: pointer;
  color: #48A4D2;
}
li:hover .description {
  display: block;
}
</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list>color</field_list>
        <has_preview>false</has_preview>
        <id>sc_cat_item_course</id>
        <internal>false</internal>
        <link><![CDATA[function(scope, elem){
    scope.setFocusToAttachment = function () {
		setTimeout(function () {
			var inboxArray = elem.find("a.view-attachment");
			inboxArray.focus();
		}, 100);
	}
	scope.setFocusToAttachmentButton = function () {
		elem.find('.sp-attachment-add')[0].focus();
	}
}
	]]></link>
        <name>sc_cat_item_course</name>
        <option_schema>[{"name":"show_add_cart_button","section":"other","label":"Show Add Cart Button","type":"boolean"},{"hint":"If you turn on this, you will be able to see field validation messages on right side","name":"show_field_validation_messages","default_value":"true","section":"other","label":"Show field validation messages","type":"boolean"},{"hint":"Show Add/Update Wish List buttons","name":"show_add_to_wishlist_button","default_value":"true","section":"other","label":"Show Add/Update Wish List buttons","type":"boolean"},{"hint":"Order item section on top. If you uncheck this, order section will be displayed at bottom of screen","name":"display_cart_on_right","default_value":"true","section":"other","label":"Order Item Section On Top","type":"boolean"},{"hint":"Show item description in few words with an option to read more","name":"show_less_description","default_value":"true","section":"other","label":"Enable Show More/Less for Item description on Mobile","type":"boolean"},{"hint":"Hide the Delivery Time in the widget","name":"hide_delivery_time","section":"other","default_value":"false","label":"Hide Delivery Time","type":"boolean"}]</option_schema>
        <public>false</public>
        <roles/>
        <script><![CDATA[// populate the 'data' variable with catalog item, variables, and variable view
(function() {
data.course_id=$sp.getParameter("sys_id");
	var subunitid;
	data.unit=[];
	 var firstsection = new GlideRecord("x_315700_lms_section");
	var subsection = new GlideRecord("x_315700_lms_section");
 firstsection.addQuery("course",$sp.getParameter("sys_id"));
	firstsection.orderBy("order");
	
	firstsection.addNullQuery("parent_section");
	firstsection.setLimit(1);
	firstsection.query();
	 while (firstsection.next()) {
		 gs.warn("firstsection"+firstsection.getDisplayValue("name"));
	var unit = new GlideRecord("x_315700_lms_unit");
		 
       unit.addQuery("section", firstsection.sys_id);
	     unit.orderBy('order');
	     unit.setLimit(1);
       unit.query();
       while (unit.next()) {
          var unitobj={};
         data.unit_id=unit.getValue("sys_id");
				 $sp.getRecordValues(unitobj,unit,"sys_id,name");
				 data.unit.push(unitobj);
       }
		
		 
		 subsection.addQuery("parent_section",firstsection.sys_id);
		
		 subsection.setLimit(1);
		 subsection.query();
		 
		 while(subsection.next()){
		gs.warn("subunit"+subunitid);
					var subunit = new GlideRecord("x_315700_lms_unit"); 
		 subunit.addQuery("section",subsection.sys_id);
	     subunit.setLimit(1);
       subunit.query();
			 
			  while (subunit.next()) {
         
         subunitid=subunit.getDisplayValue("sys_id");
				
       }
				 }	 
		 if(data.unit.length!=0){
			 data.link="?id=unit_body&unit_id="+data.unit_id+"&sys_id="+data.course_id;
		 }
		 else {
			 data.link="?id=unit_body&unit_id="+subunitid+"&sys_id="+data.course_id;
			 gs.warn("link"+data.link);
		 }
	 }
	
	
	
	
	
	
	
	
	
	
	
		gs.warn("Server Script Start "+JSON.stringify(data.sc_cat_item));
	var embeddedWidgetOptions = ['auto_redirect', 'requested_for_id', 'requested_for_display'];
	if (input && input.action == "from_attachment")
		return;

	if (input && input.action == 'init_item') {
		data._generatedItemGUID = gs.generateGUID();
		return;
	}
	else if (input && input.action === "order_one_step") {

	}
	else if (input && input.action === "order_item") {
		//Minimum set of widget options supported for Embedded widget
		embeddedWidgetOptions.forEach(function (embeddedWidgetOption) {
			if (typeof input[embeddedWidgetOption] != 'undefined')
				options[embeddedWidgetOption] = input[embeddedWidgetOption];
		});
		data.orderItemModal = $sp.getWidget('widget-modal', {
			embeddedWidgetId: 'sc-checkout', 
			embeddedWidgetOptions: {
				cart: {name: input.cart}, 
				action: 'order_now', 
				item: input.itemDetails, 
																																requested_for: {id:options.requested_for_id, displayValue:options.requested_for_display},
																																auto_redirect: options.auto_redirect,
																																parentParams: input.workspaceParams
			}, 
			backdrop: 'static', 
			keyboard: false, 
			size: 'md'
		});
		return;
	} else if (input && input.action == "order_wishlist_item") {
		//Minimum set of widget options supported for Embedded widget
		embeddedWidgetOptions.forEach(function (embeddedWidgetOption) {
			if (typeof input[embeddedWidgetOption] != 'undefined')
				options[embeddedWidgetOption] = input[embeddedWidgetOption];
		});
		data.orderItemModal = $sp.getWidget('widget-modal', {
			embeddedWidgetId: 'sc-checkout', 
			embeddedWidgetOptions: {
				cart: {name: input.cart}, 
				action: 'order_now_wishlisted_item', 
				item: input.itemDetails, 
																																	requested_for: {id:options.requested_for_id, displayValue:options.requested_for_display},
																																	auto_redirect: options.auto_redirect,
																																	parentParams: input.workspaceParams
			}, 
			backdrop: 'static', 
			keyboard: false, 
			size: 'md'
		});
		return;
	} else if (input && input.action === 'log_request') {
		 $sp.logStat('Cat Item Request', input.itemDetails.sys_class_name, input.itemDetails.sys_id, input.itemDetails.name);
		 return;
	}
	
	// portal can specify a catalog and catalog category home page
	var catalogID = $sp.getParameter("catalog_id") ? $sp.getParameter("catalog_id") + "" : "-1";
	data.sc_catalog_page = $sp.getDisplayValue("sc_catalog_page") || "sc_home";
	data.sc_category_page =  "service_catalog_lms";
	var edit_parm = $sp.getParameter('edit');
	data.is_cart_item = edit_parm == 'cart';
	data.is_wishlist_item = edit_parm == 'wishlist';
	data.show_wishlist_msg = false;
	data.recordFound = true;
	options.show_add_cart_button = (options.show_add_cart_button == "true");
	/*var clGenerator = new GlideChoiceList();
	var choiceListQuantity = clGenerator.getChoiceList("sc_cart_item", "quantity");
	var choicelistQuantityData = [];
	for (var i = 0; i < choiceListQuantity.length; i++) {
		var choice = choiceListQuantity.get(i);
		if (!isNaN(choice.getValue()))
			choicelistQuantityData.push({value : parseInt(choice.getValue()), label : choice.getLabel()});
	}
	data.choiceListQuantity = choicelistQuantityData;
	data.quantity = choicelistQuantityData[0].value;
	*/
	gs.warn("Server Script 1 ");
		data.quantity = 1;
	if (options.page) {
		var pageGR = new GlideRecord("sp_page");
		options.page = (pageGR.get(options.page)) ? pageGR.getValue("id") : null;
	}
	if (options.table) {
		var tableGR = new GlideRecord("sys_db_object");
		options.table = (tableGR.get(options.table)) ? tableGR.getValue("name") : null;
	}
	options.url = options.url || "id={page}&is_new_order=true&table={table}&sys_id={sys_id}";
	
	data.showPrices = $sp.showCatalogPrices();
	var m = data.msgs = {};
	m.submitMsg = gs.getMessage("Submit");
	m.requestMsg = gs.getMessage("Request");
	m.orderNowMsg = gs.getMessage("Order Now");
	m.submittedMsg = gs.getMessage("Submitted");
	m.createdMsg = gs.getMessage("Created");
	m.trackMsg = gs.getMessage("track using 'Requests' in the header or");
	m.clickMsg = gs.getMessage("click here to view");
	m.dialogTitle = gs.getMessage("Delete Attachment");
	m.dialogMessage = gs.getMessage("Are you sure?");
	m.dialogOK = gs.getMessage("OK");
	m.dialogCancel = gs.getMessage("Cancel");
	
	m.renameSuccessMsg = gs.getMessage("Attachment renamed successfully");
	m.deleteSuccessMsg = gs.getMessage("Attachment deleted successfully");
	m.wishlistMsg = gs.getMessage('Wish List');
	m.cartMsg = gs.getMessage('Cart');
	m.itemWishlistMsg = gs.getMessage('This item is already in your Wish List. If you attempt to add this item to your Wish List it will overwrite the existing item.');
	m.invalidRecordMsg = gs.getMessage('You are either not authorized or record is not valid.');
	m.wishlistUpdateMsg = gs.getMessage('Your Wish List has been updated.');
	m.wishlistAddMsg = gs.getMessage('Your item has been added to your Wish List.');
	m.cartAddMsg = gs.getMessage('Your item has been added to your Cart. To make changes to the items in your cart, click ');
	m.viewWishListMsg = gs.getMessage('View Wish List');
	m.viewCartMsg = gs.getMessage('View Cart');
	m.delete_attachment = gs.getMessage("Delete Attachment?");
	m.regexError = gs.getMessage("Item with invalid variable can't be saved");
	m.requestSubmitted = gs.getMessage("Thank you, your request has been submitted.");

	data.maxAttachmentSize = parseInt(gs.getProperty("com.glide.attachment.max_size", 1024));
	if (isNaN(data.maxAttachmentSize))
		data.maxAttachmentSize = 24;
	m.largeAttachmentMsg = gs.getMessage("Attached files must be smaller than {0} - please try again", "" + data.maxAttachmentSize + "MB");
	gs.warn("Server Script 2 ");
	var cartName = data.is_cart_item ? 'DEFAULT' : 'saved_items';
	var cart = new sn_sc.CartJS(cartName);
	gs.warn("Server Script 2.1 ");
	if (edit_parm) {
		var cart_item_id = $sp.getParameter("sys_id");
		var gr = new GlideRecord("sc_cart_item");
	/*	if (!gr.get(cart_item_id) || gr.cart != cart.getCartID()) {
			data.recordFound = false;
			return;
		}*/
		
		gs.warn("Server Script 3 ");
		data.showWishlist = data.is_wishlist_item;
		var catItemData = {};
		catItemData.sys_id = gr.getValue('cat_item');
		catItemData.cart_item_id = gr.getUniqueValue();
		catItemData.table = "sc_cart_item";
		catItemData.is_ordering = true;
		data.sc_cat_item = $sp.getCatalogItem(catItemData);
		data.sc_cat_item.isCartItem = true;
		data.sc_cat_item.cart_guide = gr.getValue('order_guide');
		data.hideDeliveryTime = data.sc_cat_item.no_delivery_time;
		if (!data.hideDeliveryTime)
		data.hideDeliveryTime = (options.hide_delivery_time == "true" || data.sc_cat_item.sys_class_name == 'sc_cat_item_producer' || data.sc_cat_item.sys_class_name == 'sc_cat_item_guide' || data.sc_cat_item.sys_class_name == 'std_change_record_producer');
    
		gs.warn("sc_cat_item"+JSON.stringify(data.sc_cat_item));
		var values = getValues(cart_item_id);
		for(var f in data.sc_cat_item._fields) {
			// Put the values into the cat item fields
			var field = data.sc_cat_item._fields[f];
			if (typeof values[f] != "undefined" && typeof values[f].value != "undefined") {
				if (values[f].type == 9 || values[f].type == 10)
					field.value = values[f].displayValue;
				else if (values[f].type == 25)
					field.value = values[f].decrypted_value;
				else
					field.value = values[f].value;
				field.displayValue = values[f].displayValue;
				field.display_value_list = values[f].display_value_list;
			}
			updatePriceOnField(field);
				
		}
		data._generatedItemGUID = cart_item_id;
		data.quantity = '' + gr.quantity;
	} else {
	   gs.warn("Server Script 4 ");
		if (input)
			data.sys_id = input.sys_id;
		else if (options.sys_id)
			data.sys_id = options.sys_id;
		else
			data.sys_id = $sp.getParameter("sys_id") || $sp.getParameter('sl_sys_id');
	
		if (!data.sys_id) {
			data.recordFound = false;
			return;
		}
	
		data._generatedItemGUID = gs.generateGUID();
		var validatedItem = new sn_sc.CatItem('' + data.sys_id);
		if (!validatedItem.canView() || !validatedItem.isVisibleServicePortal()) {
			data.recordFound = false;
			return;
		}
	   
		data.sc_cat_item = $sp.getCatalogItem(data.sys_id + '',
			 false
		);
		gr = new GlideRecord("x_315700_lms_asynchronous_course");
		gr.get("sys_id",data.sys_id);
		gr.query();
		gs.warn("gr"+gr.getDisplayValue("level"));
		data.level=gr.getDisplayValue("level");
		data.objective=gr.getDisplayValue("objective");
		data.prior_knowledge=gr.getDisplayValue("prior_knowledge");
		data.language=gr.getDisplayValue("languages");
		data.duration=gr.getValue("duration");
		gs.warn("duration"+data.duration);
		//gs.warn("Server Script 5 "+JSON.stringify(data.sc_cat_item)+data.sys_id);
		data.hideDeliveryTime = data.sc_cat_item.no_delivery_time;
		if (!data.hideDeliveryTime) 
		data.hideDeliveryTime = (options.hide_delivery_time == "true" || data.sc_cat_item.sys_class_name == 'sc_cat_item_producer' || data.sc_cat_item.sys_class_name == 'sc_cat_item_guide' || data.sc_cat_item.sys_class_name == 'std_change_record_producer');

		if (data.sc_cat_item.category) {
			var categoryJS;
			var categoryID = validatedItem.getFirstAccessibleCategoryForSearch((catalogID && catalogID != "-1") ? catalogID : $sp.getCatalogs().value + "");
			if (GlideStringUtil.isEligibleSysID($sp.getParameter("sysparm_category"))) {
				categoryJS = new sn_sc.CatCategory($sp.getParameter("sysparm_category") + "");
				categoryID = $sp.getParameter("sysparm_category") + "";
			}
			else if(categoryID) {
				categoryJS = new sn_sc.CatCategory(categoryID);
			}
			if (categoryJS && GlideStringUtil.isEligibleSysID(categoryJS.getID())) {
				if (categoryJS.getCatalog()) {
					catalogID = categoryJS.getCatalog();
					data.catalog_id = catalogID;
					var catalogObj = new sn_sc.Catalog(catalogID);
					data.sc_catalog = catalogObj.getTitle();
					data.showWishlist = new sn_sc.Catalog('' + catalogID).isWishlistEnabled();
				}
				data.category = {
					name: categoryJS.getTitle(),
					url: '?id=' + data.sc_category_page + '&sys_id=' + categoryID
				}
				data.categories = [];
				data.categories.push({
					label: categoryJS.getTitle(),
					url: '?id=' + data.sc_category_page + '&sys_id=' + categoryID
				});
				while(categoryJS.getParent()) {
					var parentId =  categoryJS.getParent();
					categoryJS = new sn_sc.CatCategory(parentId);
					var category = {
						label: categoryJS.getTitle(),
						url: '?id=' + data.sc_category_page + '&sys_id=' + parentId
					};
					data.categories.unshift(category);
				}
				if ((($sp.getCatalogs().value + "").split(",")).length > 1) {
					data.all_catalog_msg = gs.getMessage("All Catalogs");
				}
			}
		}

		var gr = new GlideRecord('sc_cart_item');
		gr.addQuery('cart', cart.getCartID());
		gr.addQuery('cat_item', data.sys_id);
		gr.query();
		if (gr.next() && !options.isServiceWorkspace)
			data.show_wishlist_msg = true;
	}
	data.sys_properties = {
		twostep: gs.getProperty("glide.sc.sp.twostep", "true") == 'true'
	};
	var athTblName = 'sc_cart_item';
	var className = data.sc_cat_item.sys_class_name;
	if (!new global.CatalogItemTypeProcessor().canCreateNormalCartItem(className)) {
		if (className == 'sc_cat_item_producer' || className == 'std_change_record_producer') {
				var gr = new GlideRecord(className);
				gr.get(data.sc_cat_item.sys_id);
				if (gr.isValidRecord())
					athTblName = gr.getValue('table_name');
		}
	}
	
	data._attachmentTable = athTblName;
	data.stdChg = {};
	if (className === 'std_change_record_producer') {
		//Populate scope with the porperty for two step
		data.stdChg.twoStep = false;
		var twoStepProp = new global.StdChangeUtils().getValue('two_step') + '';
		if (twoStepProp)
			data.stdChg.twoStep = twoStepProp === '1';
		var stdChgProducerGr = new GlideRecord('std_change_record_producer');
		stdChgProducerGr.get(data.sc_cat_item.sys_id);
		if (stdChgProducerGr.isValidRecord())
			data.stdChg.currentVersion = stdChgProducerGr.getValue('current_version');
	}

	$sp.logStat('Cat Item View', data.sc_cat_item.sys_class_name, data.sc_cat_item.sys_id, data.sc_cat_item.name);
	
	function getValues(sys_id) {
		var qs = new sn_sc.VariablePoolQuestionSetJS();
		qs.setCartID(sys_id);
		qs.load();
		var values = {};
		var questions = qs.getFlatQuestions();
		for (var i = 0; i < questions.length; i++) {
			var qKey = questions[i].name;
			if (typeof qKey == 'undefined' || qKey == '')
				qKey = "IO:" + questions[i].sys_id;
			values[qKey] = questions[i];
		}
		return values;
	}
	function setPrice(field, p, rp) {
		if (p != undefined)
			field.price = p;
		if (rp != undefined)
			field.recurring_price = rp;
	}
	function updatePriceForReferenceTable(field) {
		var tableName = field.refTable + '';
		if (tableName != undefined && tableName != null && tableName != '') {
			var gr = new GlideRecord(tableName);
			if (gr.isValid()) {
				if (gr.get(field.value) && gr.isValidRecord()) {
					updatePrice(gr, field);
					updateRecurringPrice(gr, field);
				}
			}
		}
	}
	function updatePriceForListCollector(field) {
		var tableName = field.refTable + '';
		if (tableName != undefined && tableName != null && tableName != '') {
			var gr = new GlideRecord(tableName);
			if (gr.isValid()) {
				var values = field.value.split(',');
				gr.addQuery('sys_id', values);
				gr.query();
				var p = 0.0;
				var rp = 0.0;
				var price_value_list = [];
				while(gr.next()) {
						var price_field = {};
						updatePrice(gr, price_field);
						updateRecurringPrice(gr, price_field);
						if (price_field.price)
							p += Number(price_field.price);
						else
							price_field.price = 0.0;
						if (price_field.recurring_price)
							rp += Number(price_field.recurring_price);
						else
							price_field.recurring_price = 0.0;
						price_value_list.push(price_field);
				}
				field.price = p;
				field.recurring_price = rp;
				field.price_value_list = price_value_list;
			}
		}
	}
	function updatePrice(gr, field) {
		if (gr.isValidField('price'))
			field.price = gr.getValue('price');
		else if (gr.isValidField('u_price'))
			field.price = gr.getValue('u_price');
	}
	function updateRecurringPrice(gr, field) {
		if (gr.isValidField('recurring_price'))
			field.recurring_price = gr.getValue('recurring_price');
		else if (gr.isValidField('u_recurring_price'))
			field.recurring_price = gr.getValue('u_recurring_price');
	}
	function updatePriceOnField(field) {
		if (field.type == 'boolean' || field.type == 'boolean_confirm') {
			if (field.value == 'true' || field.value == true)
				setPrice(field, field._pricing.price_if_checked, field._pricing.recurring_price_if_checked);
			else
				setPrice(field, 0, 0);
		} else if (field.choices) {
			field.choices.forEach( function(choice) {
				if (choice.value +'' == field.value + '')
					 setPrice(field, choice.price, choice.recurring_price);
			});
		} else if (field._pricing && field._pricing.pricing_implications === true) {
			if (field.type == 'reference') 
				updatePriceForReferenceTable(field);
			else if (field.type == 'glide_list')
				updatePriceForListCollector(field);
		}
	
	}
	data.unitlist = [];
	gs.warn("unit start");
  var section = new GlideRecord("x_315700_lms_section");
 section.addQuery("course",$sp.getParameter("sys_id"));
 section.orderBy("order");
 section.addNullQuery("parent_section");
 section.query();
gs.warn("unit start 2");
 while (section.next()) {
	
 
   var obj = {
     'name': section.getDisplayValue("name"),
     'sys_id': section.getDisplayValue("sys_id"),
     'arrayunit': [],
     'subsection': []
   };
	
   var subsection = new GlideRecord("x_315700_lms_section");
   gs.warn("section " + section.getDisplayValue("name"));
   subsection.addQuery("parent_section", obj.sys_id);
   subsection.query();
   data.subunitlist = [];
   while (subsection.next()) {
     gs.warn("section " + section.getDisplayValue("name") + " subsection " + subsection.getDisplayValue("name"));
     var subobj = {
       'name': subsection.getDisplayValue("name"),
       'sys_id': subsection.getDisplayValue("sys_id"),
       'arraysubunit': []
     };
     obj.subsection.push(subobj);


      var unitsubsection = new GlideRecord("x_315700_lms_unit");
           unitsubsection.addQuery("section", subobj.sys_id);
		       unitsubsection.orderBy('order');
           unitsubsection.query();

           while (unitsubsection.next()) {
               var unitsubobj = {
                   'name': unitsubsection.getDisplayValue("name"),
                   'sys_id': unitsubsection.getDisplayValue("sys_id"),
								    'order': unitsubsection.getDisplayValue("order")
               };
               subobj.arraysubunit.push(unitsubobj);
           }

       }
       var unit = new GlideRecord("x_315700_lms_unit");
       unit.addQuery("section", section.sys_id);
	     unit.orderBy('order');
       unit.query();
       while (unit.next()) {
           gs.warn("inside unit : " + unit.name);
           var unitobj = { 'name': unit.getDisplayValue("name"), 'sys_id': unit.getDisplayValue("sys_id"),'order':unit.getDisplayValue("order") };
           obj.arrayunit.push(unitobj);
       }


 
 data.unitlist.push(obj);
	 gs.warn("unitlist"+data.unitlist);
 
	
	
 }
	if(input && input.id && input.state && input.action =="add_state"){
		var unituserGR = new GlideRecord("x_315700_lms_unit_user");
		//unituserGR.addQuery("unit_id",input.id);
		//unituserGR.addQuery("user_id",gs.getUserID);
		unituserGR.unit_id=input.id;
		unituserGR.user_id=gs.getUserID();
		 
     unituserGR.state=input.state;
   
		
		
		unituserGR.insert();
		
	}
		
	
	
})()]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2019-07-22 08:15:27</sys_created_on>
        <sys_id>e818b9e92f323300a4a2c886f699b678</sys_id>
        <sys_mod_count>628</sys_mod_count>
        <sys_name>sc_cat_item_course</sys_name>
        <sys_package display_value="LMS" source="x_315700_lms">03ba89b6db003300c1e8f53a299619df</sys_package>
        <sys_policy/>
        <sys_scope display_value="LMS">03ba89b6db003300c1e8f53a299619df</sys_scope>
        <sys_update_name>sp_widget_e818b9e92f323300a4a2c886f699b678</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2020-01-24 09:34:47</sys_updated_on>
        <template><![CDATA[<link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.8.1/css/all.css"
    integrity="sha384-50oBUHEmvpQ+1lW4y57PTFmhCaXp0ML5d60M1M7uH2+nqUivzIebhndOJK28anvf" crossorigin="anonymous">
<div class="panel panel-info general">
    <!--
 <div id="sc_cat_item" ng-if="::data.recordFound" sn-atf-blacklist="IS_SERVICE_CATALOG">
  <sp-widget widget="c.orderItemModal" ng-if="c.orderItemModal"></sp-widget>
  <div class="row" ng-if="::data.sc_cat_item" >
    <div class="col-sm-12" ng-class="{true: 'col-md-9', false: 'col-md-12'}[options.display_cart_on_right === 'true']" id="catItemTop">
     
      <div ng-if="data.show_wishlist_msg" class="alert alert-info">
        	{{::m.itemWishlistMsg}}
      </div>
     
      <div class="alert alert-success" ng-if="data.showMsg" sc-bind-html-compile="m.actionMsg">
      </div>   -->

    <!-- Title Section -->
    <div class="wrapper-md b-b break-word item-header titlestyle"
        ng-class="{true: '', false: 'sc-sticky-item-header'}[!c.data.sc_cat_item.short_description]"
        style="top: {{stickyHeaderTop}}">
        <h1 style="text-align:center;color:white;" class="h2 m-t-none m-b-sm font-thin" ng-if="::data.sc_cat_item.name">
            {{::data.sc_cat_item.name}}</h1>
        <span style="color:white;"> <i class="fas fa-globe"> </i> {{data.language}} </span>&nbsp;&nbsp;

        <span style="color:white;"><i class="fas fa-chart-bar "> </i> {{data.level}}</span>&nbsp;&nbsp;
        <span style="color:white;"><i class="fas fa-clock "> </i> {{data.duration}} Hours </span>&nbsp;&nbsp;
        <div class="text-muted sc-cat-item-short-description" ng-if="::data.sc_cat_item.short_description">
            {{::data.sc_cat_item.short_description}}</div>
    </div>
</div>
<widget id="scrollbar"> </widget>
<div class="wrapper-md row b-b no-margin" ng-if="c.data.sc_cat_item.picture || c.data.sc_cat_item.description">
    <div class=" no-padder" ng-if="c.data.sc_cat_item.picture">
        <div class="wrapper-md text-center">
            <i class="fa fa-chevron-left pointer" style="position:absolute; top:50%; left:4%; color:#CECECE"
                ng-if="options.image_gallery"></i>
            <img class="img-responsive catalog-item-image" alt="{{::data.sc_cat_item.name}}" style="display: inline"
                ng-src="{{::data.sc_cat_item.picture}}?t=medium" />
            <i class="fa fa-chevron-right pointer" style="position:absolute; top:50%; right:4%; color:#CECECE"
                ng-if="options.image_gallery"></i>
            <div class="image-gallery padding-top" ng-if="options.image_gallery">
                <i class="fa fa-circle active"></i>
                <i class="fa fa-circle"></i>
                <i class="fa fa-circle"></i>
            </div>
        </div>
    </div>
    <div class=" padder-md break-word" ng-class="{true: '', false: ''}[!c.data.sc_cat_item.picture]">
        <div class="visible-md visible-lg"
            ng-class="{false : 'visible-xs visible-sm', true : 'hidden-xs hidden-sm'}[c.options.show_less_description === 'true']">
            <div ng-bind-html="::data.sc_cat_item.description" class="sc-item-description"></div>
        </div>
        <div class=" visible-xs visible-sm" ng-if="c.options.show_less_description === 'true'">
            <sc-toggle-data sn-data="::data.sc_cat_item.description"></sc-toggle-data>
        </div>
        <div class="objective">
            <i class="fas fa-info-circle fa-2x info"></i>
            <h4>Objectives </h4> <br> {{data.objective}}
        </div>
        <div class="prior">
            <i class="fas fa-exclamation-circle fa-2x icon"></i>
            <h4>
                Prior Knowledges </h4> <br> {{data.prior_knowledge}}
        </div>
        <div>
            <a href={{data.link}}> <input class="btn" type="button" value="Commencer le cours"> </a>
        </div>
        <div class="course_program">
            <div ng-repeat="sec in data.unitlist track by $index  ">
                <div class="section">
                    <!-- <a style="color:blue;" class="far fa-flag fa-lg "></a> -->

                    <!--<img src="unit.png" width="32" height="32"> -->

                    <a style="color:white;background-color:#004d40;"
                        class="fab fa-font-awesome-flag fa-lg fa-border"></a>

                    <b style="font-weight: bold;font-size:18px;color:#004d40"> {{sec.name}} </b> <a class="min"
                        id="more" type="button" data-toggle="collapse" data-target="#collapseExample_{{$index}}"
                        aria-expanded="true" aria-controls="collapseExample_{{$index}}">
                        <span class="glyphicon glyphicon-chevron-down"></span>
                    </a>
                </div>
                <div class="collapse in" id="collapseExample_{{$index}}">
                    <ol>
                        <li ng-repeat="unit in sec.arrayunit " id="{{unit.sys_id}}">
                            <a style="color:black;"
                                href="?id=unit_body&unit_id={{unit.sys_id}}&sys_id={{data.course_id}}"> {{unit.name}}
                            </a>

                        </li>
                    </ol>
                    <div ng-repeat="subsec in sec.subsection">
                        <div class="subsection">
                            <a style="background-color:#39796b;color:white;" class="fas fa-bookmark  fa-border"></a>
                            <!--   <a   style="color:#20B2AA;" class="far fa-bookmark fa-lg"></a> --> <b
                                ng-context-menu="subsectionmenuOptions" style="font-size:19px;color:#39796b;">
                                {{subsec.name}}
                            </b>
                        </div>
                        <div class="subunit">
                            <ol>
                                <li ng-repeat="subunit  in subsec.arraysubunit">
                                    <a style="color:black;"
                                        href="?id=unit_body&unit_id={{subunit.sys_id}}&sys_id={{data.course_id}}">
                                        {{subunit.name}} </a>
                                </li>
                            </ol>
                        </div>
                    </div>

                </div>
            </div>
        </div>
        <div class="" ng-class="{'b-b wrapper-md': !data.no_fields}">
            <sp-cat-item item="::data.sc_cat_item"></sp-cat-item>
            <form>
                <!-- display view and model -->
                <sp-model form-model="::data.sc_cat_item" mandatory="c.mandatory"></sp-model>
            </form>

            <!--
       
        <div class="inline-cart" ng-if="::options.display_cart_on_right !== 'true'">
          <div ng-if="data.sc_cat_item.sys_class_name != 'sc_cat_item_content'" class="wrapper-md b-b">
              <div class="m-b text-right" ng-if="data.showPrices  && (data.sc_cat_item.price || data.sc_cat_item.recurring_price)" >
              <b>${Price}:</b> {{data.sc_cat_item.price_display}}<em ng-if="data.sc_cat_item.recurring_price" class="cat_item_price"> {{data.sc_cat_item.price ? '+' : ''}} {{data.sc_cat_item.recurring_price_display + ' ' + data.sc_cat_item.recurring_price_frequency}}</em>
              </div>
              <div class="m-b text-right" ng-if="!data.hideDeliveryTime && !data.sc_cat_item.no_delivery_time && data.sc_cat_item.estimated_delivery_time">
                <b>${Delivery Time}:</b> {{::data.sc_cat_item.estimated_delivery_time}}
            	</div>
              <div ng-if="::c.allowOrder()" class="text-right">
                <select id="catItemQuantity"
                        ng-if="c.showQuantitySelector()"
                        ng-disabled="submitting || submitted"
                            class="m-r-xs sn-select-basic inline"
                        ng-model="c.quantity"
                         		sn-select-width="65px"
                            aria-label="${Quantity}">
                   <option ng-repeat="num in data.choiceListQuantity" value={{::num.value}}>{{::num.label}}</option>
                </select>
                <button tabindex="0" ng-if="c.showAddCartBtn()" name="add_to_cart" ng-disabled="submitting || submitted" ng-click="triggerAddToCart()" class="btn btn-default m-r-xs">
                  <i class="fa fa fa-shopping-cart m-r-xs"></i>
                  ${Add to Cart}
                </button>
                <button tabindex="0" ng-if="data.is_cart_item" name="update" ng-disabled="submitting || submitted" ng-click="triggerUpdateCart()" class="btn btn-default">
                  <i class="fa fa fa-shopping-cart m-r-xs"></i>
                  ${Update Cart}
                </button>
                <span class="form-group relative" ng-if="c.showAddToWishlist()">
                  <button ng-if="!data.is_wishlist_item" name="add_to_wishlist" ng-click="addToWishlist()" ng-disabled="submitting || submitted" class="btn btn-default m-r-xs">
                    <i class="icon icon-sp-wishlist m-r-xs" style="vertical-align: text-bottom;"></i>
                    ${Add to Wish List}
                  </button>
                  <button ng-if="data.is_wishlist_item" name="update_wishlist" ng-click="addToWishlist()" ng-disabled="submitting || submitted" class="btn btn-default m-r-xs">
                    <i class="icon icon-sp-wishlist m-r-xs" style="vertical-align: text-bottom;"></i>
                    ${Update Wish List}
                  </button>
                </span>
								<button ng-if="::c.showOrderNowButton()" tabindex="0" name="submit" ng-disabled="submitting || submitted" ng-click="triggerOnSubmit()" class="btn btn-primary">{{::submitButtonMsg}}</button>
                <span ng-if="submitting" style="padding-left:4px">${Submitting...}</span>
              </div>
              <div ng-show="hasMandatory(c.mandatory)" class="alert alert-info" style="margin-top: .5em" ng-if="c.options.show_field_validation_messages === 'true'">
                <span ng-if="hasMandatory(mandatory)">${Required information} </span>
                <label ng-repeat="f in c.mandatory" for="sp_formfield_{{::f.catalogFieldName}}" class="label label-danger sc-field-error-label" style="margin-right: .5em; display: inline-block;">{{::f.label}}</label>
              </div>
            </div>
        </div>
        <div ng-if="c.showAttachments()" class="wrapper-md row no-margin">
          <now-attachments-list template="sp_attachment_single_line" ></now-attachments-list>
          <label ng-if="!submitting && !submitted" style="float:right;font-weight:normal;cursor:pointer;">
            <sp-attachment-button></sp-attachment-button>
            <span class="fa fa-asterisk mandatory" 
                  ng-if="data.sc_cat_item.mandatory_attachment" 
                  ng-class="{'mandatory-filled': data.sc_cat_item.mandatory_attachment && (data.sc_cat_item.attachment_submitted || attachments.length > 0)}"
                  style="vertical-align:super"></span>
            <span>${Add attachments}</span>
          </label>
          
        </div>
      </div>
      <div ng-if="::data.sc_cat_item.content_type == 'external'" class="wrapper-md">
        <a ng-href="{{::data.sc_cat_item.url}}" target={{::data.sc_cat_item.target}}>{{::data.sc_cat_item.url}} ➚</a>
      </div>
			<div ng-if="::data.sc_cat_item.content_type == 'kb'" class="wrapper-md">
        <a  ng-href="?id=kb_article&sys_id={{::data.sc_cat_item.kb_article}}">${Go to KB Article:} {{::data.sc_cat_item.kb_article_description}}</a>
      </div>
    </div>
-->
            <!-- Right side content -->
            <div class="col-sm-12 col-md-3 right-side-cart" ng-show="::options.display_cart_on_right === 'false'">
                <!-- Right side cart( If you are chaning anything here, please change in bottom cart section also) -->
                <div ng-class="{true:'sc-fixed', false:'' }[options.display_cart_on_right === 'true']">
                    <div ng-if="data.sc_cat_item.sys_class_name != 'sc_cat_item_content'"
                        class="panel panel-{{::options.color}} b wrapper-md">
                        <div ng-if="::c.allowOrder()">
                            <select id="catItemQuantity" ng-if="c.showQuantitySelector()"
                                ng-disabled="submitting || submitted" class="m-b sn-select-basic" ng-model="c.quantity"
                                aria-label="${Quantity}">
                                <option ng-repeat="num in data.choiceListQuantity" value={{::num.value}}>{{::num.label}}
                                </option>
                            </select>
                        </div>
                        <div class="form-group relative">
                            <div class="form-group"
                                ng-if="data.showPrices && (data.sc_cat_item.price || data.sc_cat_item.recurring_price)">
                                <b>${Price}:</b> {{data.sc_cat_item.price_display}}<em
                                    ng-if="data.sc_cat_item.recurring_price" class="cat_item_price">
                                    {{data.sc_cat_item.price ? '+' : ''}}
                                    {{data.sc_cat_item.recurring_price_display + ' ' + data.sc_cat_item.recurring_price_frequency}}</em>
                            </div>
                            <div class="form-group"
                                ng-if="!data.hideDeliveryTime && !data.sc_cat_item.no_delivery_time && data.sc_cat_item.estimated_delivery_time">
                                <b>${Delivery Time}:</b> {{::data.sc_cat_item.estimated_delivery_time}}
                            </div>
                            <button tabindex="0" ng-if="c.showAddCartBtn()" name="add_to_cart"
                                ng-disabled="submitting || submitted" ng-click="triggerAddToCart()"
                                class="btn btn-default sc-btn form-control">
                                <i class="fa fa fa-shopping-cart sc-order-widget-btn pull-left"></i>
                                ${Add to Cart}
                            </button>
                            <button tabindex="0" ng-if="data.is_cart_item" name="update"
                                ng-disabled="submitting || submitted" ng-click="triggerUpdateCart()"
                                class="btn btn-default sc-btn form-control">
                                <i class="fa fa fa-shopping-cart sc-order-widget-btn pull-left"></i>
                                ${Update Cart}
                            </button>
                        </div>
                        <div class="form-group relative" ng-if="c.showAddToWishlist()">
                            <button ng-if="!data.is_wishlist_item" name="add_to_wishlist" ng-click="addToWishlist()"
                                ng-disabled="submitting || submitted" class="btn btn-default sc-btn form-control">
                                <i class="icon icon-sp-wishlist sc-order-widget-btn pull-left" style="top:5px"></i>
                                ${Add to Wish List}
                            </button>
                            <button ng-if="data.is_wishlist_item" name="update_wishlist" ng-click="addToWishlist()"
                                ng-disabled="submitting || submitted" class="btn btn-default sc-btn form-control">
                                <i class="icon icon-sp-wishlist sc-order-widget-btn pull-left" style="top:5px"></i>
                                ${Update Wish List}
                            </button>
                        </div>
                        <div class="form-group m-b-xs">
                            <button ng-if="::c.showOrderNowButton()" tabindex="0" name="submit"
                                ng-disabled="submitting || submitted" ng-click="triggerOnSubmit()"
                                class="btn btn-primary btn-block">{{::submitButtonMsg}}</button>
                            <span ng-if="submitting" style="padding-left:4px">${Submitting...}</span>
                        </div>
                    </div>
                    <div class="sc-item-error-messages" ng-if="c.options.show_field_validation_messages === 'true'">
                        <div class="row" ng-if="hasMandatory(c.mandatory)" class=" row alert alert-info-border"
                            style="margin-top: .5em">
                            <div class="col-sm-12">
                                <div ng-if="hasMandatory(c.mandatory)">${Required information} </div>
                                <label ng-repeat="f in c.mandatory"
                                    class="label sc-field-error-label">{{::f.label}}</label>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div ng-if="::!data.sc_cat_item">
            <div class="panel panel-default">
                <div class="panel-heading">
                    <h4 class="panel-title">${Item not found}</h4>
                </div>
                <div class="panel-body wrapper">
                    <p>${This item is not found or currently not available}</p>
                    <p>${Suggestions}:</p>
                    <ul>
                        <li>${Try searching for the item}</li>
                        <li>${Go to the Service Catalog homepage}</li>
                    </ul>
                </div>
            </div>
        </div>
        <div class="sr-only" aria-live="assertive">{{::c.status}}</div>
    </div>
    <div ng-if="::!data.recordFound" class="alert alert-info">{{::m.invalidRecordMsg}}</div>
    <now-message key="Added item to shopping cart" value="${Added item to shopping cart}" />
    <now-message key="Attachment(s) are not added" value="${Attachment(s) are not added}" />
    <now-message key="Leave page?" value="${Leave page?}" />
    <now-message key="Changes you made will be lost." value="${Changes you made will be lost.}" />
    <now-message key="Cancel" value="${Cancel}" />
    <now-message key="Leave" value="${Leave}" />]]></template>
    </sp_widget>
<sys_update_version action="INSERT_OR_UPDATE">
        <action>DELETE</action>
        <application display_value="LMS">03ba89b6db003300c1e8f53a299619df</application>
        <file_path/>
        <instance_id>ce1e2e54db7ec0544d2bac44d49619c4</instance_id>
        <instance_name>dev98968</instance_name>
        <name>sp_widget_e818b9e92f323300a4a2c886f699b678</name>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sp_widget"&gt;
    &lt;sp_widget action="INSERT_OR_UPDATE"&gt;
        &lt;category&gt;custom&lt;/category&gt;
        &lt;client_script&gt;&lt;![CDATA[function ($scope, $http, spScUtil, spUtil, nowAttachmentHandler, $rootScope, $sanitize, $window, $sce, i18n, $timeout, $log, spAriaUtil, $document, spModal, $q, spAtf, $location, spAriaFocusManager, spSCNavStateManager) {
	var c = this;
	c.data.item=c.data.sc_cat_item;
  console.log(c.data.item);
	if (c.data.sc_cat_item &amp;&amp; $scope.data.hasOwnProperty("_generatedItemGUID")) {
		c.data.sc_cat_item._attachmentGUID = $scope.data._generatedItemGUID;
	}

	c.quantity = c.data.quantity ? c.data.quantity + "" : "1";
	c.mandatory = [];
	$scope.stickyHeaderTop = '0px';
	c.widget._debugContextMenu = [
		[ i18n.getMessage("Open") + " sc_cat_item", function() {
			var item = c.data.sc_cat_item;
			$window.open("/sp_config?id=form&amp;table=" + item.table + "&amp;sys_id=" + item.sys_id); }]
	];
	
	$rootScope.$on('spModel.gForm.rendered', function() {
		$timeout(function() {
							spAtf.init().then(function(atf) {
								$scope._atf = atf;
								atf.expose('catalog_util', catalogUtil);
							});
		}, 10);
	});
	
	//	ATF helper object
	var catalogUtil = {
		updateGform: function() {
			$scope._atf.expose('g_form', spAtf.augmentForm(g_form));
		},
		
		addRow: function(fieldId, timeoutInMS) {
			if (timeoutInMS &lt;= 0)
				timeoutInMS = 1000;
			var deferred = $q.defer();
			$scope.$broadcast("$sp.sc_multi_row.create_row", fieldId, $scope.data.sc_cat_item.sys_id);
			$scope.$on('spModel.gForm.initialized', function(e, gFormInstance) {
				if (gFormInstance.getSysId() == fieldId)
					deferred.resolve();
			});
			$timeout(function() {
				deferred.reject();
			}, timeoutInMS);
			return deferred.promise;
		},
		
		submit: function (timeout) {
			var deferred = $q.defer();
			$scope.triggerOnSubmit(timeout);
			var cleanup = $scope.$on('$sp.service_catalog.form_submit_failed', function() {
					cleanup();
					deferred.reject("Can't submit form");
			});
			if (g_form) {
					g_form.$private.events.on('submitted', function() {
			var cleanUp = $scope.$on('$sp.sc_cat_item.submitted', function(o, result) {
						$timeout(function() {
							cleanUp();
							deferred.resolve(result);
						}, 10);
					});
				});
			}
			else
				deferred.reject('g_form not initialized');
			
			return deferred.promise;
		},
		
		addToCart: function(timeout) {
			var defer = $q.defer();
			$scope.triggerAddToCart(timeout);
			var cleanup = $scope.$on('$sp.service_catalog.form_submit_failed', function() {
					cleanup();
					defer.reject("Can't submit form");
			});
			if (g_form) {
				g_form.$private.events.on('submitted', function() {
			var cleanup = $scope.$on('$sp.sc_cat_item.add_to_cart', function(o, result) {
				$timeout(function() {
					cleanup();
					defer.resolve(result);
				}, 10);
			});
				});
			}
			else
				defer.reject('g_form not initialized');			
			return defer.promise;
		},
		
		submitCatItem: function(timeout) {
			var defer = $q.defer();
			$scope.triggerOnSubmit(timeout);
			var cleanup = $scope.$on('$sp.service_catalog.form_submit_failed', function() {
					cleanup();
					defer.reject("Can't submit form");
			});
			if (g_form) {
				g_form.$private.events.on('submitted', function() {
				if ($scope.data.sys_properties.twostep &amp;&amp; $scope.data.sc_cat_item.request_method != "submit") {
					defer.resolve();
				}
				else{
					var cleanUp = $scope.$on('$sp.sc_cat_item.submitted', function(o, result) {
						$timeout(function() {
							cleanUp();
							result.single_step = true;
							defer.resolve(result);
						}, 10);
					});
				}
				});
			}
			else
				defer.reject('g_form not initialized');
			return defer.promise;
		},
		
		setQuantity: function(quantity) {
			if ($scope.c.data.sc_cat_item.sys_class_name !== "sc_cat_item_producer" &amp;&amp; $scope.c.data.sc_cat_item.sys_class_name !== "std_change_record_producer") {
				$scope.c.quantity = quantity;
				$scope.$apply();
			}
		},
		
		getQuantity: function() {
			return $scope.c.quantity;
		},
		
		getPrice: function() {
			var obj = {};
			obj.price = $scope.data.sc_cat_item.price_display;
			obj.recurring_price = $scope.data.sc_cat_item.recurring_price_display;
			obj.recurring_frequency = $scope.data.sc_cat_item.recurring_frequency;
			return obj;
		}
	}
	
	c.showAddCartBtn = function() {
		return !$scope.submitted &amp;&amp;
		c.options.show_add_cart_button &amp;&amp;
			c.data.sc_cat_item.sys_class_name !== "sc_cat_item_producer" &amp;&amp;
			c.data.sc_cat_item.sys_class_name !== "std_change_record_producer" &amp;&amp;
			!c.data.sc_cat_item.no_cart &amp;&amp; !c.data.is_cart_item;
	}
	
	c.showQuantitySelector = function() {
		// Following if block is code for hard-setting an aria-label on the quantity select box
		// for displaying the label "quantity"
		if($('#catItemQuantity') != null) {
			var quantityElement = $('#catItemQuantity');
			quantityElement.prev().find(".select2-offscreen").removeAttr("aria-labelledby").attr("aria-label","Quantity " + c.quantity);
		}
		
		return c.data.sc_cat_item.sys_class_name !== "sc_cat_item_producer" &amp;&amp;
			c.data.sc_cat_item.sys_class_name !== "std_change_record_producer" &amp;&amp;
			!c.data.sc_cat_item.no_quantity &amp;&amp;
			(c.data.sc_cat_item.cart_guide === undefined || c.data.sc_cat_item.cart_guide === null)&amp;&amp;
			(!c.data.sc_cat_item.no_order_now || !c.data.sc_cat_item.no_cart);
	}
	c.showOrderNowButton = function() {
		return !$scope.data.is_cart_item &amp;&amp; (c.data.sc_cat_item.use_sc_layout || !c.data.sc_cat_item.no_order_now);
	}
	c.showAddToWishlist = function () {
		return !$scope.submitted  &amp;&amp; 
			(c.data.showWishlist &amp;&amp; 
			 !c.data.sc_cat_item.no_wishlist &amp;&amp; 
			 !c.data.is_cart_item &amp;&amp; 
			 c.options.show_add_to_wishlist_button === 'true');
	}
	c.allowOrder = function() {
		if (c.data.sc_cat_item.use_sc_layout)
			return true;
		if (c.data.sc_cat_item.no_order)
			return false;
		if (c.data.sc_cat_item.no_order_now &amp;&amp; c.data.sc_cat_item.no_cart)
			return false;
		return true;
	}
	
	c.hideCartMsg = function () {
		$scope.data.showMsg = false;
	}

	c.showAttachments = function() {
		return !$scope.submitted &amp;&amp;
			!c.data.sc_cat_item.no_attachments &amp;&amp;
			c.data.sc_cat_item.sys_class_name !== "std_change_record_producer";
	};
	$scope.$on('dialog.upload_too_large.show', function(e) {
		$log.error($scope.m.largeAttachmentMsg);
		spUtil.addErrorMessage($scope.m.largeAttachmentMsg);
	});
	$scope.m = $scope.data.msgs;
	var ah = $scope.attachmentHandler = new nowAttachmentHandler(setAttachments, appendError);
	function appendError(error) {
		spUtil.addErrorMessage(error.msg + error.fileName);
	}
	ah.setParams($scope.data._attachmentTable, $scope.data._generatedItemGUID, 1024 * 1024 * $scope.data.maxAttachmentSize);
	function setAttachments(attachments, action) {
		$scope.attachments = attachments;
		if (action === "added") {
			$scope.setFocusToAttachment();
			if ($scope.attachments.length &gt; 0)
			 $scope.data.sc_cat_item.attachment_submitted = true;
		}
		if (action === "renamed")
			spAriaUtil.sendLiveMessage($scope.m.renameSuccessMsg);
		if (action === "deleted") {
			spAriaUtil.sendLiveMessage($scope.m.deleteSuccessMsg);
			if ($scope.attachments.length == 0)
				$scope.data.sc_cat_item.attachment_submitted = false;
		}
		spUtil.get($scope,{action:"from_attachment"});
	}
	$scope.attachmentHandler.getAttachmentList();
	$scope.confirmDeleteAttachment = function(attachment) {
		spModal.confirm($scope.data.msgs.delete_attachment).then(function() {
			$scope.attachmentHandler.deleteAttachment(attachment);
			$scope.setFocusToAttachmentButton();
		});
	}
	$scope.dismissWishListMessage = function() {
		$scope.is_update_wishlist = false;
	}
	
  if ($scope.data.sc_cat_item) {
		$scope.data.sc_cat_item.description = $sce.trustAsHtml($scope.data.sc_cat_item.description);
		if (angular.equals($scope.data.sc_cat_item._fields, {}))
				$scope.data.no_fields = true;
		if ($scope.data.sc_cat_item.sys_class_name !== "sc_cat_item_producer" &amp;&amp; 
				$scope.data.sc_cat_item.sys_class_name !== "std_change_record_producer") {	
			if ($scope.data.sc_cat_item.request_method == "request")
				$scope.submitButtonMsg = $scope.m.requestMsg;
			else if ($scope.data.sc_cat_item.request_method == "submit")
				$scope.submitButtonMsg = $scope.m.submitMsg;
		else
				$scope.submitButtonMsg = $scope.m.orderNowMsg;
		} else
			$scope.submitButtonMsg = $scope.m.submitMsg;
		
		// Breadcrumbs
		if (!$scope.data.categories)
			$scope.data.categories = [];
		$scope.data.categories.forEach(function(category, index, categories) {
			categories[index].url = category.url + '&amp;catalog_id=' + $scope.data.catalog_id;
		});
		if ($scope.data.is_wishlist_item) {
			$scope.data.categories.unshift({label: $scope.m.wishlistMsg, url: '?id=sc_wishlist'});
			$scope.data.categories.push({label: $scope.data.sc_cat_item.name, url: '#'});
		}
		else if ($scope.data.is_cart_item) {
			$scope.data.categories.unshift({label: $scope.m.cartMsg, url: '?id=sc_cart'});
			$scope.data.categories.push({label: $scope.data.sc_cat_item.name, url: '#'});
		}
		else if ($scope.data.categories.length &gt; 0) {
			$scope.data.categories.unshift({label: $scope.data.sc_catalog || $scope.page.title, url: '?id=' + $scope.data.sc_category_page + "&amp;catalog_id=" + $scope.data.catalog_id});
			$scope.data.categories.push({label: $scope.data.sc_cat_item.name, url: '#'});
			if ($scope.data.all_catalog_msg) {
				$scope.data.categories.unshift({label: $scope.data.all_catalog_msg, url: '?id=' + $scope.data.sc_category_page + "&amp;catalog_id=-1"});
			}
		}
		else {
			$scope.data.categories.push({label: $scope.data.sc_cat_item.name, url: '#'});
		}
		
		$timeout(function() {
			$scope.$emit('sp.update.breadcrumbs', $scope.data.categories);
		});
		spUtil.setSearchPage('sc');
	} else {
		var notFoundBC = [{label: $scope.page.title, url: '?id=' + $scope.data.sc_catalog_page}];
		$timeout(function() {
			$scope.$emit('sp.update.breadcrumbs', notFoundBC);
		});
		spUtil.setSearchPage('sc');
	};
	c.getItemId = function () {
		return $scope.data.sc_cat_item ? $scope.data.sc_cat_item.sys_id : -1;
	};
	var g_form;
	$scope.$on('spModel.gForm.initialized', function(e, gFormInstance) {
		if (gFormInstance.getSysId() != -1 &amp;&amp; gFormInstance.getSysId() != c.getItemId())
			return;
		g_form = gFormInstance;
		spSCNavStateManager.register(g_form);
		$timeout(function() {
				$rootScope.$emit('spModel.gForm.rendered', g_form);
		}, 175);
		
		// This runs after all onSubmit scripts have executed
		g_form.$private.events.on('submitted', function() {
			cleanFailedSubmit();
			$scope.submitting = true;
			if ($scope.data.sc_cat_item.item_action === "order")
				getOne();
			else if ($scope.data.sc_cat_item.item_action === "add_to_cart")
				addToCart();
			else if ($scope.data.sc_cat_item.item_action == "update_cart")
				updateCart();
		});
	});
	function getVarData(fields) {
		var reqData = {};
		for(var obj in fields)
			reqData[fields[obj].name] = fields[obj].value;
		return reqData;
	}
	function addLink(url, msg) {
		return "&lt;a class='link' href=" + url + "&gt;" + msg + "&lt;/a&gt;";
	}
	
	$scope.$on("$sp.service_catalog.wishlist.update", function(evt, item) {
		if (item === $scope.data.sys_id)
			$scope.data.show_wishlist_msg = false;
	});
	$scope.addToWishlist = function() {
		var invalid = false;
		Object.keys($scope.data.sc_cat_item._fields).forEach(function (f) {
			if ($scope.data.sc_cat_item._fields[f].isRegexInvalid &amp;&amp; $scope.data.sc_cat_item._fields[f].isInvalid)
				invalid = true;
		})
		if (invalid) {
			spUtil.addErrorMessage($scope.m.regexError);
			return;
		}
		$scope.submitting = true;
		$scope.m.actionMsg = $scope.data.is_wishlist_item ? $scope.m.wishlistUpdateMsg : $scope.m.wishlistAddMsg;
		$scope.m.actionMsg += addLink('?id=sc_wishlist', $scope.m.viewWishListMsg);
		$scope.m.actionMsg += '&lt;i class="fa fa-close pull-right pointer close-notification" aria-label="${Close Notification}" tabindex="0" ng-click="c.hideCartMsg()"/&gt;';
		$scope.m.actionMsg = $sce.trustAsHtml($scope.m.actionMsg);
		$scope.is_update_wishlist = false;
		spScUtil.addToWishlist($scope.data.sc_cat_item.sys_id, c.quantity, getVarData($scope.data.sc_cat_item._fields), $scope.data._generatedItemGUID).then(function(response) {
			var cartItemId = "";
			for (var i=0; i&lt;response.data.result.items.length; i++) {
				var item = response.data.result.items[i];
				if (item.catalog_item_id === $scope.data.sc_cat_item.sys_id) {
					cartItemId = item.cart_item_id;
					break;
				}
			}
			$rootScope.$broadcast("$sp.service_catalog.wishlist.add_item");
			$rootScope.$broadcast("$sp.service_catalog.wishlist.update", cartItemId);
			g_form.$private.userState.clearModifiedFields();
			$scope.data.showMsg = $scope.is_update_wishlist = true;
			$scope.data.is_wishlist_item = true;
			$scope.data.show_wishlist_msg = false;
			$scope.submitting = false;
			spUtil.scrollTo('#sc_cat_item', 300);
		});
	}

	$scope.triggerAddToCart = function(timeout) {
		$scope.data.sc_cat_item.item_action = "add_to_cart";
		$scope.data.sc_cat_item.quantity = c.quantity;
		$scope.$evalAsync(function () {
			if (g_form) {
				$scope.submitting = true;
				if (!g_form.submit()) {
					timeout = timeout || 1000;
					$timeout(function () {
						$scope.$broadcast('$sp.service_catalog.form_submit_failed', {action_name: 'submit'});
					}, timeout);
				}
			}
			
		})
		return false;
	}

	$scope.triggerUpdateCart = function(timeout) {
		$scope.data.sc_cat_item.item_action = "update_cart";
		$scope.data.sc_cat_item.quantity = c.quantity;
		$scope.$evalAsync(function () {
			if (g_form) {
				$scope.submitting = true;
				if (!g_form.submit()) {
					timeout = timeout || 1000;
					$timeout(function () {
						$scope.$broadcast('$sp.service_catalog.form_submit_failed', {action_name: 'submit'});
					}, timeout);
				}
			}
			
		})
		return false;
	}

	$scope.triggerOnSubmit = function(timeout) {
		if ($scope.options.isServiceWorkspace &amp;&amp; $window.frameElement) {
			var workspaceParams = {};
			workspaceParams.sysparm_parent_table = $window.frameElement.getAttribute('parent-table');
			workspaceParams.sysparm_parent_sys_id = $window.frameElement.getAttribute('parent-sys-id');
			$scope.data.workspaceParams = workspaceParams;
		}
		$scope.data.sc_cat_item.item_action = "order";
		$scope.data.sc_cat_item.quantity = c.quantity;
		$scope.$evalAsync(function () {
			if (g_form) {
				$scope.submitting = true;
				if (!g_form.submit()) {
					timeout = timeout || 1000;
					$timeout(function () {
						$scope.$broadcast('$sp.service_catalog.form_submit_failed', {action_name: 'submit'});
					}, timeout);
				}
			}
			
		})
		return false;
	}
	function setFieldsReadonly() {
		var allFields = g_form.getFieldNames();
		for (var fieldName in allFields) {
			g_form.setReadonly(allFields[fieldName], true);
		}
	}
	// order / create request
	function getOne() {
		$scope.server.get({
			action: 'log_request',
			itemDetails: {
				sys_id: $scope.data.sc_cat_item.sys_id,
										name: $scope.data.sc_cat_item.name,
				sys_class_name: $scope.data.sc_cat_item.sys_class_name
			}
		});
		//Required to pass as payload for usage as embeddedWidget
		var embeddedWidgetOptions = {
			"auto_redirect" : "true",
			"requested_for_id" : "",
			"requested_for_display" : ""
		};
		if ($scope.data.sc_cat_item.sys_class_name != "sc_cat_item_producer" &amp;&amp; $scope.data.sc_cat_item.sys_class_name != "std_change_record_producer") {
			if ($scope.data.sys_properties.twostep &amp;&amp; $scope.data.sc_cat_item.request_method != "submit") {
				var payload = {
					cart: 'cart_' + $scope.data.sc_cat_item.sys_id,
					itemDetails: {
						sys_id: $scope.data.sc_cat_item.sys_id, 
						quantity: $scope.data.sc_cat_item.quantity, 
						fields: getVarData($scope.data.sc_cat_item._fields), 
						newRecordID: $scope.data._generatedItemGUID,
						request_method : $scope.data.sc_cat_item.request_method
					},
					action: $scope.data.is_wishlist_item ? "order_wishlist_item" : "order_item",
					workspaceParams: $scope.data.workspaceParams
				};
				for (var embeddedOption in embeddedWidgetOptions) {
					payload[embeddedOption] = c.options[embeddedOption] || embeddedWidgetOptions[embeddedOption];
				}
				$scope.server.get(payload).then(function(response) {
					var orderItemModalCtrl;
					var unregister = $scope.$on('$sp.service_catalog.cart.cancel_order', function() {
						$scope.submitting = false;
						orderItemModalCtrl.close();
					});
					var closeModalOnSubmit = $scope.$on('$sp.service_catalog.cart.submitted', function(){
						orderItemModalCtrl.close();
						setFieldsReadonly();
						$scope.submitted = true;
					});
					var orderItemModal = angular.copy(response.data.orderItemModal);
					orderItemModal.options.afterOpen = function(ctrl){
						orderItemModalCtrl = ctrl;
					};
					orderItemModal.options.afterClose = function() {
							unregister();
							closeModalOnSubmit();
							c.orderItemModal = null;
							orderItemModalCtrl = null;
						};
						c.orderItemModal = orderItemModal;
					});
			} else {
				var additionalParms = {};
				if ($scope.data.workspaceParams) {
					additionalParms.sysparm_parent_sys_id = $scope.data.workspaceParams.sysparm_parent_sys_id;
					additionalParms.sysparm_parent_table = $scope.data.workspaceParams.sysparm_parent_table;
				}
				$scope.submitting = true;
				if ($scope.data.is_wishlist_item) {

					spScUtil.orderWishlistedItem($scope.data.sc_cat_item.sys_id, $scope.data.sc_cat_item.quantity, getVarData($scope.data.sc_cat_item._fields), $scope.data._generatedItemGUID, additionalParms).then(function(response) {
						var a = response.data.result;
						$scope.$emit("$$uiNotification", a.$$uiNotification);
						$scope.$emit("$sp.sc_cat_item.submitted", a);
						$rootScope.$broadcast("$sp.service_catalog.wishlist.update");
						if (c.options.auto_redirect == 'false') {
							$scope.submitting = false;
							$scope.submitted = true;
							$rootScope.$broadcast("$sp.service_catalog.cart.submitted", true);
							spUtil.addInfoMessage($scope.m.requestSubmitted);
							return;
						} else
							$location.search('id=sc_request&amp;is_new_order=true&amp;table=sc_request&amp;sys_id=' + a.sys_id);
					});
				}
				else {
					spScUtil.orderNow($scope.data.sc_cat_item.sys_id, $scope.data.sc_cat_item.quantity, getVarData($scope.data.sc_cat_item._fields), $scope.data._generatedItemGUID, additionalParms).then(function(response) {
							var a = response.data.result;
							$scope.$emit("$$uiNotification", a.$$uiNotification);
							$scope.$emit("$sp.sc_cat_item.submitted", a);
							if (c.options.auto_redirect == 'false') {
								$scope.submitting = false;
								$scope.submitted = true;
								$rootScope.$broadcast("$sp.service_catalog.cart.submitted", true);
								spUtil.addInfoMessage($scope.m.requestSubmitted);
								return;
							} else if (!$scope._atf)
								$location.search('id=sc_request&amp;is_new_order=true&amp;table=sc_request&amp;sys_id=' + a.sys_id);
					});
				}
			}
		} else {
			postCatalogFormRequest().then(function(response) {
				var a = response.data.result;
				if (!$scope.options.isServiceWorkspace)
				$scope.$emit("$$uiNotification", a.$$uiNotification);
				$scope.$emit("$sp.sc_cat_item.submitted", a);
				if ($scope.data.is_wishlist_item)
					$rootScope.$broadcast("$sp.service_catalog.wishlist.update");
				if (c.options.auto_redirect == 'false') {
					setFieldsReadonly();
					$scope.submitted = true;
				} else if (!$scope._atf)
						handleRedirect(a.number, a.table, a.sys_id, a.redirect_to, a.redirect_portal_url);
				$scope.submitting = false;
				$scope.submitButtonMsg = $scope.m.submittedMsg;
			});
		}
	}

	$scope.$on("$sp.sc_cat_item.submitted", function(){
		g_form.$private.userState.clearModifiedFields();
	});
  
	function addToCart() {
		$scope.server.get({
			action: 'log_request',
			itemDetails: {sys_id: $scope.data.sc_cat_item.sys_id, 
										name: $scope.data.sc_cat_item.name,
										sys_class_name: $scope.data.sc_cat_item.sys_class_name}
		});
		
		postCatalogFormRequest().then(function(response) {
			$rootScope.$broadcast("$sp.service_catalog.cart.add_item");
			$rootScope.$broadcast("$sp.service_catalog.cart.update");
			$scope.$emit("$sp.sc_cat_item.add_to_cart", $scope.data._generatedItemGUID);
			if ($scope.data.is_wishlist_item) {
				$rootScope.$broadcast("$sp.service_catalog.wishlist.update");
				$scope.data.is_wishlist_item = false;
				if ($location.$$search.edit === "wishlist") {
					$location.search("id=sc_wishlist");
					return;
				}
			}
			g_form.$private.userState.clearModifiedFields();
			c.status = i18n.getMessage("Added item to shopping cart");
			$scope.server.get({action: 'init_item'}).then(function(response) {
				$scope.data._generatedItemGUID = response.data._generatedItemGUID;
				ah.setParams($scope.data._attachmentTable, $scope.data._generatedItemGUID, 1024 * 1024 * $scope.data.maxAttachmentSize);
				$scope.attachmentHandler.getAttachmentList();
				$scope.m.actionMsg = $scope.m.cartAddMsg + addLink('?id=sc_cart', $scope.m.viewCartMsg);
				$scope.m.actionMsg += '&lt;i class="fa fa-close pull-right pointer close-notification" aria-label="${Close Notification}" tabindex="0" ng-click="c.hideCartMsg()"/&gt;';
				$scope.m.actionMsg = $sce.trustAsHtml($scope.m.actionMsg);
				$scope.data.showMsg = true;
				$scope.submitting = false;
				cleanFailedSubmit = $scope.$on('$sp.service_catalog.form_submit_failed', function() { $scope.submitting = false; });
				spUtil.scrollTo('#sc_cat_item', 300);
			});
		});
	}
	function updateCart() {
		postCatalogFormRequest().then(function(response) {
			g_form.$private.userState.clearModifiedFields();
			c.status = i18n.getMessage("Updated Item to shopping cart.");
			$location.search('id=sc_cart');
		})
	}
	function postCatalogFormRequest() {
		$scope.submitting = true;
		if ($scope.data.is_wishlist_item) {
			$scope.is_update_wishlist = false;
			$scope.data.show_wishlist_msg = false;
			if ($scope.data.sc_cat_item.sys_class_name === "sc_cat_item_producer")
				return spScUtil.submitWishlistedProducer($scope.data.sc_cat_item.sys_id, getVarData($scope.data.sc_cat_item._fields), $scope.data._generatedItemGUID, $scope.data.workspaceParams);
			else if ($scope.data.sc_cat_item.item_action === "add_to_cart")
				return spScUtil.addWishlistedItemToCart($scope.data.sc_cat_item.sys_id, $scope.data.sc_cat_item.quantity, getVarData($scope.data.sc_cat_item._fields), $scope.data._generatedItemGUID);
		}
		else if ($scope.data.is_cart_item)
			return spScUtil.updateCart($scope.data._generatedItemGUID, $scope.data.sc_cat_item.quantity, getVarData($scope.data.sc_cat_item._fields));
		else if ($scope.data.sc_cat_item.sys_class_name === "sc_cat_item_producer")
			return spScUtil.submitProducer($scope.data.sc_cat_item.sys_id, getVarData($scope.data.sc_cat_item._fields), $scope.data._generatedItemGUID, $scope.data.workspaceParams);
		else if ($scope.data.sc_cat_item.sys_class_name === "std_change_record_producer")
			return spScUtil.submitStdChgProducer($scope.data.sc_cat_item.sys_id, $scope.data.stdChg.twoStep, $scope.data.stdChg.currentVersion, $scope.data._generatedItemGUID, $scope.portal.url_suffix);
		else if ($scope.data.sc_cat_item.item_action === "add_to_cart")
			return spScUtil.addToCart($scope.data.sc_cat_item.sys_id, $scope.data.sc_cat_item.quantity, getVarData($scope.data.sc_cat_item._fields), $scope.data._generatedItemGUID);
	}
	// spModel populates mandatory - hasMandatory is called by the submit button
	$scope.hasMandatory = function() {
		return c.mandatory &amp;&amp; c.mandatory.length &gt; 0;
	};
	
	//	Listeners
	var cleanFailedSubmit = $scope.$on('$sp.service_catalog.form_submit_failed', function() { $scope.submitting = false; });
	
	// switch catalog items
	var unregister = $scope.$on('$sp.list.click', onListClick);
	$scope.$on("$destroy", function() {
		$rootScope.$broadcast("$sp.service_catalog.item.close");
		unregister();
	});
	function onListClick(evt, arg) {
		$scope.data.sys_id = arg.sys_id;
		spUtil.update($scope);
	}
	
	function formatRedirectUrl(page, table, sys_id) {
		var url;
		var paramObj = {page: page, table: table, sys_id: sys_id};
		url = spUtil.format(c.options.url, paramObj);
		return url;
	}
	
	function handleRedirect(n, table, sys_id, redirectTo, redirectUrl) {

		var page = 'form';
		if (table == 'sc_request')
			page = 'sc_request';
		else if (n)
			page = 'ticket';
		
		if (redirectTo == 'catalog_home') 
			page = 'sc_home';

		//For Standard change, always direct to form if not in Workspace
		if ($scope.data.sc_cat_item.sys_class_name === "std_change_record_producer") {
			if ($scope.options.isServiceWorkspace) {
				var params = {};
				params.msg = 'TARGET_RECORD_SELECTED';
				params.target_table = table;
				params.target_sys_id = -1;
				if (sys_id)
					params.target_sys_id = sys_id;

				if ($scope.data.stdChg.twoStep)
					params.target_query = 'type=standard^std_change_producer_version=' + $scope.data.stdChg.currentVersion;

				window.postMessage(params, location.origin);
				return;
			} else
			page = 'form';
		}

		if (c.options.page) {page = c.options.page;}
		if (c.options.table) {table = c.options.table;}
		var url = formatRedirectUrl(page, table, sys_id);
		if ($scope.data.sc_cat_item.sys_class_name === "sc_cat_item_producer" || $scope.data.sc_cat_item.sys_class_name === "std_change_record_producer") {
			if (redirectUrl) {
				$window.location.href = redirectUrl;
			} else {
				var newURL = $location.search(url);
		        spAriaFocusManager.navigateToLink(newURL.url());
			}
			return;
		}
		$location.search(formatRedirectUrl('sc_request', 'sc_request', sys_id));
		return;
	}
   
	
	

    $timeout(function() {
        if ($document[0].getElementsByClassName('sc-sticky-item-header').length &gt; 0) {
            var titleHeight = $document[0].getElementsByClassName('sc-sticky-item-header')[0].clientHeight;
            $scope.stickyHeaderTop = '-' + (titleHeight - 20 - $document[0].getElementsByClassName('sc-cat-item-short-description')[0].clientHeight) + 'px;';
        }
    });

	$('#more').click(function () {
if($('a span').hasClass('glyphicon-chevron-down'))
{
    $('#more').html('&lt;span class="glyphicon glyphicon-chevron-up"&gt;&lt;/span&gt; Less Info'); 
}
else
{      
    $('#more').html('&lt;span class="glyphicon glyphicon-chevron-down"&gt;&lt;/span&gt; More Info'); 
}
});
}]]&gt;&lt;/client_script&gt;
        &lt;controller_as&gt;c&lt;/controller_as&gt;
        &lt;css&gt;

.panel-button {
  float: none;
}

.sp-attachment-add {
  padding: 5px;
}

.p-t-none {
  padding-top: 0 !important;
}

.file-list-wrap {
	margin-bottom: 10px;
}

.sc-btn {
  color: $text-color;
}

.dismiss-button {
  position: absolute;
  top: 1rem;
	right: 10px;
	color: $text-color;
	cursor: pointer;
}

.item-header {
  padding-top: 40px !important;
  padding-bottom: 40px !important;
}

.sc-item-description img {
  max-width: 100%;
  height: auto;
}
.sc-sticky-item-header {
  position: sticky;
  position: -webkit-sticky;
  position: -ms-sticky;
  top: -($font-size-h2 + $font-size-base);
  z-index: 10;
  background-color: inherit;
  border-radius: 4px 4px 0 0;
}
.sc-fixed {
  position: fixed;
  max-height: 100%;
  width: 17.67777%;
}
.no-margin {
	margin: 0px; 
}
.sc-item-error-messages {
  max-height: 100%;
  position: absolute;
  overflow-y: auto;
  overflow-x: hidden;
  width: 100%; 
}
.sc-field-error-label {
  margin-right: .5em; 
  display: inline-block;
  cursor: pointer;
  background-color: $sc-field-error-color;
  text-overflow: ellipsis;
  overflow: hidden;
  white-space: nowrap;
}
.image-gallery {
  font-size: 8px;
  color: #CECECE;
  .active {
    color: #717171;
  }
  i {
    padding: 0 5px;
  }
}
.relative {
  position: relative;
}
.sc-order-widget-btn {
   position: absolute;
   left: 9%;
}

.close-notification {
  	position: absolute;
  	top: 10px;
  	right: 18px;
}
@media only screen and (max-width : 992px) {
  .sc-fixed {
    position: relative;
    width: 100%;
  }
  .wishlist-update-message {
    display : block;
  }
  .sc-item-error-messages {
    position: relative;
  }
  .read-more, .read-less {
    font-size: 15px;
    cursor: pointer;
  }
  .more-text {
    display: none;
  }
  .inline-cart {
    display: none;
  }
  .right-side-cart {
    display: inherit !important;
  }
}
@media only screen and (max-width : 768px) {
  .sc-sticky-item-header {
     position: inherit;
  }
  
}
.inline-cart {
  .quantity-selector {
    display: inline-block;
    width: 65px;
    padding-top: 2px;
  }
}
.alert-success .link {
    text-decoration: underline;
}

.alert-info-border {
	border-color: $alert-info-border;
}
.section{
  border-bottom : 1px groove ; 
}
.min{
  float:right;
}
.course_program .unit li{
  margin:8px;
}
.course_program .subunit li{
  margin:15px;
}
.course_program .subsection {
  margin:13px;
}

.course_program {
  counter-reset: section;
  margin-top:15px;
  
}
.course_program .section{
  counter-reset: subsection;
}
.course_program ul {
   counter-reset: unit;
}
.course_program  .unit ul{
 
  margin:0;
  padding:0;
  
}
.course_program  .unit li{
 cursor:move;
  display:block;
 ;
  
}
.course_program b::before {
  counter-increment: section;
  content: "Section " counter(section) " - ";
}
.course_program .unit li::before {
  
  counter-increment: unit;
  content: counter(unit) ".  ";
}
.course_program .subunit{
  counter-reset: subunit;
}
.course_program .subunit h5::before {
  
  counter-increment: subunit;
  content: counter(subunit) ".  ";
}

.course_program .subsection b::before{
  counter-increment: subsection;
  content: "SubSection " counter(subsection) " - ";
}
.objective{
  background-color:#e6f7ff;
  width:100%;
  height:60%;
  padding:25px;
  margin-top:18px;
  position:relative;
}
.info {
  color:#0099e6;
   position:absolute;
    left: -10px;
  top: -5px;
}
.prior {
  background-color:#ffebe6;
  width:100%;
  height:60%;
  padding:25px;
  margin-top:15px;
  position:relative;
  margin-bottom:15px;
  
}
.icon {
  color:#ff704d;
   position:absolute;
  left: -10px;
  top: -5px;
}
.general{
  //margin:10px;
  
}
.titlestyle{
  background-color:#00251a;
}
.flag{
  background-color:green;
}
.btn{
  background-color:#39796b;
  border: none;
  color: white;
  padding: 17px 35px;
  text-align: center;
  text-decoration: none;
  font-size: 22px;
  font-weight:bold;
  display: block;
   margin : auto;
}
$complete: #1a3300;
$active: #1a3300;
$mute: #e6e6e6;

.steps {
  list-style: none;
  margin-top:30px;
  padding: 0;
  display: table;
  table-layout: fixed;
  width: 100%;
  color: darken($mute, 33%);
  height:4rem;

  &amp;gt; .step {
    position: relative;
    display: table-cell;
    text-align: center;
    font-size: 15px;
    color:#1a3300;
    
    &amp;amp;:before {
      content: attr(data-step);
      display: block;
      margin: 0 auto;
      background: #ffffff;
      border:2px solid $mute;
      color:$mute;
      width: 2rem;
      height: 2rem;
      text-align: center;
      margin-bottom: -4.2rem;
      line-height: 1.9rem;
      border-radius: 50%;
      position: relative;
      z-index: 1;
      font-weight:700;
      font-size:1rem;
    }
    &amp;amp;:after {
      content: '';
      position: absolute;
      display: block;
      background: $mute;
      width: 100%;
      height: 0.125rem;
      top: 1rem;
      left: 50%;
    }
    &amp;amp;:last-child:after {
      display: none;
    }
    &amp;amp;.is-complete {
      color:#1a3300;
      
      &amp;amp;:before {
        content:'\2713';
        color: $complete;
        background:#fef0e2;
        border:2px solid $complete;
      }
      &amp;amp;:after {
        background: $complete;
      }
    }
    &amp;amp;.is-active {
      font-size:1.5rem;

      &amp;amp;:before {
        color: #FFF;
        border:2px solid $complete;
        background: $active;
        margin-bottom: -4.9rem;
      }
    }
  }
}




ul {
  list-style-type: none;
  padding: 0;
  margin: 0;
}
ul::after {
  content: "";
  display: block;
  clear: both;
}

ul {
  background: white;
    list-style: none;
    margin: 0;
    padding-left: 0;
}

.scrollbar li {
    color: black;
    display: block;
    float: left;
    padding: 1rem;
    position: relative;
    text-decoration: none;
    font-size:10px;
    
  transition-duration: 0.5s;
}
  
li a {
  color: #fff;
}

li:hover {
   
    cursor: pointer;
}

ul li ul {
    
    visibility: hidden;
  opacity: 0;
  min-width: 5rem;
    position: absolute;
  transition: all 0.5s ease;
  margin-top: 1rem;
    left: 0;
  display: none;
}






























.scrollbar ol {
	position: relative;
	display: block;
	margin: 70px;
	height: 4px;
	background: #8c8c8c;
}
.scrollbar ol::before,
.scrollbar ol::after {
	content: "";
	position: absolute;
	top: -8px;
	display: block;
	width: 0;
	height: 0;
  border-radius: 10px;
	border: 10px solid #8c8c8c;
}
 ol::before {
	left:-5px;
}
.scrollbar ol::after {
	right: -10px;
	border: 10px solid #8c8c8c;
  border-radius: 10px;
}

/* ---- Timeline elements ---- */
.scrollbar li  {
	position: relative;
	display: inline-block;
	float: left;
	width: 150px;
	font: bold 10px arial;
  height: 50px;
}
.scrollbar li .diplome {
  position: absolute;
  top: -47px;
  left: 36%;
  color: #000000;
}
.scrollbar li .point {
	content: "";
	top: -5px;
	left: 43%;
	display: block;
	width: 0;
	height: 0;
	border: 8px dotted #8c8c8c;
	border-radius: 10px;
	
  position: absolute;
}
.scrollbar li .description {
  display: none;
  background-color: #f4f4f4;
  padding: 4px;
  margin-top: 15px;
  position: relative;
  font-weight: normal;
  z-index: 1;
}
.scrollbar .description::before {
  content: '';
  width: 0; 
  height: 0; 
  border-left: 5px solid transparent;
  border-right: 5px solid transparent;
  border-bottom: 5px solid #f4f4f4;
  position: absolute;
  top: -5px;
  left: 43%;
}

/* ---- Hover effects ---- */
.scrollbar li:hover  {
	cursor: pointer;
  color: #48A4D2;
}
li:hover .description {
  display: block;
}
&lt;/css&gt;
        &lt;data_table&gt;sp_instance&lt;/data_table&gt;
        &lt;demo_data/&gt;
        &lt;description/&gt;
        &lt;docs/&gt;
        &lt;field_list&gt;color&lt;/field_list&gt;
        &lt;has_preview&gt;false&lt;/has_preview&gt;
        &lt;id&gt;sc_cat_item_course&lt;/id&gt;
        &lt;internal&gt;false&lt;/internal&gt;
        &lt;link&gt;&lt;![CDATA[function(scope, elem){
    scope.setFocusToAttachment = function () {
		setTimeout(function () {
			var inboxArray = elem.find("a.view-attachment");
			inboxArray.focus();
		}, 100);
	}
	scope.setFocusToAttachmentButton = function () {
		elem.find('.sp-attachment-add')[0].focus();
	}
}
	]]&gt;&lt;/link&gt;
        &lt;name&gt;sc_cat_item_course&lt;/name&gt;
        &lt;option_schema&gt;[{"name":"show_add_cart_button","section":"other","label":"Show Add Cart Button","type":"boolean"},{"hint":"If you turn on this, you will be able to see field validation messages on right side","name":"show_field_validation_messages","default_value":"true","section":"other","label":"Show field validation messages","type":"boolean"},{"hint":"Show Add/Update Wish List buttons","name":"show_add_to_wishlist_button","default_value":"true","section":"other","label":"Show Add/Update Wish List buttons","type":"boolean"},{"hint":"Order item section on top. If you uncheck this, order section will be displayed at bottom of screen","name":"display_cart_on_right","default_value":"true","section":"other","label":"Order Item Section On Top","type":"boolean"},{"hint":"Show item description in few words with an option to read more","name":"show_less_description","default_value":"true","section":"other","label":"Enable Show More/Less for Item description on Mobile","type":"boolean"},{"hint":"Hide the Delivery Time in the widget","name":"hide_delivery_time","section":"other","default_value":"false","label":"Hide Delivery Time","type":"boolean"}]&lt;/option_schema&gt;
        &lt;public&gt;false&lt;/public&gt;
        &lt;roles/&gt;
        &lt;script&gt;&lt;![CDATA[// populate the 'data' variable with catalog item, variables, and variable view
(function() {
data.course_id=$sp.getParameter("sys_id");
	var subunitid;
	data.unit=[];
	 var firstsection = new GlideRecord("x_315700_lms_section");
	var subsection = new GlideRecord("x_315700_lms_section");
 firstsection.addQuery("course",$sp.getParameter("sys_id"));
	firstsection.orderBy("order");
	
	firstsection.addNullQuery("parent_section");
	firstsection.setLimit(1);
	firstsection.query();
	 while (firstsection.next()) {
		 gs.warn("firstsection"+firstsection.getDisplayValue("name"));
	var unit = new GlideRecord("x_315700_lms_unit");
		 
       unit.addQuery("section", firstsection.sys_id);
	     unit.orderBy('order');
	     unit.setLimit(1);
       unit.query();
       while (unit.next()) {
          var unitobj={};
         data.unit_id=unit.getValue("sys_id");
				 $sp.getRecordValues(unitobj,unit,"sys_id,name");
				 data.unit.push(unitobj);
       }
		
		 
		 subsection.addQuery("parent_section",firstsection.sys_id);
		
		 subsection.setLimit(1);
		 subsection.query();
		 
		 while(subsection.next()){
		gs.warn("subunit"+subunitid);
					var subunit = new GlideRecord("x_315700_lms_unit"); 
		 subunit.addQuery("section",subsection.sys_id);
	     subunit.setLimit(1);
       subunit.query();
			 
			  while (subunit.next()) {
         
         subunitid=subunit.getDisplayValue("sys_id");
				
       }
				 }	 
		 if(data.unit.length!=0){
			 data.link="?id=unit_body&amp;unit_id="+data.unit_id+"&amp;sys_id="+data.course_id;
		 }
		 else {
			 data.link="?id=unit_body&amp;unit_id="+subunitid+"&amp;sys_id="+data.course_id;
			 gs.warn("link"+data.link);
		 }
	 }
	
	
	
	
	
	
	
	
	
	
	
		gs.warn("Server Script Start "+JSON.stringify(data.sc_cat_item));
	var embeddedWidgetOptions = ['auto_redirect', 'requested_for_id', 'requested_for_display'];
	if (input &amp;&amp; input.action == "from_attachment")
		return;

	if (input &amp;&amp; input.action == 'init_item') {
		data._generatedItemGUID = gs.generateGUID();
		return;
	}
	else if (input &amp;&amp; input.action === "order_one_step") {

	}
	else if (input &amp;&amp; input.action === "order_item") {
		//Minimum set of widget options supported for Embedded widget
		embeddedWidgetOptions.forEach(function (embeddedWidgetOption) {
			if (typeof input[embeddedWidgetOption] != 'undefined')
				options[embeddedWidgetOption] = input[embeddedWidgetOption];
		});
		data.orderItemModal = $sp.getWidget('widget-modal', {
			embeddedWidgetId: 'sc-checkout', 
			embeddedWidgetOptions: {
				cart: {name: input.cart}, 
				action: 'order_now', 
				item: input.itemDetails, 
																																requested_for: {id:options.requested_for_id, displayValue:options.requested_for_display},
																																auto_redirect: options.auto_redirect,
																																parentParams: input.workspaceParams
			}, 
			backdrop: 'static', 
			keyboard: false, 
			size: 'md'
		});
		return;
	} else if (input &amp;&amp; input.action == "order_wishlist_item") {
		//Minimum set of widget options supported for Embedded widget
		embeddedWidgetOptions.forEach(function (embeddedWidgetOption) {
			if (typeof input[embeddedWidgetOption] != 'undefined')
				options[embeddedWidgetOption] = input[embeddedWidgetOption];
		});
		data.orderItemModal = $sp.getWidget('widget-modal', {
			embeddedWidgetId: 'sc-checkout', 
			embeddedWidgetOptions: {
				cart: {name: input.cart}, 
				action: 'order_now_wishlisted_item', 
				item: input.itemDetails, 
																																	requested_for: {id:options.requested_for_id, displayValue:options.requested_for_display},
																																	auto_redirect: options.auto_redirect,
																																	parentParams: input.workspaceParams
			}, 
			backdrop: 'static', 
			keyboard: false, 
			size: 'md'
		});
		return;
	} else if (input &amp;&amp; input.action === 'log_request') {
		 $sp.logStat('Cat Item Request', input.itemDetails.sys_class_name, input.itemDetails.sys_id, input.itemDetails.name);
		 return;
	}
	
	// portal can specify a catalog and catalog category home page
	var catalogID = $sp.getParameter("catalog_id") ? $sp.getParameter("catalog_id") + "" : "-1";
	data.sc_catalog_page = $sp.getDisplayValue("sc_catalog_page") || "sc_home";
	data.sc_category_page =  "service_catalog_lms";
	var edit_parm = $sp.getParameter('edit');
	data.is_cart_item = edit_parm == 'cart';
	data.is_wishlist_item = edit_parm == 'wishlist';
	data.show_wishlist_msg = false;
	data.recordFound = true;
	options.show_add_cart_button = (options.show_add_cart_button == "true");
	/*var clGenerator = new GlideChoiceList();
	var choiceListQuantity = clGenerator.getChoiceList("sc_cart_item", "quantity");
	var choicelistQuantityData = [];
	for (var i = 0; i &lt; choiceListQuantity.length; i++) {
		var choice = choiceListQuantity.get(i);
		if (!isNaN(choice.getValue()))
			choicelistQuantityData.push({value : parseInt(choice.getValue()), label : choice.getLabel()});
	}
	data.choiceListQuantity = choicelistQuantityData;
	data.quantity = choicelistQuantityData[0].value;
	*/
	gs.warn("Server Script 1 ");
		data.quantity = 1;
	if (options.page) {
		var pageGR = new GlideRecord("sp_page");
		options.page = (pageGR.get(options.page)) ? pageGR.getValue("id") : null;
	}
	if (options.table) {
		var tableGR = new GlideRecord("sys_db_object");
		options.table = (tableGR.get(options.table)) ? tableGR.getValue("name") : null;
	}
	options.url = options.url || "id={page}&amp;is_new_order=true&amp;table={table}&amp;sys_id={sys_id}";
	
	data.showPrices = $sp.showCatalogPrices();
	var m = data.msgs = {};
	m.submitMsg = gs.getMessage("Submit");
	m.requestMsg = gs.getMessage("Request");
	m.orderNowMsg = gs.getMessage("Order Now");
	m.submittedMsg = gs.getMessage("Submitted");
	m.createdMsg = gs.getMessage("Created");
	m.trackMsg = gs.getMessage("track using 'Requests' in the header or");
	m.clickMsg = gs.getMessage("click here to view");
	m.dialogTitle = gs.getMessage("Delete Attachment");
	m.dialogMessage = gs.getMessage("Are you sure?");
	m.dialogOK = gs.getMessage("OK");
	m.dialogCancel = gs.getMessage("Cancel");
	
	m.renameSuccessMsg = gs.getMessage("Attachment renamed successfully");
	m.deleteSuccessMsg = gs.getMessage("Attachment deleted successfully");
	m.wishlistMsg = gs.getMessage('Wish List');
	m.cartMsg = gs.getMessage('Cart');
	m.itemWishlistMsg = gs.getMessage('This item is already in your Wish List. If you attempt to add this item to your Wish List it will overwrite the existing item.');
	m.invalidRecordMsg = gs.getMessage('You are either not authorized or record is not valid.');
	m.wishlistUpdateMsg = gs.getMessage('Your Wish List has been updated.');
	m.wishlistAddMsg = gs.getMessage('Your item has been added to your Wish List.');
	m.cartAddMsg = gs.getMessage('Your item has been added to your Cart. To make changes to the items in your cart, click ');
	m.viewWishListMsg = gs.getMessage('View Wish List');
	m.viewCartMsg = gs.getMessage('View Cart');
	m.delete_attachment = gs.getMessage("Delete Attachment?");
	m.regexError = gs.getMessage("Item with invalid variable can't be saved");
	m.requestSubmitted = gs.getMessage("Thank you, your request has been submitted.");

	data.maxAttachmentSize = parseInt(gs.getProperty("com.glide.attachment.max_size", 1024));
	if (isNaN(data.maxAttachmentSize))
		data.maxAttachmentSize = 24;
	m.largeAttachmentMsg = gs.getMessage("Attached files must be smaller than {0} - please try again", "" + data.maxAttachmentSize + "MB");
	gs.warn("Server Script 2 ");
	var cartName = data.is_cart_item ? 'DEFAULT' : 'saved_items';
	var cart = new sn_sc.CartJS(cartName);
	gs.warn("Server Script 2.1 ");
	if (edit_parm) {
		var cart_item_id = $sp.getParameter("sys_id");
		var gr = new GlideRecord("sc_cart_item");
	/*	if (!gr.get(cart_item_id) || gr.cart != cart.getCartID()) {
			data.recordFound = false;
			return;
		}*/
		
		gs.warn("Server Script 3 ");
		data.showWishlist = data.is_wishlist_item;
		var catItemData = {};
		catItemData.sys_id = gr.getValue('cat_item');
		catItemData.cart_item_id = gr.getUniqueValue();
		catItemData.table = "sc_cart_item";
		catItemData.is_ordering = true;
		data.sc_cat_item = $sp.getCatalogItem(catItemData);
		data.sc_cat_item.isCartItem = true;
		data.sc_cat_item.cart_guide = gr.getValue('order_guide');
		data.hideDeliveryTime = data.sc_cat_item.no_delivery_time;
		if (!data.hideDeliveryTime)
		data.hideDeliveryTime = (options.hide_delivery_time == "true" || data.sc_cat_item.sys_class_name == 'sc_cat_item_producer' || data.sc_cat_item.sys_class_name == 'sc_cat_item_guide' || data.sc_cat_item.sys_class_name == 'std_change_record_producer');
    
		gs.warn("sc_cat_item"+JSON.stringify(data.sc_cat_item));
		var values = getValues(cart_item_id);
		for(var f in data.sc_cat_item._fields) {
			// Put the values into the cat item fields
			var field = data.sc_cat_item._fields[f];
			if (typeof values[f] != "undefined" &amp;&amp; typeof values[f].value != "undefined") {
				if (values[f].type == 9 || values[f].type == 10)
					field.value = values[f].displayValue;
				else if (values[f].type == 25)
					field.value = values[f].decrypted_value;
				else
					field.value = values[f].value;
				field.displayValue = values[f].displayValue;
				field.display_value_list = values[f].display_value_list;
			}
			updatePriceOnField(field);
				
		}
		data._generatedItemGUID = cart_item_id;
		data.quantity = '' + gr.quantity;
	} else {
	   gs.warn("Server Script 4 ");
		if (input)
			data.sys_id = input.sys_id;
		else if (options.sys_id)
			data.sys_id = options.sys_id;
		else
			data.sys_id = $sp.getParameter("sys_id") || $sp.getParameter('sl_sys_id');
	
		if (!data.sys_id) {
			data.recordFound = false;
			return;
		}
	
		data._generatedItemGUID = gs.generateGUID();
		var validatedItem = new sn_sc.CatItem('' + data.sys_id);
		if (!validatedItem.canView() || !validatedItem.isVisibleServicePortal()) {
			data.recordFound = false;
			return;
		}
	   
		data.sc_cat_item = $sp.getCatalogItem(data.sys_id + '',
			 false
		);
		gr = new GlideRecord("x_315700_lms_asynchronous_course");
		gr.get("sys_id",data.sys_id);
		gr.query();
		gs.warn("gr"+gr.getDisplayValue("level"));
		data.level=gr.getDisplayValue("level");
		data.objective=gr.getDisplayValue("objective");
		data.prior_knowledge=gr.getDisplayValue("prior_knowledge");
		data.language=gr.getDisplayValue("languages");
		data.duration=gr.getValue("duration");
		gs.warn("duration"+data.duration);
		//gs.warn("Server Script 5 "+JSON.stringify(data.sc_cat_item)+data.sys_id);
		data.hideDeliveryTime = data.sc_cat_item.no_delivery_time;
		if (!data.hideDeliveryTime) 
		data.hideDeliveryTime = (options.hide_delivery_time == "true" || data.sc_cat_item.sys_class_name == 'sc_cat_item_producer' || data.sc_cat_item.sys_class_name == 'sc_cat_item_guide' || data.sc_cat_item.sys_class_name == 'std_change_record_producer');

		if (data.sc_cat_item.category) {
			var categoryJS;
			var categoryID = validatedItem.getFirstAccessibleCategoryForSearch((catalogID &amp;&amp; catalogID != "-1") ? catalogID : $sp.getCatalogs().value + "");
			if (GlideStringUtil.isEligibleSysID($sp.getParameter("sysparm_category"))) {
				categoryJS = new sn_sc.CatCategory($sp.getParameter("sysparm_category") + "");
				categoryID = $sp.getParameter("sysparm_category") + "";
			}
			else if(categoryID) {
				categoryJS = new sn_sc.CatCategory(categoryID);
			}
			if (categoryJS &amp;&amp; GlideStringUtil.isEligibleSysID(categoryJS.getID())) {
				if (categoryJS.getCatalog()) {
					catalogID = categoryJS.getCatalog();
					data.catalog_id = catalogID;
					var catalogObj = new sn_sc.Catalog(catalogID);
					data.sc_catalog = catalogObj.getTitle();
					data.showWishlist = new sn_sc.Catalog('' + catalogID).isWishlistEnabled();
				}
				data.category = {
					name: categoryJS.getTitle(),
					url: '?id=' + data.sc_category_page + '&amp;sys_id=' + categoryID
				}
				data.categories = [];
				data.categories.push({
					label: categoryJS.getTitle(),
					url: '?id=' + data.sc_category_page + '&amp;sys_id=' + categoryID
				});
				while(categoryJS.getParent()) {
					var parentId =  categoryJS.getParent();
					categoryJS = new sn_sc.CatCategory(parentId);
					var category = {
						label: categoryJS.getTitle(),
						url: '?id=' + data.sc_category_page + '&amp;sys_id=' + parentId
					};
					data.categories.unshift(category);
				}
				if ((($sp.getCatalogs().value + "").split(",")).length &gt; 1) {
					data.all_catalog_msg = gs.getMessage("All Catalogs");
				}
			}
		}

		var gr = new GlideRecord('sc_cart_item');
		gr.addQuery('cart', cart.getCartID());
		gr.addQuery('cat_item', data.sys_id);
		gr.query();
		if (gr.next() &amp;&amp; !options.isServiceWorkspace)
			data.show_wishlist_msg = true;
	}
	data.sys_properties = {
		twostep: gs.getProperty("glide.sc.sp.twostep", "true") == 'true'
	};
	var athTblName = 'sc_cart_item';
	var className = data.sc_cat_item.sys_class_name;
	if (!new global.CatalogItemTypeProcessor().canCreateNormalCartItem(className)) {
		if (className == 'sc_cat_item_producer' || className == 'std_change_record_producer') {
				var gr = new GlideRecord(className);
				gr.get(data.sc_cat_item.sys_id);
				if (gr.isValidRecord())
					athTblName = gr.getValue('table_name');
		}
	}
	
	data._attachmentTable = athTblName;
	data.stdChg = {};
	if (className === 'std_change_record_producer') {
		//Populate scope with the porperty for two step
		data.stdChg.twoStep = false;
		var twoStepProp = new global.StdChangeUtils().getValue('two_step') + '';
		if (twoStepProp)
			data.stdChg.twoStep = twoStepProp === '1';
		var stdChgProducerGr = new GlideRecord('std_change_record_producer');
		stdChgProducerGr.get(data.sc_cat_item.sys_id);
		if (stdChgProducerGr.isValidRecord())
			data.stdChg.currentVersion = stdChgProducerGr.getValue('current_version');
	}

	$sp.logStat('Cat Item View', data.sc_cat_item.sys_class_name, data.sc_cat_item.sys_id, data.sc_cat_item.name);
	
	function getValues(sys_id) {
		var qs = new sn_sc.VariablePoolQuestionSetJS();
		qs.setCartID(sys_id);
		qs.load();
		var values = {};
		var questions = qs.getFlatQuestions();
		for (var i = 0; i &lt; questions.length; i++) {
			var qKey = questions[i].name;
			if (typeof qKey == 'undefined' || qKey == '')
				qKey = "IO:" + questions[i].sys_id;
			values[qKey] = questions[i];
		}
		return values;
	}
	function setPrice(field, p, rp) {
		if (p != undefined)
			field.price = p;
		if (rp != undefined)
			field.recurring_price = rp;
	}
	function updatePriceForReferenceTable(field) {
		var tableName = field.refTable + '';
		if (tableName != undefined &amp;&amp; tableName != null &amp;&amp; tableName != '') {
			var gr = new GlideRecord(tableName);
			if (gr.isValid()) {
				if (gr.get(field.value) &amp;&amp; gr.isValidRecord()) {
					updatePrice(gr, field);
					updateRecurringPrice(gr, field);
				}
			}
		}
	}
	function updatePriceForListCollector(field) {
		var tableName = field.refTable + '';
		if (tableName != undefined &amp;&amp; tableName != null &amp;&amp; tableName != '') {
			var gr = new GlideRecord(tableName);
			if (gr.isValid()) {
				var values = field.value.split(',');
				gr.addQuery('sys_id', values);
				gr.query();
				var p = 0.0;
				var rp = 0.0;
				var price_value_list = [];
				while(gr.next()) {
						var price_field = {};
						updatePrice(gr, price_field);
						updateRecurringPrice(gr, price_field);
						if (price_field.price)
							p += Number(price_field.price);
						else
							price_field.price = 0.0;
						if (price_field.recurring_price)
							rp += Number(price_field.recurring_price);
						else
							price_field.recurring_price = 0.0;
						price_value_list.push(price_field);
				}
				field.price = p;
				field.recurring_price = rp;
				field.price_value_list = price_value_list;
			}
		}
	}
	function updatePrice(gr, field) {
		if (gr.isValidField('price'))
			field.price = gr.getValue('price');
		else if (gr.isValidField('u_price'))
			field.price = gr.getValue('u_price');
	}
	function updateRecurringPrice(gr, field) {
		if (gr.isValidField('recurring_price'))
			field.recurring_price = gr.getValue('recurring_price');
		else if (gr.isValidField('u_recurring_price'))
			field.recurring_price = gr.getValue('u_recurring_price');
	}
	function updatePriceOnField(field) {
		if (field.type == 'boolean' || field.type == 'boolean_confirm') {
			if (field.value == 'true' || field.value == true)
				setPrice(field, field._pricing.price_if_checked, field._pricing.recurring_price_if_checked);
			else
				setPrice(field, 0, 0);
		} else if (field.choices) {
			field.choices.forEach( function(choice) {
				if (choice.value +'' == field.value + '')
					 setPrice(field, choice.price, choice.recurring_price);
			});
		} else if (field._pricing &amp;&amp; field._pricing.pricing_implications === true) {
			if (field.type == 'reference') 
				updatePriceForReferenceTable(field);
			else if (field.type == 'glide_list')
				updatePriceForListCollector(field);
		}
	
	}
	data.unitlist = [];
	gs.warn("unit start");
  var section = new GlideRecord("x_315700_lms_section");
 section.addQuery("course",$sp.getParameter("sys_id"));
 section.orderBy("order");
 section.addNullQuery("parent_section");
 section.query();
gs.warn("unit start 2");
 while (section.next()) {
	
 
   var obj = {
     'name': section.getDisplayValue("name"),
     'sys_id': section.getDisplayValue("sys_id"),
     'arrayunit': [],
     'subsection': []
   };
	
   var subsection = new GlideRecord("x_315700_lms_section");
   gs.warn("section " + section.getDisplayValue("name"));
   subsection.addQuery("parent_section", obj.sys_id);
   subsection.query();
   data.subunitlist = [];
   while (subsection.next()) {
     gs.warn("section " + section.getDisplayValue("name") + " subsection " + subsection.getDisplayValue("name"));
     var subobj = {
       'name': subsection.getDisplayValue("name"),
       'sys_id': subsection.getDisplayValue("sys_id"),
       'arraysubunit': []
     };
     obj.subsection.push(subobj);


      var unitsubsection = new GlideRecord("x_315700_lms_unit");
           unitsubsection.addQuery("section", subobj.sys_id);
		       unitsubsection.orderBy('order');
           unitsubsection.query();

           while (unitsubsection.next()) {
               var unitsubobj = {
                   'name': unitsubsection.getDisplayValue("name"),
                   'sys_id': unitsubsection.getDisplayValue("sys_id"),
								    'order': unitsubsection.getDisplayValue("order")
               };
               subobj.arraysubunit.push(unitsubobj);
           }

       }
       var unit = new GlideRecord("x_315700_lms_unit");
       unit.addQuery("section", section.sys_id);
	     unit.orderBy('order');
       unit.query();
       while (unit.next()) {
           gs.warn("inside unit : " + unit.name);
           var unitobj = { 'name': unit.getDisplayValue("name"), 'sys_id': unit.getDisplayValue("sys_id"),'order':unit.getDisplayValue("order") };
           obj.arrayunit.push(unitobj);
       }


 
 data.unitlist.push(obj);
	 gs.warn("unitlist"+data.unitlist);
 
	
	
 }
	if(input &amp;&amp; input.id &amp;&amp; input.state &amp;&amp; input.action =="add_state"){
		var unituserGR = new GlideRecord("x_315700_lms_unit_user");
		//unituserGR.addQuery("unit_id",input.id);
		//unituserGR.addQuery("user_id",gs.getUserID);
		unituserGR.unit_id=input.id;
		unituserGR.user_id=gs.getUserID();
		 
     unituserGR.state=input.state;
   
		
		
		unituserGR.insert();
		
	}
		
	
	
})()]]&gt;&lt;/script&gt;
        &lt;servicenow&gt;false&lt;/servicenow&gt;
        &lt;sys_class_name&gt;sp_widget&lt;/sys_class_name&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2019-07-22 08:15:27&lt;/sys_created_on&gt;
        &lt;sys_id&gt;e818b9e92f323300a4a2c886f699b678&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;628&lt;/sys_mod_count&gt;
        &lt;sys_name&gt;sc_cat_item_course&lt;/sys_name&gt;
        &lt;sys_package display_value="LMS" source="x_315700_lms"&gt;03ba89b6db003300c1e8f53a299619df&lt;/sys_package&gt;
        &lt;sys_policy/&gt;
        &lt;sys_scope display_value="LMS"&gt;03ba89b6db003300c1e8f53a299619df&lt;/sys_scope&gt;
        &lt;sys_update_name&gt;sp_widget_e818b9e92f323300a4a2c886f699b678&lt;/sys_update_name&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2020-01-24 09:34:47&lt;/sys_updated_on&gt;
        &lt;template&gt;&lt;![CDATA[&lt;link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.8.1/css/all.css"
    integrity="sha384-50oBUHEmvpQ+1lW4y57PTFmhCaXp0ML5d60M1M7uH2+nqUivzIebhndOJK28anvf" crossorigin="anonymous"&gt;
&lt;div class="panel panel-info general"&gt;
    &lt;!--
 &lt;div id="sc_cat_item" ng-if="::data.recordFound" sn-atf-blacklist="IS_SERVICE_CATALOG"&gt;
  &lt;sp-widget widget="c.orderItemModal" ng-if="c.orderItemModal"&gt;&lt;/sp-widget&gt;
  &lt;div class="row" ng-if="::data.sc_cat_item" &gt;
    &lt;div class="col-sm-12" ng-class="{true: 'col-md-9', false: 'col-md-12'}[options.display_cart_on_right === 'true']" id="catItemTop"&gt;
     
      &lt;div ng-if="data.show_wishlist_msg" class="alert alert-info"&gt;
        	{{::m.itemWishlistMsg}}
      &lt;/div&gt;
     
      &lt;div class="alert alert-success" ng-if="data.showMsg" sc-bind-html-compile="m.actionMsg"&gt;
      &lt;/div&gt;   --&gt;

    &lt;!-- Title Section --&gt;
    &lt;div class="wrapper-md b-b break-word item-header titlestyle"
        ng-class="{true: '', false: 'sc-sticky-item-header'}[!c.data.sc_cat_item.short_description]"
        style="top: {{stickyHeaderTop}}"&gt;
        &lt;h1 style="text-align:center;color:white;" class="h2 m-t-none m-b-sm font-thin" ng-if="::data.sc_cat_item.name"&gt;
            {{::data.sc_cat_item.name}}&lt;/h1&gt;
        &lt;span style="color:white;"&gt; &lt;i class="fas fa-globe"&gt; &lt;/i&gt; {{data.language}} &lt;/span&gt;&amp;nbsp;&amp;nbsp;

        &lt;span style="color:white;"&gt;&lt;i class="fas fa-chart-bar "&gt; &lt;/i&gt; {{data.level}}&lt;/span&gt;&amp;nbsp;&amp;nbsp;
        &lt;span style="color:white;"&gt;&lt;i class="fas fa-clock "&gt; &lt;/i&gt; {{data.duration}} Hours &lt;/span&gt;&amp;nbsp;&amp;nbsp;
        &lt;div class="text-muted sc-cat-item-short-description" ng-if="::data.sc_cat_item.short_description"&gt;
            {{::data.sc_cat_item.short_description}}&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;widget id="scrollbar"&gt; &lt;/widget&gt;
&lt;div class="wrapper-md row b-b no-margin" ng-if="c.data.sc_cat_item.picture || c.data.sc_cat_item.description"&gt;
    &lt;div class=" no-padder" ng-if="c.data.sc_cat_item.picture"&gt;
        &lt;div class="wrapper-md text-center"&gt;
            &lt;i class="fa fa-chevron-left pointer" style="position:absolute; top:50%; left:4%; color:#CECECE"
                ng-if="options.image_gallery"&gt;&lt;/i&gt;
            &lt;img class="img-responsive catalog-item-image" alt="{{::data.sc_cat_item.name}}" style="display: inline"
                ng-src="{{::data.sc_cat_item.picture}}?t=medium" /&gt;
            &lt;i class="fa fa-chevron-right pointer" style="position:absolute; top:50%; right:4%; color:#CECECE"
                ng-if="options.image_gallery"&gt;&lt;/i&gt;
            &lt;div class="image-gallery padding-top" ng-if="options.image_gallery"&gt;
                &lt;i class="fa fa-circle active"&gt;&lt;/i&gt;
                &lt;i class="fa fa-circle"&gt;&lt;/i&gt;
                &lt;i class="fa fa-circle"&gt;&lt;/i&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=" padder-md break-word" ng-class="{true: '', false: ''}[!c.data.sc_cat_item.picture]"&gt;
        &lt;div class="visible-md visible-lg"
            ng-class="{false : 'visible-xs visible-sm', true : 'hidden-xs hidden-sm'}[c.options.show_less_description === 'true']"&gt;
            &lt;div ng-bind-html="::data.sc_cat_item.description" class="sc-item-description"&gt;&lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=" visible-xs visible-sm" ng-if="c.options.show_less_description === 'true'"&gt;
            &lt;sc-toggle-data sn-data="::data.sc_cat_item.description"&gt;&lt;/sc-toggle-data&gt;
        &lt;/div&gt;
        &lt;div class="objective"&gt;
            &lt;i class="fas fa-info-circle fa-2x info"&gt;&lt;/i&gt;
            &lt;h4&gt;Objectives &lt;/h4&gt; &lt;br&gt; {{data.objective}}
        &lt;/div&gt;
        &lt;div class="prior"&gt;
            &lt;i class="fas fa-exclamation-circle fa-2x icon"&gt;&lt;/i&gt;
            &lt;h4&gt;
                Prior Knowledges &lt;/h4&gt; &lt;br&gt; {{data.prior_knowledge}}
        &lt;/div&gt;
        &lt;div&gt;
            &lt;a href={{data.link}}&gt; &lt;input class="btn" type="button" value="Commencer le cours"&gt; &lt;/a&gt;
        &lt;/div&gt;
        &lt;div class="course_program"&gt;
            &lt;div ng-repeat="sec in data.unitlist track by $index  "&gt;
                &lt;div class="section"&gt;
                    &lt;!-- &lt;a style="color:blue;" class="far fa-flag fa-lg "&gt;&lt;/a&gt; --&gt;

                    &lt;!--&lt;img src="unit.png" width="32" height="32"&gt; --&gt;

                    &lt;a style="color:white;background-color:#004d40;"
                        class="fab fa-font-awesome-flag fa-lg fa-border"&gt;&lt;/a&gt;

                    &lt;b style="font-weight: bold;font-size:18px;color:#004d40"&gt; {{sec.name}} &lt;/b&gt; &lt;a class="min"
                        id="more" type="button" data-toggle="collapse" data-target="#collapseExample_{{$index}}"
                        aria-expanded="true" aria-controls="collapseExample_{{$index}}"&gt;
                        &lt;span class="glyphicon glyphicon-chevron-down"&gt;&lt;/span&gt;
                    &lt;/a&gt;
                &lt;/div&gt;
                &lt;div class="collapse in" id="collapseExample_{{$index}}"&gt;
                    &lt;ol&gt;
                        &lt;li ng-repeat="unit in sec.arrayunit " id="{{unit.sys_id}}"&gt;
                            &lt;a style="color:black;"
                                href="?id=unit_body&amp;unit_id={{unit.sys_id}}&amp;sys_id={{data.course_id}}"&gt; {{unit.name}}
                            &lt;/a&gt;

                        &lt;/li&gt;
                    &lt;/ol&gt;
                    &lt;div ng-repeat="subsec in sec.subsection"&gt;
                        &lt;div class="subsection"&gt;
                            &lt;a style="background-color:#39796b;color:white;" class="fas fa-bookmark  fa-border"&gt;&lt;/a&gt;
                            &lt;!--   &lt;a   style="color:#20B2AA;" class="far fa-bookmark fa-lg"&gt;&lt;/a&gt; --&gt; &lt;b
                                ng-context-menu="subsectionmenuOptions" style="font-size:19px;color:#39796b;"&gt;
                                {{subsec.name}}
                            &lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div class="subunit"&gt;
                            &lt;ol&gt;
                                &lt;li ng-repeat="subunit  in subsec.arraysubunit"&gt;
                                    &lt;a style="color:black;"
                                        href="?id=unit_body&amp;unit_id={{subunit.sys_id}}&amp;sys_id={{data.course_id}}"&gt;
                                        {{subunit.name}} &lt;/a&gt;
                                &lt;/li&gt;
                            &lt;/ol&gt;
                        &lt;/div&gt;
                    &lt;/div&gt;

                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class="" ng-class="{'b-b wrapper-md': !data.no_fields}"&gt;
            &lt;sp-cat-item item="::data.sc_cat_item"&gt;&lt;/sp-cat-item&gt;
            &lt;form&gt;
                &lt;!-- display view and model --&gt;
                &lt;sp-model form-model="::data.sc_cat_item" mandatory="c.mandatory"&gt;&lt;/sp-model&gt;
            &lt;/form&gt;

            &lt;!--
       
        &lt;div class="inline-cart" ng-if="::options.display_cart_on_right !== 'true'"&gt;
          &lt;div ng-if="data.sc_cat_item.sys_class_name != 'sc_cat_item_content'" class="wrapper-md b-b"&gt;
              &lt;div class="m-b text-right" ng-if="data.showPrices  &amp;&amp; (data.sc_cat_item.price || data.sc_cat_item.recurring_price)" &gt;
              &lt;b&gt;${Price}:&lt;/b&gt; {{data.sc_cat_item.price_display}}&lt;em ng-if="data.sc_cat_item.recurring_price" class="cat_item_price"&gt; {{data.sc_cat_item.price ? '+' : ''}} {{data.sc_cat_item.recurring_price_display + ' ' + data.sc_cat_item.recurring_price_frequency}}&lt;/em&gt;
              &lt;/div&gt;
              &lt;div class="m-b text-right" ng-if="!data.hideDeliveryTime &amp;&amp; !data.sc_cat_item.no_delivery_time &amp;&amp; data.sc_cat_item.estimated_delivery_time"&gt;
                &lt;b&gt;${Delivery Time}:&lt;/b&gt; {{::data.sc_cat_item.estimated_delivery_time}}
            	&lt;/div&gt;
              &lt;div ng-if="::c.allowOrder()" class="text-right"&gt;
                &lt;select id="catItemQuantity"
                        ng-if="c.showQuantitySelector()"
                        ng-disabled="submitting || submitted"
                            class="m-r-xs sn-select-basic inline"
                        ng-model="c.quantity"
                         		sn-select-width="65px"
                            aria-label="${Quantity}"&gt;
                   &lt;option ng-repeat="num in data.choiceListQuantity" value={{::num.value}}&gt;{{::num.label}}&lt;/option&gt;
                &lt;/select&gt;
                &lt;button tabindex="0" ng-if="c.showAddCartBtn()" name="add_to_cart" ng-disabled="submitting || submitted" ng-click="triggerAddToCart()" class="btn btn-default m-r-xs"&gt;
                  &lt;i class="fa fa fa-shopping-cart m-r-xs"&gt;&lt;/i&gt;
                  ${Add to Cart}
                &lt;/button&gt;
                &lt;button tabindex="0" ng-if="data.is_cart_item" name="update" ng-disabled="submitting || submitted" ng-click="triggerUpdateCart()" class="btn btn-default"&gt;
                  &lt;i class="fa fa fa-shopping-cart m-r-xs"&gt;&lt;/i&gt;
                  ${Update Cart}
                &lt;/button&gt;
                &lt;span class="form-group relative" ng-if="c.showAddToWishlist()"&gt;
                  &lt;button ng-if="!data.is_wishlist_item" name="add_to_wishlist" ng-click="addToWishlist()" ng-disabled="submitting || submitted" class="btn btn-default m-r-xs"&gt;
                    &lt;i class="icon icon-sp-wishlist m-r-xs" style="vertical-align: text-bottom;"&gt;&lt;/i&gt;
                    ${Add to Wish List}
                  &lt;/button&gt;
                  &lt;button ng-if="data.is_wishlist_item" name="update_wishlist" ng-click="addToWishlist()" ng-disabled="submitting || submitted" class="btn btn-default m-r-xs"&gt;
                    &lt;i class="icon icon-sp-wishlist m-r-xs" style="vertical-align: text-bottom;"&gt;&lt;/i&gt;
                    ${Update Wish List}
                  &lt;/button&gt;
                &lt;/span&gt;
								&lt;button ng-if="::c.showOrderNowButton()" tabindex="0" name="submit" ng-disabled="submitting || submitted" ng-click="triggerOnSubmit()" class="btn btn-primary"&gt;{{::submitButtonMsg}}&lt;/button&gt;
                &lt;span ng-if="submitting" style="padding-left:4px"&gt;${Submitting...}&lt;/span&gt;
              &lt;/div&gt;
              &lt;div ng-show="hasMandatory(c.mandatory)" class="alert alert-info" style="margin-top: .5em" ng-if="c.options.show_field_validation_messages === 'true'"&gt;
                &lt;span ng-if="hasMandatory(mandatory)"&gt;${Required information} &lt;/span&gt;
                &lt;label ng-repeat="f in c.mandatory" for="sp_formfield_{{::f.catalogFieldName}}" class="label label-danger sc-field-error-label" style="margin-right: .5em; display: inline-block;"&gt;{{::f.label}}&lt;/label&gt;
              &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div ng-if="c.showAttachments()" class="wrapper-md row no-margin"&gt;
          &lt;now-attachments-list template="sp_attachment_single_line" &gt;&lt;/now-attachments-list&gt;
          &lt;label ng-if="!submitting &amp;&amp; !submitted" style="float:right;font-weight:normal;cursor:pointer;"&gt;
            &lt;sp-attachment-button&gt;&lt;/sp-attachment-button&gt;
            &lt;span class="fa fa-asterisk mandatory" 
                  ng-if="data.sc_cat_item.mandatory_attachment" 
                  ng-class="{'mandatory-filled': data.sc_cat_item.mandatory_attachment &amp;&amp; (data.sc_cat_item.attachment_submitted || attachments.length &gt; 0)}"
                  style="vertical-align:super"&gt;&lt;/span&gt;
            &lt;span&gt;${Add attachments}&lt;/span&gt;
          &lt;/label&gt;
          
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;div ng-if="::data.sc_cat_item.content_type == 'external'" class="wrapper-md"&gt;
        &lt;a ng-href="{{::data.sc_cat_item.url}}" target={{::data.sc_cat_item.target}}&gt;{{::data.sc_cat_item.url}} ➚&lt;/a&gt;
      &lt;/div&gt;
			&lt;div ng-if="::data.sc_cat_item.content_type == 'kb'" class="wrapper-md"&gt;
        &lt;a  ng-href="?id=kb_article&amp;sys_id={{::data.sc_cat_item.kb_article}}"&gt;${Go to KB Article:} {{::data.sc_cat_item.kb_article_description}}&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
--&gt;
            &lt;!-- Right side content --&gt;
            &lt;div class="col-sm-12 col-md-3 right-side-cart" ng-show="::options.display_cart_on_right === 'false'"&gt;
                &lt;!-- Right side cart( If you are chaning anything here, please change in bottom cart section also) --&gt;
                &lt;div ng-class="{true:'sc-fixed', false:'' }[options.display_cart_on_right === 'true']"&gt;
                    &lt;div ng-if="data.sc_cat_item.sys_class_name != 'sc_cat_item_content'"
                        class="panel panel-{{::options.color}} b wrapper-md"&gt;
                        &lt;div ng-if="::c.allowOrder()"&gt;
                            &lt;select id="catItemQuantity" ng-if="c.showQuantitySelector()"
                                ng-disabled="submitting || submitted" class="m-b sn-select-basic" ng-model="c.quantity"
                                aria-label="${Quantity}"&gt;
                                &lt;option ng-repeat="num in data.choiceListQuantity" value={{::num.value}}&gt;{{::num.label}}
                                &lt;/option&gt;
                            &lt;/select&gt;
                        &lt;/div&gt;
                        &lt;div class="form-group relative"&gt;
                            &lt;div class="form-group"
                                ng-if="data.showPrices &amp;&amp; (data.sc_cat_item.price || data.sc_cat_item.recurring_price)"&gt;
                                &lt;b&gt;${Price}:&lt;/b&gt; {{data.sc_cat_item.price_display}}&lt;em
                                    ng-if="data.sc_cat_item.recurring_price" class="cat_item_price"&gt;
                                    {{data.sc_cat_item.price ? '+' : ''}}
                                    {{data.sc_cat_item.recurring_price_display + ' ' + data.sc_cat_item.recurring_price_frequency}}&lt;/em&gt;
                            &lt;/div&gt;
                            &lt;div class="form-group"
                                ng-if="!data.hideDeliveryTime &amp;&amp; !data.sc_cat_item.no_delivery_time &amp;&amp; data.sc_cat_item.estimated_delivery_time"&gt;
                                &lt;b&gt;${Delivery Time}:&lt;/b&gt; {{::data.sc_cat_item.estimated_delivery_time}}
                            &lt;/div&gt;
                            &lt;button tabindex="0" ng-if="c.showAddCartBtn()" name="add_to_cart"
                                ng-disabled="submitting || submitted" ng-click="triggerAddToCart()"
                                class="btn btn-default sc-btn form-control"&gt;
                                &lt;i class="fa fa fa-shopping-cart sc-order-widget-btn pull-left"&gt;&lt;/i&gt;
                                ${Add to Cart}
                            &lt;/button&gt;
                            &lt;button tabindex="0" ng-if="data.is_cart_item" name="update"
                                ng-disabled="submitting || submitted" ng-click="triggerUpdateCart()"
                                class="btn btn-default sc-btn form-control"&gt;
                                &lt;i class="fa fa fa-shopping-cart sc-order-widget-btn pull-left"&gt;&lt;/i&gt;
                                ${Update Cart}
                            &lt;/button&gt;
                        &lt;/div&gt;
                        &lt;div class="form-group relative" ng-if="c.showAddToWishlist()"&gt;
                            &lt;button ng-if="!data.is_wishlist_item" name="add_to_wishlist" ng-click="addToWishlist()"
                                ng-disabled="submitting || submitted" class="btn btn-default sc-btn form-control"&gt;
                                &lt;i class="icon icon-sp-wishlist sc-order-widget-btn pull-left" style="top:5px"&gt;&lt;/i&gt;
                                ${Add to Wish List}
                            &lt;/button&gt;
                            &lt;button ng-if="data.is_wishlist_item" name="update_wishlist" ng-click="addToWishlist()"
                                ng-disabled="submitting || submitted" class="btn btn-default sc-btn form-control"&gt;
                                &lt;i class="icon icon-sp-wishlist sc-order-widget-btn pull-left" style="top:5px"&gt;&lt;/i&gt;
                                ${Update Wish List}
                            &lt;/button&gt;
                        &lt;/div&gt;
                        &lt;div class="form-group m-b-xs"&gt;
                            &lt;button ng-if="::c.showOrderNowButton()" tabindex="0" name="submit"
                                ng-disabled="submitting || submitted" ng-click="triggerOnSubmit()"
                                class="btn btn-primary btn-block"&gt;{{::submitButtonMsg}}&lt;/button&gt;
                            &lt;span ng-if="submitting" style="padding-left:4px"&gt;${Submitting...}&lt;/span&gt;
                        &lt;/div&gt;
                    &lt;/div&gt;
                    &lt;div class="sc-item-error-messages" ng-if="c.options.show_field_validation_messages === 'true'"&gt;
                        &lt;div class="row" ng-if="hasMandatory(c.mandatory)" class=" row alert alert-info-border"
                            style="margin-top: .5em"&gt;
                            &lt;div class="col-sm-12"&gt;
                                &lt;div ng-if="hasMandatory(c.mandatory)"&gt;${Required information} &lt;/div&gt;
                                &lt;label ng-repeat="f in c.mandatory"
                                    class="label sc-field-error-label"&gt;{{::f.label}}&lt;/label&gt;
                            &lt;/div&gt;
                        &lt;/div&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div ng-if="::!data.sc_cat_item"&gt;
            &lt;div class="panel panel-default"&gt;
                &lt;div class="panel-heading"&gt;
                    &lt;h4 class="panel-title"&gt;${Item not found}&lt;/h4&gt;
                &lt;/div&gt;
                &lt;div class="panel-body wrapper"&gt;
                    &lt;p&gt;${This item is not found or currently not available}&lt;/p&gt;
                    &lt;p&gt;${Suggestions}:&lt;/p&gt;
                    &lt;ul&gt;
                        &lt;li&gt;${Try searching for the item}&lt;/li&gt;
                        &lt;li&gt;${Go to the Service Catalog homepage}&lt;/li&gt;
                    &lt;/ul&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class="sr-only" aria-live="assertive"&gt;{{::c.status}}&lt;/div&gt;
    &lt;/div&gt;
    &lt;div ng-if="::!data.recordFound" class="alert alert-info"&gt;{{::m.invalidRecordMsg}}&lt;/div&gt;
    &lt;now-message key="Added item to shopping cart" value="${Added item to shopping cart}" /&gt;
    &lt;now-message key="Attachment(s) are not added" value="${Attachment(s) are not added}" /&gt;
    &lt;now-message key="Leave page?" value="${Leave page?}" /&gt;
    &lt;now-message key="Changes you made will be lost." value="${Changes you made will be lost.}" /&gt;
    &lt;now-message key="Cancel" value="${Cancel}" /&gt;
    &lt;now-message key="Leave" value="${Leave}" /&gt;]]&gt;&lt;/template&gt;
    &lt;/sp_widget&gt;
&lt;/record_update&gt;</payload>
        <payload_hash>285093134</payload_hash>
        <record_name>sc_cat_item_course</record_name>
        <reverted_from/>
        <source>52acf146078d1010288ff16c7c1ed025</source>
        <source_table>sys_upgrade_history</source_table>
        <state>previous</state>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2020-05-29 14:25:58</sys_created_on>
        <sys_id>35ec7586078d1010288ff16c7c1ed0b6</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_recorded_at>17260d344d40000001</sys_recorded_at>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2020-05-29 14:25:58</sys_updated_on>
        <type>Widget</type>
        <update_guid>f1ec7586e58d10104e2ebcf161fb33b6</update_guid>
        <update_guid_history>f1ec7586e58d10104e2ebcf161fb33b6:285093134</update_guid_history>
    </sys_update_version>
    <sys_metadata_delete action="INSERT_OR_UPDATE">
        <sys_audit_delete display_value="sc_cat_item_course">5f5af57a074a1010288ff16c7c1ed007</sys_audit_delete>
        <sys_class_name>sys_metadata_delete</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2020-07-20 15:13:05</sys_created_on>
        <sys_db_object display_value="" name="sp_widget">sp_widget</sys_db_object>
        <sys_id>19e4ab8106d740e183396dee6dd71bc1</sys_id>
        <sys_metadata>e818b9e92f323300a4a2c886f699b678</sys_metadata>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>sc_cat_item_course</sys_name>
        <sys_package display_value="LMS" source="x_315700_lms">03ba89b6db003300c1e8f53a299619df</sys_package>
        <sys_parent/>
        <sys_policy/>
        <sys_scope display_value="LMS">03ba89b6db003300c1e8f53a299619df</sys_scope>
        <sys_scope_delete display_value="">1b77cb96281c4768a079ae9292f582b1</sys_scope_delete>
        <sys_update_name>sp_widget_e818b9e92f323300a4a2c886f699b678</sys_update_name>
        <sys_update_version display_value="sp_widget_e818b9e92f323300a4a2c886f699b678">35ec7586078d1010288ff16c7c1ed0b6</sys_update_version>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2020-07-20 15:13:05</sys_updated_on>
    </sys_metadata_delete>
</record_update>
